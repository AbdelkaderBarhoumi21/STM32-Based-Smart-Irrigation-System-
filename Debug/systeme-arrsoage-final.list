
systeme-arrsoage-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007448  08007448  00008448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d8  080078d8  000091e4  2**0
                  CONTENTS
  4 .ARM          00000008  080078d8  080078d8  000088d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e0  080078e0  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e0  080078e0  000088e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078e4  080078e4  000088e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080078e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091e4  2**0
                  CONTENTS
 10 .bss          000002f0  200001e4  200001e4  000091e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  000091e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7aa  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fbf  00000000  00000000  000169be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00018980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd0  00000000  00000000  000198a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002341e  00000000  00000000  0001a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115e3  00000000  00000000  0003d896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9d47  00000000  00000000  0004ee79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128bc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005170  00000000  00000000  00128c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0012dd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007430 	.word	0x08007430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007430 	.word	0x08007430

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000ea2:	4a38      	ldr	r2, [pc, #224]	@ (8000f84 <HD44780_Init+0xec>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000ea8:	4b37      	ldr	r3, [pc, #220]	@ (8000f88 <HD44780_Init+0xf0>)
 8000eaa:	2208      	movs	r2, #8
 8000eac:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000eae:	4b37      	ldr	r3, [pc, #220]	@ (8000f8c <HD44780_Init+0xf4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000eb4:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <HD44780_Init+0xec>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d907      	bls.n	8000ecc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <HD44780_Init+0xf4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <HD44780_Init+0xf4>)
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e006      	b.n	8000eda <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <HD44780_Init+0xf4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <HD44780_Init+0xf4>)
 8000ed8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000eda:	f000 f985 	bl	80011e8 <DelayInit>
  HAL_Delay(50);
 8000ede:	2032      	movs	r0, #50	@ 0x32
 8000ee0:	f001 f996 	bl	8002210 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000ee4:	4b28      	ldr	r3, [pc, #160]	@ (8000f88 <HD44780_Init+0xf0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f943 	bl	8001174 <ExpanderWrite>
  HAL_Delay(1000);
 8000eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ef2:	f001 f98d 	bl	8002210 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000ef6:	2030      	movs	r0, #48	@ 0x30
 8000ef8:	f000 f92b 	bl	8001152 <Write4Bits>
  DelayUS(4500);
 8000efc:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f00:	f000 f99c 	bl	800123c <DelayUS>

  Write4Bits(0x03 << 4);
 8000f04:	2030      	movs	r0, #48	@ 0x30
 8000f06:	f000 f924 	bl	8001152 <Write4Bits>
  DelayUS(4500);
 8000f0a:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f0e:	f000 f995 	bl	800123c <DelayUS>

  Write4Bits(0x03 << 4);
 8000f12:	2030      	movs	r0, #48	@ 0x30
 8000f14:	f000 f91d 	bl	8001152 <Write4Bits>
  DelayUS(4500);
 8000f18:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f1c:	f000 f98e 	bl	800123c <DelayUS>

  Write4Bits(0x02 << 4);
 8000f20:	2020      	movs	r0, #32
 8000f22:	f000 f916 	bl	8001152 <Write4Bits>
  DelayUS(100);
 8000f26:	2064      	movs	r0, #100	@ 0x64
 8000f28:	f000 f988 	bl	800123c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HD44780_Init+0xf4>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f8ce 	bl	80010d8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <HD44780_Init+0xf8>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000f42:	f000 f875 	bl	8001030 <HD44780_Display>
  HD44780_Clear();
 8000f46:	f000 f82b 	bl	8000fa0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HD44780_Init+0xfc>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HD44780_Init+0xfc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8bc 	bl	80010d8 <SendCommand>
  DelayUS(4500);
 8000f60:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000f64:	f000 f96a 	bl	800123c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000f68:	490b      	ldr	r1, [pc, #44]	@ (8000f98 <HD44780_Init+0x100>)
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f876 	bl	800105c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000f70:	490a      	ldr	r1, [pc, #40]	@ (8000f9c <HD44780_Init+0x104>)
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 f872 	bl	800105c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000f78:	f000 f81d 	bl	8000fb6 <HD44780_Home>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000203 	.word	0x20000203
 8000f88:	20000204 	.word	0x20000204
 8000f8c:	20000200 	.word	0x20000200
 8000f90:	20000201 	.word	0x20000201
 8000f94:	20000202 	.word	0x20000202
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HD44780_Clear>:

void HD44780_Clear()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 f897 	bl	80010d8 <SendCommand>
  DelayUS(2000);
 8000faa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fae:	f000 f945 	bl	800123c <DelayUS>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HD44780_Home>:

void HD44780_Home()
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f000 f88c 	bl	80010d8 <SendCommand>
  DelayUS(2000);
 8000fc0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fc4:	f000 f93a 	bl	800123c <DelayUS>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HD44780_SetCursor+0x5c>)
 8000fde:	f107 0408 	add.w	r4, r7, #8
 8000fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000fe8:	4b10      	ldr	r3, [pc, #64]	@ (800102c <HD44780_SetCursor+0x60>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	79ba      	ldrb	r2, [r7, #6]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d303      	bcc.n	8000ffa <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HD44780_SetCursor+0x60>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	3318      	adds	r3, #24
 8001000:	443b      	add	r3, r7
 8001002:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4413      	add	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	b25b      	sxtb	r3, r3
 8001010:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001014:	b25b      	sxtb	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f85d 	bl	80010d8 <SendCommand>
}
 800101e:	bf00      	nop
 8001020:	371c      	adds	r7, #28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
 8001026:	bf00      	nop
 8001028:	08007448 	.word	0x08007448
 800102c:	20000203 	.word	0x20000203

08001030 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HD44780_Display+0x28>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HD44780_Display+0x28>)
 8001040:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HD44780_Display+0x28>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f843 	bl	80010d8 <SendCommand>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000201 	.word	0x20000201

0800105c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	b25b      	sxtb	r3, r3
 8001076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800107a:	b25b      	sxtb	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f82a 	bl	80010d8 <SendCommand>
  for (int i=0; i<8; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e009      	b.n	800109e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f82e 	bl	80010f4 <SendChar>
  for (int i=0; i<8; i++)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3301      	adds	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	ddf2      	ble.n	800108a <HD44780_CreateSpecialChar+0x2e>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80010b6:	e006      	b.n	80010c6 <HD44780_PrintStr+0x18>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f817 	bl	80010f4 <SendChar>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f4      	bne.n	80010b8 <HD44780_PrintStr+0xa>
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f812 	bl	8001110 <Send>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SendChar>:

static void SendChar(uint8_t ch)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2101      	movs	r1, #1
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f804 	bl	8001110 <Send>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f023 030f 	bic.w	r3, r3, #15
 8001126:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	4313      	orrs	r3, r2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f80b 	bl	8001152 <Write4Bits>
  Write4Bits((lownib)|mode);
 800113c:	7bba      	ldrb	r2, [r7, #14]
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	4313      	orrs	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f804 	bl	8001152 <Write4Bits>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f808 	bl	8001174 <ExpanderWrite>
  PulseEnable(value);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f820 	bl	80011ac <PulseEnable>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <ExpanderWrite+0x30>)
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4313      	orrs	r3, r2
 8001186:	b2db      	uxtb	r3, r3
 8001188:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800118a:	f107 020f 	add.w	r2, r7, #15
 800118e:	230a      	movs	r3, #10
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	214e      	movs	r1, #78	@ 0x4e
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <ExpanderWrite+0x34>)
 8001198:	f002 f822 	bl	80031e0 <HAL_I2C_Master_Transmit>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000204 	.word	0x20000204
 80011a8:	200002c8 	.word	0x200002c8

080011ac <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffd8 	bl	8001174 <ExpanderWrite>
  DelayUS(20);
 80011c4:	2014      	movs	r0, #20
 80011c6:	f000 f839 	bl	800123c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffce 	bl	8001174 <ExpanderWrite>
  DelayUS(20);
 80011d8:	2014      	movs	r0, #20
 80011da:	f000 f82f 	bl	800123c <DelayUS>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <DelayInit>:

static void DelayInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <DelayInit+0x4c>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <DelayInit+0x4c>)
 80011f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011f6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <DelayInit+0x4c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <DelayInit+0x4c>)
 80011fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001202:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <DelayInit+0x50>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0b      	ldr	r2, [pc, #44]	@ (8001238 <DelayInit+0x50>)
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <DelayInit+0x50>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <DelayInit+0x50>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <DelayInit+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001222:	bf00      	nop
  __ASM volatile ("NOP");
 8001224:	bf00      	nop
  __ASM volatile ("NOP");
 8001226:	bf00      	nop
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000edf0 	.word	0xe000edf0
 8001238:	e0001000 	.word	0xe0001000

0800123c <DelayUS>:

static void DelayUS(uint32_t us) {
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <DelayUS+0x44>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <DelayUS+0x48>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9a      	lsrs	r2, r3, #18
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <DelayUS+0x4c>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <DelayUS+0x4c>)
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f6      	bhi.n	800125e <DelayUS+0x22>
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000010 	.word	0x20000010
 8001284:	431bde83 	.word	0x431bde83
 8001288:	e0001000 	.word	0xe0001000

0800128c <Read_Rain_Sensor>:
uint32_t pMillis, cMillis;
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;
// Fonction pour lire la valeur analogique du capteur de pluie
uint32_t Read_Rain_Sensor(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_0;  // Assurez-vous que le capteur est connecté sur le canal 0
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <Read_Rain_Sensor+0x5c>)
 80012b0:	f001 f980 	bl	80025b4 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <Read_Rain_Sensor+0x32>
        return 0;  // Gestion d'erreur
 80012ba:	2300      	movs	r3, #0
 80012bc:	e010      	b.n	80012e0 <Read_Rain_Sensor+0x54>
    }

    HAL_ADC_Start(&hadc1);
 80012be:	480a      	ldr	r0, [pc, #40]	@ (80012e8 <Read_Rain_Sensor+0x5c>)
 80012c0:	f001 f80e 	bl	80022e0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <Read_Rain_Sensor+0x5c>)
 80012ca:	f001 f8db 	bl	8002484 <HAL_ADC_PollForConversion>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d104      	bne.n	80012de <Read_Rain_Sensor+0x52>
        return HAL_ADC_GetValue(&hadc1);
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <Read_Rain_Sensor+0x5c>)
 80012d6:	f001 f960 	bl	800259a <HAL_ADC_GetValue>
 80012da:	4603      	mov	r3, r0
 80012dc:	e000      	b.n	80012e0 <Read_Rain_Sensor+0x54>
    }
    return 0;  // Gestion d'erreur
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000238 	.word	0x20000238

080012ec <Read_Soil_Moisture_Sensor>:

// Fonction pour lire la valeur analogique du capteur d'humidité du sol
uint32_t Read_Soil_Moisture_Sensor(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_1;  // Assurez-vous que le capteur est connecté sur le canal 1
 80012fe:	2301      	movs	r3, #1
 8001300:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	480e      	ldr	r0, [pc, #56]	@ (8001348 <Read_Soil_Moisture_Sensor+0x5c>)
 8001310:	f001 f950 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <Read_Soil_Moisture_Sensor+0x32>
        return 0;  // Gestion d'erreur
 800131a:	2300      	movs	r3, #0
 800131c:	e010      	b.n	8001340 <Read_Soil_Moisture_Sensor+0x54>
    }

    HAL_ADC_Start(&hadc2);
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <Read_Soil_Moisture_Sensor+0x5c>)
 8001320:	f000 ffde 	bl	80022e0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	4807      	ldr	r0, [pc, #28]	@ (8001348 <Read_Soil_Moisture_Sensor+0x5c>)
 800132a:	f001 f8ab 	bl	8002484 <HAL_ADC_PollForConversion>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d104      	bne.n	800133e <Read_Soil_Moisture_Sensor+0x52>
        return HAL_ADC_GetValue(&hadc2);
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <Read_Soil_Moisture_Sensor+0x5c>)
 8001336:	f001 f930 	bl	800259a <HAL_ADC_GetValue>
 800133a:	4603      	mov	r3, r0
 800133c:	e000      	b.n	8001340 <Read_Soil_Moisture_Sensor+0x54>
    }
    return 0;  // Gestion d'erreur
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000280 	.word	0x20000280

0800134c <Read_Rain_Digital>:

// Fonction pour vérifier la sortie numérique du capteur de pluie
GPIO_PinState Read_Rain_Digital(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);  // Assurez-vous que le pin est correct
 8001350:	2104      	movs	r1, #4
 8001352:	4803      	ldr	r0, [pc, #12]	@ (8001360 <Read_Rain_Digital+0x14>)
 8001354:	f001 fdce 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020000 	.word	0x40020000

08001364 <microDelay>:

void microDelay (uint16_t delay)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <microDelay+0x30>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001376:	bf00      	nop
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <microDelay+0x30>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3f9      	bcc.n	8001378 <microDelay+0x14>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000031c 	.word	0x2000031c

08001398 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 80013b0:	2380      	movs	r3, #128	@ 0x80
 80013b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	482a      	ldr	r0, [pc, #168]	@ (8001470 <DHT22_Start+0xd8>)
 80013c6:	f001 fbf9 	bl	8002bbc <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 80013ca:	2200      	movs	r2, #0
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	4828      	ldr	r0, [pc, #160]	@ (8001470 <DHT22_Start+0xd8>)
 80013d0:	f001 fda8 	bl	8002f24 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 80013d4:	f240 5014 	movw	r0, #1300	@ 0x514
 80013d8:	f7ff ffc4 	bl	8001364 <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80013dc:	2201      	movs	r2, #1
 80013de:	2180      	movs	r1, #128	@ 0x80
 80013e0:	4823      	ldr	r0, [pc, #140]	@ (8001470 <DHT22_Start+0xd8>)
 80013e2:	f001 fd9f 	bl	8002f24 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80013e6:	201e      	movs	r0, #30
 80013e8:	f7ff ffbc 	bl	8001364 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	481d      	ldr	r0, [pc, #116]	@ (8001470 <DHT22_Start+0xd8>)
 80013fa:	f001 fbdf 	bl	8002bbc <HAL_GPIO_Init>
  microDelay (40);
 80013fe:	2028      	movs	r0, #40	@ 0x28
 8001400:	f7ff ffb0 	bl	8001364 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8001404:	2180      	movs	r1, #128	@ 0x80
 8001406:	481a      	ldr	r0, [pc, #104]	@ (8001470 <DHT22_Start+0xd8>)
 8001408:	f001 fd74 	bl	8002ef4 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10b      	bne.n	800142a <DHT22_Start+0x92>
  {
    microDelay (80);
 8001412:	2050      	movs	r0, #80	@ 0x50
 8001414:	f7ff ffa6 	bl	8001364 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	4815      	ldr	r0, [pc, #84]	@ (8001470 <DHT22_Start+0xd8>)
 800141c:	f001 fd6a 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <DHT22_Start+0x92>
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 800142a:	f000 fee5 	bl	80021f8 <HAL_GetTick>
 800142e:	4603      	mov	r3, r0
 8001430:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <DHT22_Start+0xdc>)
 8001432:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001434:	f000 fee0 	bl	80021f8 <HAL_GetTick>
 8001438:	4603      	mov	r3, r0
 800143a:	4a0f      	ldr	r2, [pc, #60]	@ (8001478 <DHT22_Start+0xe0>)
 800143c:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800143e:	e004      	b.n	800144a <DHT22_Start+0xb2>
  {
    cMillis = HAL_GetTick();
 8001440:	f000 feda 	bl	80021f8 <HAL_GetTick>
 8001444:	4603      	mov	r3, r0
 8001446:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <DHT22_Start+0xe0>)
 8001448:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	4808      	ldr	r0, [pc, #32]	@ (8001470 <DHT22_Start+0xd8>)
 800144e:	f001 fd51 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <DHT22_Start+0xce>
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <DHT22_Start+0xdc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1c9a      	adds	r2, r3, #2
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <DHT22_Start+0xe0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d8ec      	bhi.n	8001440 <DHT22_Start+0xa8>
  }
  return Response;
 8001466:	7dfb      	ldrb	r3, [r7, #23]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40020400 	.word	0x40020400
 8001474:	2000036c 	.word	0x2000036c
 8001478:	20000370 	.word	0x20000370

0800147c <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001482:	2300      	movs	r3, #0
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	e063      	b.n	8001550 <DHT22_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8001488:	f000 feb6 	bl	80021f8 <HAL_GetTick>
 800148c:	4603      	mov	r3, r0
 800148e:	4a34      	ldr	r2, [pc, #208]	@ (8001560 <DHT22_Read+0xe4>)
 8001490:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001492:	f000 feb1 	bl	80021f8 <HAL_GetTick>
 8001496:	4603      	mov	r3, r0
 8001498:	4a32      	ldr	r2, [pc, #200]	@ (8001564 <DHT22_Read+0xe8>)
 800149a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800149c:	e004      	b.n	80014a8 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800149e:	f000 feab 	bl	80021f8 <HAL_GetTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001564 <DHT22_Read+0xe8>)
 80014a6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	482f      	ldr	r0, [pc, #188]	@ (8001568 <DHT22_Read+0xec>)
 80014ac:	f001 fd22 	bl	8002ef4 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <DHT22_Read+0x48>
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <DHT22_Read+0xe4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1c9a      	adds	r2, r3, #2
 80014bc:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <DHT22_Read+0xe8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8ec      	bhi.n	800149e <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80014c4:	2028      	movs	r0, #40	@ 0x28
 80014c6:	f7ff ff4d 	bl	8001364 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80014ca:	2180      	movs	r1, #128	@ 0x80
 80014cc:	4826      	ldr	r0, [pc, #152]	@ (8001568 <DHT22_Read+0xec>)
 80014ce:	f001 fd11 	bl	8002ef4 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10e      	bne.n	80014f6 <DHT22_Read+0x7a>
      b&= ~(1<<(7-a));
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2201      	movs	r2, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014ee:	4013      	ands	r3, r2
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	71bb      	strb	r3, [r7, #6]
 80014f4:	e00b      	b.n	800150e <DHT22_Read+0x92>
    else
      b|= (1<<(7-a));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f1c3 0307 	rsb	r3, r3, #7
 80014fc:	2201      	movs	r2, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	b25a      	sxtb	r2, r3
 8001504:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001508:	4313      	orrs	r3, r2
 800150a:	b25b      	sxtb	r3, r3
 800150c:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800150e:	f000 fe73 	bl	80021f8 <HAL_GetTick>
 8001512:	4603      	mov	r3, r0
 8001514:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <DHT22_Read+0xe4>)
 8001516:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001518:	f000 fe6e 	bl	80021f8 <HAL_GetTick>
 800151c:	4603      	mov	r3, r0
 800151e:	4a11      	ldr	r2, [pc, #68]	@ (8001564 <DHT22_Read+0xe8>)
 8001520:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001522:	e004      	b.n	800152e <DHT22_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001524:	f000 fe68 	bl	80021f8 <HAL_GetTick>
 8001528:	4603      	mov	r3, r0
 800152a:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <DHT22_Read+0xe8>)
 800152c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800152e:	2180      	movs	r1, #128	@ 0x80
 8001530:	480d      	ldr	r0, [pc, #52]	@ (8001568 <DHT22_Read+0xec>)
 8001532:	f001 fcdf 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <DHT22_Read+0xce>
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <DHT22_Read+0xe4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1c9a      	adds	r2, r3, #2
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <DHT22_Read+0xe8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d8ec      	bhi.n	8001524 <DHT22_Read+0xa8>
  for (a=0;a<8;a++)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	3301      	adds	r3, #1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b07      	cmp	r3, #7
 8001554:	d998      	bls.n	8001488 <DHT22_Read+0xc>
    }
  }
  return b;
 8001556:	79bb      	ldrb	r3, [r7, #6]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000036c 	.word	0x2000036c
 8001564:	20000370 	.word	0x20000370
 8001568:	40020400 	.word	0x40020400

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f000 fddc 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f9b2 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 fb3c 	bl	8001bf4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800157c:	f000 fabc 	bl	8001af8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001580:	f000 fa16 	bl	80019b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001584:	f000 fa66 	bl	8001a54 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001588:	f000 fae4 	bl	8001b54 <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 800158c:	48b2      	ldr	r0, [pc, #712]	@ (8001858 <main+0x2ec>)
 800158e:	f002 fe15 	bl	80041bc <HAL_TIM_Base_Start>

  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001592:	2002      	movs	r0, #2
 8001594:	f7ff fc80 	bl	8000e98 <HD44780_Init>
    HD44780_Clear();
 8001598:	f7ff fd02 	bl	8000fa0 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800159c:	2100      	movs	r1, #0
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fd14 	bl	8000fcc <HD44780_SetCursor>
    HD44780_PrintStr("SYSTEME D'ARROSAGE");
 80015a4:	48ad      	ldr	r0, [pc, #692]	@ (800185c <main+0x2f0>)
 80015a6:	f7ff fd82 	bl	80010ae <HD44780_PrintStr>
    HD44780_SetCursor(10,1);
 80015aa:	2101      	movs	r1, #1
 80015ac:	200a      	movs	r0, #10
 80015ae:	f7ff fd0d 	bl	8000fcc <HD44780_SetCursor>
    HD44780_PrintStr("24-25");
 80015b2:	48ab      	ldr	r0, [pc, #684]	@ (8001860 <main+0x2f4>)
 80015b4:	f7ff fd7b 	bl	80010ae <HD44780_PrintStr>
    HAL_Delay(2000);
 80015b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015bc:	f000 fe28 	bl	8002210 <HAL_Delay>
    HD44780_Clear();
 80015c0:	f7ff fcee 	bl	8000fa0 <HD44780_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(DHT22_Start())
 80015c4:	f7ff fee8 	bl	8001398 <DHT22_Start>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d07c      	beq.n	80016c8 <main+0x15c>
	 			  	      {
	 			  	        RH1 = DHT22_Read(); // First 8bits of humidity
 80015ce:	f7ff ff55 	bl	800147c <DHT22_Read>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001864 <main+0x2f8>)
 80015d8:	701a      	strb	r2, [r3, #0]
	 			  	        RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 80015da:	f7ff ff4f 	bl	800147c <DHT22_Read>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4ba1      	ldr	r3, [pc, #644]	@ (8001868 <main+0x2fc>)
 80015e4:	701a      	strb	r2, [r3, #0]
	 			  	        TC1 = DHT22_Read(); // First 8bits of Celsius
 80015e6:	f7ff ff49 	bl	800147c <DHT22_Read>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b9f      	ldr	r3, [pc, #636]	@ (800186c <main+0x300>)
 80015f0:	701a      	strb	r2, [r3, #0]
	 			  	        TC2 = DHT22_Read(); // Second 8bits of Celsius
 80015f2:	f7ff ff43 	bl	800147c <DHT22_Read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b9d      	ldr	r3, [pc, #628]	@ (8001870 <main+0x304>)
 80015fc:	701a      	strb	r2, [r3, #0]
	 			  	        SUM = DHT22_Read(); // Check sum
 80015fe:	f7ff ff3d 	bl	800147c <DHT22_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b9b      	ldr	r3, [pc, #620]	@ (8001874 <main+0x308>)
 8001608:	701a      	strb	r2, [r3, #0]
	 			  	        CHECK = RH1 + RH2 + TC1 + TC2;
 800160a:	4b96      	ldr	r3, [pc, #600]	@ (8001864 <main+0x2f8>)
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	4b96      	ldr	r3, [pc, #600]	@ (8001868 <main+0x2fc>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b95      	ldr	r3, [pc, #596]	@ (800186c <main+0x300>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b94      	ldr	r3, [pc, #592]	@ (8001870 <main+0x304>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b94      	ldr	r3, [pc, #592]	@ (8001878 <main+0x30c>)
 8001628:	701a      	strb	r2, [r3, #0]
	 			  	        if (CHECK == SUM)
 800162a:	4b93      	ldr	r3, [pc, #588]	@ (8001878 <main+0x30c>)
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	4b91      	ldr	r3, [pc, #580]	@ (8001874 <main+0x308>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d148      	bne.n	80016c8 <main+0x15c>
	 			  	        {
	 			  	          if (TC1>127) // If TC1=10000000, negative temperature
 8001636:	4b8d      	ldr	r3, [pc, #564]	@ (800186c <main+0x300>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	da0f      	bge.n	8001660 <main+0xf4>
	 			  	          {
	 			  	            tCelsius = (float)TC2/10*(-1);
 8001640:	4b8b      	ldr	r3, [pc, #556]	@ (8001870 <main+0x304>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001654:	eef1 7a67 	vneg.f32	s15, s15
 8001658:	4b88      	ldr	r3, [pc, #544]	@ (800187c <main+0x310>)
 800165a:	edc3 7a00 	vstr	s15, [r3]
 800165e:	e010      	b.n	8001682 <main+0x116>
	 			  	          }
	 			  	          else
	 			  	          {
	 			  	            tCelsius = (float)((TC1<<8)|TC2)/10;
 8001660:	4b82      	ldr	r3, [pc, #520]	@ (800186c <main+0x300>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	4a82      	ldr	r2, [pc, #520]	@ (8001870 <main+0x304>)
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001674:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	4b7f      	ldr	r3, [pc, #508]	@ (800187c <main+0x310>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
	 			  	          }
	 			  	          tFahrenheit = tCelsius * 9/5 + 32;
 8001682:	4b7e      	ldr	r3, [pc, #504]	@ (800187c <main+0x310>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800168c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001690:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001698:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001880 <main+0x314>
 800169c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a0:	4b78      	ldr	r3, [pc, #480]	@ (8001884 <main+0x318>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]
	 			  	          RH = (float) ((RH1<<8)|RH2)/10;
 80016a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <main+0x2f8>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001868 <main+0x2fc>)
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ba:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c2:	4b71      	ldr	r3, [pc, #452]	@ (8001888 <main+0x31c>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
	 			  	        }
	 			  	      }
		// Affichage de la température sur l'afficheur
		 			HD44780_SetCursor(0, 0);
 80016c8:	2100      	movs	r1, #0
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fc7e 	bl	8000fcc <HD44780_SetCursor>
		 			sprintf(buffer, "Temp=%.2f", tCelsius);  // Convertir le float en string avec 2 décimales
 80016d0:	4b6a      	ldr	r3, [pc, #424]	@ (800187c <main+0x310>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff37 	bl	8000548 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	496b      	ldr	r1, [pc, #428]	@ (800188c <main+0x320>)
 80016e0:	486b      	ldr	r0, [pc, #428]	@ (8001890 <main+0x324>)
 80016e2:	f003 fd77 	bl	80051d4 <siprintf>
		 			HD44780_PrintStr(buffer);  // Afficher la chaîne
 80016e6:	486a      	ldr	r0, [pc, #424]	@ (8001890 <main+0x324>)
 80016e8:	f7ff fce1 	bl	80010ae <HD44780_PrintStr>

		 			 			  	// Affichage de l'humidité sur l'afficheur
		 			 HD44780_SetCursor(0, 1);   // Passer à la ligne suivante sur l'afficheur
 80016ec:	2101      	movs	r1, #1
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fc6c 	bl	8000fcc <HD44780_SetCursor>
		 			 sprintf(buffer, "Humidity=%.2f", RH);    // Convertir le float en string avec 2 décimales
 80016f4:	4b64      	ldr	r3, [pc, #400]	@ (8001888 <main+0x31c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff25 	bl	8000548 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4964      	ldr	r1, [pc, #400]	@ (8001894 <main+0x328>)
 8001704:	4862      	ldr	r0, [pc, #392]	@ (8001890 <main+0x324>)
 8001706:	f003 fd65 	bl	80051d4 <siprintf>
		 			 HD44780_PrintStr(buffer);  // Afficher la chaîne
 800170a:	4861      	ldr	r0, [pc, #388]	@ (8001890 <main+0x324>)
 800170c:	f7ff fccf 	bl	80010ae <HD44780_PrintStr>
	 			  	 HAL_Delay(1000);
 8001710:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001714:	f000 fd7c 	bl	8002210 <HAL_Delay>


	 			  	     // HAL_Delay(2000);
	 			      /* USER CODE END WHILE */
	 			  	     // Lire la valeur analogique du capteur de pluie
	 			  	      rain_adc_value = Read_Rain_Sensor();  // Appeler la fonction pour le capteur de pluie
 8001718:	f7ff fdb8 	bl	800128c <Read_Rain_Sensor>
 800171c:	4603      	mov	r3, r0
 800171e:	4a5e      	ldr	r2, [pc, #376]	@ (8001898 <main+0x32c>)
 8001720:	6013      	str	r3, [r2, #0]

	 			  	      // Lire la valeur analogique du capteur de sol
	 			  	      soil_adc_value = Read_Soil_Moisture_Sensor();  // Appeler la fonction pour le capteur de sol
 8001722:	f7ff fde3 	bl	80012ec <Read_Soil_Moisture_Sensor>
 8001726:	4603      	mov	r3, r0
 8001728:	4a5c      	ldr	r2, [pc, #368]	@ (800189c <main+0x330>)
 800172a:	6013      	str	r3, [r2, #0]

	 			  	      // Lire la sortie numérique (D0) pour la détection de pluie
	 			  	      rain_detected = Read_Rain_Digital();
 800172c:	f7ff fe0e 	bl	800134c <Read_Rain_Digital>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b5a      	ldr	r3, [pc, #360]	@ (80018a0 <main+0x334>)
 8001736:	701a      	strb	r2, [r3, #0]

	 			  	      // Déterminer l'état de pluie
	 			  	      if (rain_detected == GPIO_PIN_RESET) {
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <main+0x334>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d103      	bne.n	8001748 <main+0x1dc>
	 			  	          rain_status = "Il pleut";  // Niveau bas, il pleut
 8001740:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <main+0x338>)
 8001742:	4a59      	ldr	r2, [pc, #356]	@ (80018a8 <main+0x33c>)
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e002      	b.n	800174e <main+0x1e2>
	 			  	      } else {
	 			  	          rain_status = "Pas de pluie";  // Niveau haut, pas de pluie
 8001748:	4b56      	ldr	r3, [pc, #344]	@ (80018a4 <main+0x338>)
 800174a:	4a58      	ldr	r2, [pc, #352]	@ (80018ac <main+0x340>)
 800174c:	601a      	str	r2, [r3, #0]
	 			  	      }


	 			  	    // Calculer les pourcentages d'humidité du sol et de pluie
	 			  	    soil_humidity_percentage = (float)(soil_adc_value * 100) / 4095;
 800174e:	4b53      	ldr	r3, [pc, #332]	@ (800189c <main+0x330>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2264      	movs	r2, #100	@ 0x64
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001760:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80018b0 <main+0x344>
 8001764:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001768:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <main+0x348>)
 800176a:	edc3 7a00 	vstr	s15, [r3]
	 			  	    rain_humidity_percentage = (float)(rain_adc_value * 100) / 4095;
 800176e:	4b4a      	ldr	r3, [pc, #296]	@ (8001898 <main+0x32c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2264      	movs	r2, #100	@ 0x64
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001780:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80018b0 <main+0x344>
 8001784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <main+0x34c>)
 800178a:	edc3 7a00 	vstr	s15, [r3]



	 			  	  // Logic to control the pump
	 			  	  if ((soil_humidity_percentage < SOIL_HUMIDITY_THRESHOLD) && (rain_humidity_percentage > RAIN_HUMIDITY_THRESHOLD)) {
 800178e:	4b49      	ldr	r3, [pc, #292]	@ (80018b4 <main+0x348>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80018bc <main+0x350>
 8001798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d512      	bpl.n	80017c8 <main+0x25c>
 80017a2:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <main+0x34c>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80018c0 <main+0x354>
 80017ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	dd08      	ble.n	80017c8 <main+0x25c>
	 			  	      // Si le sol est sec et qu'il pleut, activer la pompe
	 			  	      HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	2120      	movs	r1, #32
 80017ba:	4842      	ldr	r0, [pc, #264]	@ (80018c4 <main+0x358>)
 80017bc:	f001 fbb2 	bl	8002f24 <HAL_GPIO_WritePin>
	 			  	      pompe_status = "Pompe  ne Fonctionne pas (sol Humide et  pas de pluie)";
 80017c0:	4b41      	ldr	r3, [pc, #260]	@ (80018c8 <main+0x35c>)
 80017c2:	4a42      	ldr	r2, [pc, #264]	@ (80018cc <main+0x360>)
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e041      	b.n	800184c <main+0x2e0>
	 			  	  } else if ((soil_humidity_percentage > SOIL_HUMIDITY_THRESHOLD) && (rain_humidity_percentage < RAIN_HUMIDITY_THRESHOLD)) {
 80017c8:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <main+0x348>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80018bc <main+0x350>
 80017d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	dd12      	ble.n	8001802 <main+0x296>
 80017dc:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <main+0x34c>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80018c0 <main+0x354>
 80017e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	d508      	bpl.n	8001802 <main+0x296>
	 			  	      // Si le sol est humide et qu'il ne pleut pas, activer la pompe
	 			  	      HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2120      	movs	r1, #32
 80017f4:	4833      	ldr	r0, [pc, #204]	@ (80018c4 <main+0x358>)
 80017f6:	f001 fb95 	bl	8002f24 <HAL_GPIO_WritePin>
	 			  	      pompe_status = "Pompe ne Fonctionne pas (sol sec et pluie)";
 80017fa:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <main+0x35c>)
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <main+0x364>)
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e024      	b.n	800184c <main+0x2e0>
	 			  	  } else if ((soil_humidity_percentage > SOIL_HUMIDITY_THRESHOLD) && (rain_humidity_percentage > RAIN_HUMIDITY_THRESHOLD)) {
 8001802:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <main+0x348>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80018bc <main+0x350>
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	dd12      	ble.n	800183c <main+0x2d0>
 8001816:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <main+0x34c>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80018c0 <main+0x354>
 8001820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	dd08      	ble.n	800183c <main+0x2d0>
	 			  	      // Si le sol est humide et qu'il pleut, désactiver la pompe
	 			  	      HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2120      	movs	r1, #32
 800182e:	4825      	ldr	r0, [pc, #148]	@ (80018c4 <main+0x358>)
 8001830:	f001 fb78 	bl	8002f24 <HAL_GPIO_WritePin>
	 			  	      pompe_status = "Pompe Fonctionne (sol sec et pluie)";
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <main+0x35c>)
 8001836:	4a27      	ldr	r2, [pc, #156]	@ (80018d4 <main+0x368>)
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e007      	b.n	800184c <main+0x2e0>
	 			  	  } else {
	 			  	      // Désactiver la pompe dans tous les autres cas
	 			  	      HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2120      	movs	r1, #32
 8001840:	4820      	ldr	r0, [pc, #128]	@ (80018c4 <main+0x358>)
 8001842:	f001 fb6f 	bl	8002f24 <HAL_GPIO_WritePin>
	 			  	      pompe_status = "Pompe Ne Fonctionne Pas";
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <main+0x35c>)
 8001848:	4a23      	ldr	r2, [pc, #140]	@ (80018d8 <main+0x36c>)
 800184a:	601a      	str	r2, [r3, #0]
	 			  	  }



	 			  	    HAL_Delay(1000);
 800184c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001850:	f000 fcde 	bl	8002210 <HAL_Delay>
	  if(DHT22_Start())
 8001854:	e6b6      	b.n	80015c4 <main+0x58>
 8001856:	bf00      	nop
 8001858:	2000031c 	.word	0x2000031c
 800185c:	08007458 	.word	0x08007458
 8001860:	0800746c 	.word	0x0800746c
 8001864:	20000364 	.word	0x20000364
 8001868:	20000365 	.word	0x20000365
 800186c:	20000366 	.word	0x20000366
 8001870:	20000367 	.word	0x20000367
 8001874:	20000368 	.word	0x20000368
 8001878:	20000369 	.word	0x20000369
 800187c:	20000374 	.word	0x20000374
 8001880:	42000000 	.word	0x42000000
 8001884:	20000378 	.word	0x20000378
 8001888:	2000037c 	.word	0x2000037c
 800188c:	08007474 	.word	0x08007474
 8001890:	20000208 	.word	0x20000208
 8001894:	08007480 	.word	0x08007480
 8001898:	2000021c 	.word	0x2000021c
 800189c:	20000220 	.word	0x20000220
 80018a0:	20000224 	.word	0x20000224
 80018a4:	20000228 	.word	0x20000228
 80018a8:	08007490 	.word	0x08007490
 80018ac:	0800749c 	.word	0x0800749c
 80018b0:	457ff000 	.word	0x457ff000
 80018b4:	2000022c 	.word	0x2000022c
 80018b8:	20000230 	.word	0x20000230
 80018bc:	42500000 	.word	0x42500000
 80018c0:	42580000 	.word	0x42580000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	20000234 	.word	0x20000234
 80018cc:	080074ac 	.word	0x080074ac
 80018d0:	080074e4 	.word	0x080074e4
 80018d4:	08007510 	.word	0x08007510
 80018d8:	08007534 	.word	0x08007534

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b094      	sub	sp, #80	@ 0x50
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2230      	movs	r2, #48	@ 0x30
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fcd5 	bl	800529a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <SystemClock_Config+0xcc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <SystemClock_Config+0xcc>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <SystemClock_Config+0xcc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <SystemClock_Config+0xd0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <SystemClock_Config+0xd0>)
 8001926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <SystemClock_Config+0xd0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193c:	2301      	movs	r3, #1
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001940:	2310      	movs	r3, #16
 8001942:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001944:	2302      	movs	r3, #2
 8001946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800194c:	2308      	movs	r3, #8
 800194e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001950:	23a8      	movs	r3, #168	@ 0xa8
 8001952:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001954:	2302      	movs	r3, #2
 8001956:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001958:	2304      	movs	r3, #4
 800195a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	4618      	mov	r0, r3
 8001962:	f001 ff97 	bl	8003894 <HAL_RCC_OscConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800196c:	f000 f9a0 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
 8001972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800197c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2105      	movs	r1, #5
 800198e:	4618      	mov	r0, r3
 8001990:	f002 f9f8 	bl	8003d84 <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800199a:	f000 f989 	bl	8001cb0 <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3750      	adds	r7, #80	@ 0x50
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000

080019b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019c2:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019c4:	4a21      	ldr	r2, [pc, #132]	@ (8001a4c <MX_ADC1_Init+0x9c>)
 80019c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019de:	2204      	movs	r2, #4
 80019e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019f2:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <MX_ADC1_Init+0xa0>)
 80019f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_ADC1_Init+0x98>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_ADC1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_ADC1_Init+0x98>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a10:	480d      	ldr	r0, [pc, #52]	@ (8001a48 <MX_ADC1_Init+0x98>)
 8001a12:	f000 fc21 	bl	8002258 <HAL_ADC_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a1c:	f000 f948 	bl	8001cb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_ADC1_Init+0x98>)
 8001a32:	f000 fdbf 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a3c:	f000 f938 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000238 	.word	0x20000238
 8001a4c:	40012000 	.word	0x40012000
 8001a50:	0f000001 	.word	0x0f000001

08001a54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a68:	4a21      	ldr	r2, [pc, #132]	@ (8001af0 <MX_ADC2_Init+0x9c>)
 8001a6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a82:	2204      	movs	r2, #4
 8001a84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a96:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <MX_ADC2_Init+0xa0>)
 8001a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001ab6:	f000 fbcf 	bl	8002258 <HAL_ADC_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001ac0:	f000 f8f6 	bl	8001cb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	@ (8001aec <MX_ADC2_Init+0x98>)
 8001ad6:	f000 fd6d 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001ae0:	f000 f8e6 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000280 	.word	0x20000280
 8001af0:	40012100 	.word	0x40012100
 8001af4:	0f000001 	.word	0x0f000001

08001af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001afe:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <MX_I2C1_Init+0x54>)
 8001b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b04:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <MX_I2C1_Init+0x58>)
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b36:	f001 fa0f 	bl	8002f58 <HAL_I2C_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b40:	f000 f8b6 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200002c8 	.word	0x200002c8
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	000186a0 	.word	0x000186a0

08001b54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b72:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf0 <MX_TIM1_Init+0x9c>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b78:	22a7      	movs	r2, #167	@ 0xa7
 8001b7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b9c:	4813      	ldr	r0, [pc, #76]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001b9e:	f002 fabd 	bl	800411c <HAL_TIM_Base_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ba8:	f000 f882 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480c      	ldr	r0, [pc, #48]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001bba:	f002 fb67 	bl	800428c <HAL_TIM_ConfigClockSource>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bc4:	f000 f874 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_TIM1_Init+0x98>)
 8001bd6:	f002 fd67 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001be0:	f000 f866 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000031c 	.word	0x2000031c
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a24      	ldr	r2, [pc, #144]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	21a0      	movs	r1, #160	@ 0xa0
 8001c62:	4811      	ldr	r0, [pc, #68]	@ (8001ca8 <MX_GPIO_Init+0xb4>)
 8001c64:	f001 f95e 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480c      	ldr	r0, [pc, #48]	@ (8001cac <MX_GPIO_Init+0xb8>)
 8001c7c:	f000 ff9e 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c80:	23a0      	movs	r3, #160	@ 0xa0
 8001c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <MX_GPIO_Init+0xb4>)
 8001c98:	f000 ff90 	bl	8002bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020000 	.word	0x40020000

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a0f      	ldr	r2, [pc, #60]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	@ 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2e      	ldr	r2, [pc, #184]	@ (8001de4 <HAL_ADC_MspInit+0xd8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d128      	bne.n	8001d80 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	4a2c      	ldr	r2, [pc, #176]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a25      	ldr	r2, [pc, #148]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	481c      	ldr	r0, [pc, #112]	@ (8001dec <HAL_ADC_MspInit+0xe0>)
 8001d7a:	f000 ff1f 	bl	8002bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d7e:	e02c      	b.n	8001dda <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <HAL_ADC_MspInit+0xe4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d127      	bne.n	8001dda <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a0e      	ldr	r2, [pc, #56]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	@ (8001dec <HAL_ADC_MspInit+0xe0>)
 8001dd6:	f000 fef1 	bl	8002bbc <HAL_GPIO_Init>
}
 8001dda:	bf00      	nop
 8001ddc:	3730      	adds	r7, #48	@ 0x30
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40012000 	.word	0x40012000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40012100 	.word	0x40012100

08001df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <HAL_I2C_MspInit+0x84>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12c      	bne.n	8001e70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e44:	2304      	movs	r3, #4
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480c      	ldr	r0, [pc, #48]	@ (8001e80 <HAL_I2C_MspInit+0x8c>)
 8001e50:	f000 feb4 	bl	8002bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	4a07      	ldr	r2, [pc, #28]	@ (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	@ 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020400 	.word	0x40020400

08001e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x3c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10d      	bne.n	8001eb2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x40>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x40>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x40>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <NMI_Handler+0x4>

08001ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <MemManage_Handler+0x4>

08001ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <UsageFault_Handler+0x4>

08001ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1e:	f000 f957 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  return 1;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_kill>:

int _kill(int pid, int sig)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f40:	f003 f9fe 	bl	8005340 <__errno>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2216      	movs	r2, #22
 8001f48:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_exit>:

void _exit (int status)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffe7 	bl	8001f36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <_exit+0x12>

08001f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f7e:	f3af 8000 	nop.w
 8001f82:	4601      	mov	r1, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf0      	blt.n	8001f7e <_read+0x12>
  }

  return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e009      	b.n	8001fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf1      	blt.n	8001fb8 <_write+0x12>
  }
  return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_close>:

int _close(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002006:	605a      	str	r2, [r3, #4]
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_isatty>:

int _isatty(int file)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f003 f962 	bl	8005340 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20020000 	.word	0x20020000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	20000380 	.word	0x20000380
 80020b0:	200004d8 	.word	0x200004d8

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	@ (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002110 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020dc:	f7ff ffea 	bl	80020b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e0:	480c      	ldr	r0, [pc, #48]	@ (8002114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e2:	490d      	ldr	r1, [pc, #52]	@ (8002118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002106:	f003 f921 	bl	800534c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7ff fa2f 	bl	800156c <main>
  bx  lr    
 800210e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800211c:	080078e8 	.word	0x080078e8
  ldr r2, =_sbss
 8002120:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002124:	200004d4 	.word	0x200004d4

08002128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <HAL_Init+0x40>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <HAL_Init+0x40>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <HAL_Init+0x40>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 fcfd 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	200f      	movs	r0, #15
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fdac 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fd07 	bl	8002ba2 <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 fcdd 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000010 	.word	0x20000010
 80021c8:	20000018 	.word	0x20000018
 80021cc:	20000014 	.word	0x20000014

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000018 	.word	0x20000018
 80021f4:	20000384 	.word	0x20000384

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000384 	.word	0x20000384

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000018 	.word	0x20000018

08002258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e033      	b.n	80022d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fd48 	bl	8001d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800229e:	f023 0302 	bic.w	r3, r3, #2
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 faa4 	bl	80027f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80022c6:	e001      	b.n	80022cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Start+0x1a>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0b2      	b.n	8002460 <HAL_ADC_Start+0x180>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d018      	beq.n	8002342 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002320:	4b52      	ldr	r3, [pc, #328]	@ (800246c <HAL_ADC_Start+0x18c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a52      	ldr	r2, [pc, #328]	@ (8002470 <HAL_ADC_Start+0x190>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0c9a      	lsrs	r2, r3, #18
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002334:	e002      	b.n	800233c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3b01      	subs	r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f9      	bne.n	8002336 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d17a      	bne.n	8002446 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800237a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800238e:	d106      	bne.n	800239e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002394:	f023 0206 	bic.w	r2, r3, #6
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	645a      	str	r2, [r3, #68]	@ 0x44
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ac:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <HAL_ADC_Start+0x194>)
 80023ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d12a      	bne.n	800241c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002478 <HAL_ADC_Start+0x198>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d015      	beq.n	80023fc <HAL_ADC_Start+0x11c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a29      	ldr	r2, [pc, #164]	@ (800247c <HAL_ADC_Start+0x19c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_Start+0x106>
 80023da:	4b26      	ldr	r3, [pc, #152]	@ (8002474 <HAL_ADC_Start+0x194>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a25      	ldr	r2, [pc, #148]	@ (8002480 <HAL_ADC_Start+0x1a0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d136      	bne.n	800245e <HAL_ADC_Start+0x17e>
 80023f0:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_ADC_Start+0x194>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d130      	bne.n	800245e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d129      	bne.n	800245e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	e020      	b.n	800245e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a15      	ldr	r2, [pc, #84]	@ (8002478 <HAL_ADC_Start+0x198>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d11b      	bne.n	800245e <HAL_ADC_Start+0x17e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	e00b      	b.n	800245e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	20000010 	.word	0x20000010
 8002470:	431bde83 	.word	0x431bde83
 8002474:	40012300 	.word	0x40012300
 8002478:	40012000 	.word	0x40012000
 800247c:	40012100 	.word	0x40012100
 8002480:	40012200 	.word	0x40012200

08002484 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a0:	d113      	bne.n	80024ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b0:	d10b      	bne.n	80024ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f043 0220 	orr.w	r2, r3, #32
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e063      	b.n	8002592 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ca:	f7ff fe95 	bl	80021f8 <HAL_GetTick>
 80024ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024d0:	e021      	b.n	8002516 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d01d      	beq.n	8002516 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_ADC_PollForConversion+0x6c>
 80024e0:	f7ff fe8a 	bl	80021f8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d212      	bcs.n	8002516 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d00b      	beq.n	8002516 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	f043 0204 	orr.w	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e03d      	b.n	8002592 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d1d6      	bne.n	80024d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0212 	mvn.w	r2, #18
 800252c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d123      	bne.n	8002590 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11f      	bne.n	8002590 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1c>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e105      	b.n	80027dc <HAL_ADC_ConfigChannel+0x228>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b09      	cmp	r3, #9
 80025de:	d925      	bls.n	800262c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68d9      	ldr	r1, [r3, #12]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	3b1e      	subs	r3, #30
 80025f6:	2207      	movs	r2, #7
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43da      	mvns	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	400a      	ands	r2, r1
 8002604:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68d9      	ldr	r1, [r3, #12]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	4603      	mov	r3, r0
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4403      	add	r3, r0
 800261e:	3b1e      	subs	r3, #30
 8002620:	409a      	lsls	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	e022      	b.n	8002672 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6919      	ldr	r1, [r3, #16]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	2207      	movs	r2, #7
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	400a      	ands	r2, r1
 800264e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6919      	ldr	r1, [r3, #16]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	4603      	mov	r3, r0
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4403      	add	r3, r0
 8002668:	409a      	lsls	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d824      	bhi.n	80026c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3b05      	subs	r3, #5
 800268c:	221f      	movs	r2, #31
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	400a      	ands	r2, r1
 800269a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b05      	subs	r3, #5
 80026b6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80026c2:	e04c      	b.n	800275e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	d824      	bhi.n	8002716 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b23      	subs	r3, #35	@ 0x23
 80026de:	221f      	movs	r2, #31
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43da      	mvns	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	400a      	ands	r2, r1
 80026ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b23      	subs	r3, #35	@ 0x23
 8002708:	fa00 f203 	lsl.w	r2, r0, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
 8002714:	e023      	b.n	800275e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b41      	subs	r3, #65	@ 0x41
 8002728:	221f      	movs	r2, #31
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	400a      	ands	r2, r1
 8002736:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3b41      	subs	r3, #65	@ 0x41
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800275e:	4b22      	ldr	r3, [pc, #136]	@ (80027e8 <HAL_ADC_ConfigChannel+0x234>)
 8002760:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a21      	ldr	r2, [pc, #132]	@ (80027ec <HAL_ADC_ConfigChannel+0x238>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d109      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1cc>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b12      	cmp	r3, #18
 8002772:	d105      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <HAL_ADC_ConfigChannel+0x238>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d123      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x21e>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d003      	beq.n	800279a <HAL_ADC_ConfigChannel+0x1e6>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b11      	cmp	r3, #17
 8002798:	d11b      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d111      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ae:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <HAL_ADC_ConfigChannel+0x23c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a10      	ldr	r2, [pc, #64]	@ (80027f4 <HAL_ADC_ConfigChannel+0x240>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	0c9a      	lsrs	r2, r3, #18
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027c4:	e002      	b.n	80027cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f9      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40012300 	.word	0x40012300
 80027ec:	40012000 	.word	0x40012000
 80027f0:	20000010 	.word	0x20000010
 80027f4:	431bde83 	.word	0x431bde83

080027f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002800:	4b79      	ldr	r3, [pc, #484]	@ (80029e8 <ADC_Init+0x1f0>)
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800282c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	4a58      	ldr	r2, [pc, #352]	@ (80029ec <ADC_Init+0x1f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800289e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e00f      	b.n	80028f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0202 	bic.w	r2, r2, #2
 8002904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7e1b      	ldrb	r3, [r3, #24]
 8002910:	005a      	lsls	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002932:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002942:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	3b01      	subs	r3, #1
 8002950:	035a      	lsls	r2, r3, #13
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e007      	b.n	800296c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800296a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800297a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	3b01      	subs	r3, #1
 8002988:	051a      	lsls	r2, r3, #20
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029ae:	025a      	lsls	r2, r3, #9
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	029a      	lsls	r2, r3, #10
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012300 	.word	0x40012300
 80029ec:	0f000001 	.word	0x0f000001

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff47 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff5c 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff8e 	bl	8002aa8 <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5d 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ffb0 	bl	8002b10 <SysTick_Config>
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e16b      	b.n	8002eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	f040 815a 	bne.w	8002eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d005      	beq.n	8002c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d130      	bne.n	8002c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	2201      	movs	r2, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0201 	and.w	r2, r3, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d017      	beq.n	8002cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d123      	bne.n	8002d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80b4 	beq.w	8002eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b60      	ldr	r3, [pc, #384]	@ (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d52:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ecc <HAL_GPIO_Init+0x310>)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	@ (8002ed0 <HAL_GPIO_Init+0x314>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02b      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a51      	ldr	r2, [pc, #324]	@ (8002ed4 <HAL_GPIO_Init+0x318>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d025      	beq.n	8002dde <HAL_GPIO_Init+0x222>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a50      	ldr	r2, [pc, #320]	@ (8002ed8 <HAL_GPIO_Init+0x31c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <HAL_GPIO_Init+0x21e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002edc <HAL_GPIO_Init+0x320>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d019      	beq.n	8002dd6 <HAL_GPIO_Init+0x21a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <HAL_GPIO_Init+0x324>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0x216>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee4 <HAL_GPIO_Init+0x328>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00d      	beq.n	8002dce <HAL_GPIO_Init+0x212>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee8 <HAL_GPIO_Init+0x32c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <HAL_GPIO_Init+0x20e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <HAL_GPIO_Init+0x330>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_GPIO_Init+0x20a>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e00e      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	e00c      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00a      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e008      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e004      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002de2:	2300      	movs	r3, #0
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f002 0203 	and.w	r2, r2, #3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4093      	lsls	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df4:	4935      	ldr	r1, [pc, #212]	@ (8002ecc <HAL_GPIO_Init+0x310>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e26:	4a32      	ldr	r2, [pc, #200]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e50:	4a27      	ldr	r2, [pc, #156]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e56:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea4:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	f67f ae90 	bls.w	8002bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	@ 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021400 	.word	0x40021400
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40021c00 	.word	0x40021c00
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e001      	b.n	8002f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f40:	e003      	b.n	8002f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	041a      	lsls	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e12b      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe ff38 	bl	8001df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	@ 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f001 f89a 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a81      	ldr	r2, [pc, #516]	@ (80031cc <HAL_I2C_Init+0x274>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d807      	bhi.n	8002fdc <HAL_I2C_Init+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a80      	ldr	r2, [pc, #512]	@ (80031d0 <HAL_I2C_Init+0x278>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e006      	b.n	8002fea <HAL_I2C_Init+0x92>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a7d      	ldr	r2, [pc, #500]	@ (80031d4 <HAL_I2C_Init+0x27c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0e7      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a78      	ldr	r2, [pc, #480]	@ (80031d8 <HAL_I2C_Init+0x280>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a6a      	ldr	r2, [pc, #424]	@ (80031cc <HAL_I2C_Init+0x274>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d802      	bhi.n	800302c <HAL_I2C_Init+0xd4>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	e009      	b.n	8003040 <HAL_I2C_Init+0xe8>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	4a69      	ldr	r2, [pc, #420]	@ (80031dc <HAL_I2C_Init+0x284>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	3301      	adds	r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003052:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	495c      	ldr	r1, [pc, #368]	@ (80031cc <HAL_I2C_Init+0x274>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d819      	bhi.n	8003094 <HAL_I2C_Init+0x13c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e59      	subs	r1, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fbb1 f3f3 	udiv	r3, r1, r3
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003074:	400b      	ands	r3, r1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_I2C_Init+0x138>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e59      	subs	r1, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fbb1 f3f3 	udiv	r3, r1, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	e051      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003090:	2304      	movs	r3, #4
 8003092:	e04f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <HAL_I2C_Init+0x168>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e012      	b.n	80030e6 <HAL_I2C_Init+0x18e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Init+0x196>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e022      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10e      	bne.n	8003114 <HAL_I2C_Init+0x1bc>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e58      	subs	r0, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	fbb0 f3f3 	udiv	r3, r0, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003112:	e00f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	6809      	ldr	r1, [r1, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003162:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6911      	ldr	r1, [r2, #16]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	4311      	orrs	r1, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	000186a0 	.word	0x000186a0
 80031d0:	001e847f 	.word	0x001e847f
 80031d4:	003d08ff 	.word	0x003d08ff
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	10624dd3 	.word	0x10624dd3

080031e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	461a      	mov	r2, r3
 80031ec:	460b      	mov	r3, r1
 80031ee:	817b      	strh	r3, [r7, #10]
 80031f0:	4613      	mov	r3, r2
 80031f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7ff f800 	bl	80021f8 <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 80e0 	bne.w	80033c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2319      	movs	r3, #25
 800320e:	2201      	movs	r2, #1
 8003210:	4970      	ldr	r1, [pc, #448]	@ (80033d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f964 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
 8003220:	e0d3      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_I2C_Master_Transmit+0x50>
 800322c:	2302      	movs	r3, #2
 800322e:	e0cc      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d007      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2221      	movs	r2, #33	@ 0x21
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2210      	movs	r2, #16
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a50      	ldr	r2, [pc, #320]	@ (80033d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003298:	8979      	ldrh	r1, [r7, #10]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f89c 	bl	80033dc <I2C_MasterRequestWrite>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e08d      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032c4:	e066      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa22 	bl	8003714 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06b      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d11b      	bne.n	8003368 <HAL_I2C_Master_Transmit+0x188>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	6a39      	ldr	r1, [r7, #32]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fa19 	bl	80037a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800338e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e01a      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d194      	bne.n	80032c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	00100002 	.word	0x00100002
 80033d8:	ffff0000 	.word	0xffff0000

080033dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	460b      	mov	r3, r1
 80033ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d006      	beq.n	8003406 <I2C_MasterRequestWrite+0x2a>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d003      	beq.n	8003406 <I2C_MasterRequestWrite+0x2a>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003404:	d108      	bne.n	8003418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e00b      	b.n	8003430 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341c:	2b12      	cmp	r3, #18
 800341e:	d107      	bne.n	8003430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800342e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f84f 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003456:	d103      	bne.n	8003460 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e035      	b.n	80034d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800346c:	d108      	bne.n	8003480 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800347c:	611a      	str	r2, [r3, #16]
 800347e:	e01b      	b.n	80034b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003480:	897b      	ldrh	r3, [r7, #10]
 8003482:	11db      	asrs	r3, r3, #7
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 0306 	and.w	r3, r3, #6
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f063 030f 	orn	r3, r3, #15
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	490e      	ldr	r1, [pc, #56]	@ (80034d8 <I2C_MasterRequestWrite+0xfc>)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f898 	bl	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e010      	b.n	80034d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4907      	ldr	r1, [pc, #28]	@ (80034dc <I2C_MasterRequestWrite+0x100>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f888 	bl	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	00010008 	.word	0x00010008
 80034dc:	00010002 	.word	0x00010002

080034e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f0:	e048      	b.n	8003584 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d044      	beq.n	8003584 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7fe fe7d 	bl	80021f8 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d139      	bne.n	8003584 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d10d      	bne.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x56>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	43da      	mvns	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	e00c      	b.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	43da      	mvns	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	429a      	cmp	r2, r3
 8003554:	d116      	bne.n	8003584 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e023      	b.n	80035cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d10d      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	43da      	mvns	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	e00c      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	43da      	mvns	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d093      	beq.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e2:	e071      	b.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f2:	d123      	bne.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800360c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e067      	b.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d041      	beq.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003644:	f7fe fdd8 	bl	80021f8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d302      	bcc.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d136      	bne.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10c      	bne.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e00b      	b.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	43da      	mvns	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4013      	ands	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e021      	b.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10c      	bne.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	43da      	mvns	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e00b      	b.n	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf14      	ite	ne
 80036fe:	2301      	movne	r3, #1
 8003700:	2300      	moveq	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	f47f af6d 	bne.w	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003720:	e034      	b.n	800378c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f886 	bl	8003834 <I2C_IsAcknowledgeFailed>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e034      	b.n	800379c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d028      	beq.n	800378c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373a:	f7fe fd5d 	bl	80021f8 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11d      	bne.n	800378c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b80      	cmp	r3, #128	@ 0x80
 800375c:	d016      	beq.n	800378c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e007      	b.n	800379c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003796:	2b80      	cmp	r3, #128	@ 0x80
 8003798:	d1c3      	bne.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037b0:	e034      	b.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f83e 	bl	8003834 <I2C_IsAcknowledgeFailed>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e034      	b.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d028      	beq.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fe fd15 	bl	80021f8 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11d      	bne.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d016      	beq.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e007      	b.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b04      	cmp	r3, #4
 8003828:	d1c3      	bne.n	80037b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384a:	d11b      	bne.n	8003884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e267      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d075      	beq.n	800399e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038b2:	4b88      	ldr	r3, [pc, #544]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b85      	ldr	r3, [pc, #532]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d112      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4b82      	ldr	r3, [pc, #520]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d6:	d10b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05b      	beq.n	800399c <HAL_RCC_OscConfig+0x108>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d157      	bne.n	800399c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e242      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x74>
 80038fa:	4b76      	ldr	r3, [pc, #472]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a75      	ldr	r2, [pc, #468]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e01d      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x98>
 8003912:	4b70      	ldr	r3, [pc, #448]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6f      	ldr	r2, [pc, #444]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6c      	ldr	r2, [pc, #432]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 800392c:	4b69      	ldr	r3, [pc, #420]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a68      	ldr	r2, [pc, #416]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b66      	ldr	r3, [pc, #408]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a65      	ldr	r2, [pc, #404]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fe fc54 	bl	80021f8 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fe fc50 	bl	80021f8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	@ 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e207      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0xc0>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fc40 	bl	80021f8 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe fc3c 	bl	80021f8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	@ 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1f3      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	4b51      	ldr	r3, [pc, #324]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0xe8>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039aa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b47      	ldr	r3, [pc, #284]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d11c      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b44      	ldr	r3, [pc, #272]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	4b41      	ldr	r3, [pc, #260]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e1c7      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4937      	ldr	r1, [pc, #220]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	e03a      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a04:	4b34      	ldr	r3, [pc, #208]	@ (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fbf5 	bl	80021f8 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fe fbf1 	bl	80021f8 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1a8      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b28      	ldr	r3, [pc, #160]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4925      	ldr	r1, [pc, #148]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a46:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fbd4 	bl	80021f8 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fbd0 	bl	80021f8 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e187      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d036      	beq.n	8003aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a86:	4b15      	ldr	r3, [pc, #84]	@ (8003adc <HAL_RCC_OscConfig+0x248>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fbb4 	bl	80021f8 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fe fbb0 	bl	80021f8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e167      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x200>
 8003ab2:	e01b      	b.n	8003aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <HAL_RCC_OscConfig+0x248>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fb9d 	bl	80021f8 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	e00e      	b.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fe fb99 	bl	80021f8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d907      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e150      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	42470000 	.word	0x42470000
 8003adc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b88      	ldr	r3, [pc, #544]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ea      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8097 	beq.w	8003c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b81      	ldr	r3, [pc, #516]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a7c      	ldr	r2, [pc, #496]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b77      	ldr	r3, [pc, #476]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d118      	bne.n	8003b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b36:	4b74      	ldr	r3, [pc, #464]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a73      	ldr	r2, [pc, #460]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fb59 	bl	80021f8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fe fb55 	bl	80021f8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e10c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2ea>
 8003b70:	4b64      	ldr	r3, [pc, #400]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	4a63      	ldr	r2, [pc, #396]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7c:	e01c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x30c>
 8003b86:	4b5f      	ldr	r3, [pc, #380]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b92:	4b5c      	ldr	r3, [pc, #368]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	4a5b      	ldr	r2, [pc, #364]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003ba0:	4b58      	ldr	r3, [pc, #352]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	4a57      	ldr	r2, [pc, #348]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bac:	4b55      	ldr	r3, [pc, #340]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb0:	4a54      	ldr	r2, [pc, #336]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fb1a 	bl	80021f8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fb16 	bl	80021f8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0cb      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	4b49      	ldr	r3, [pc, #292]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ee      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x334>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fe fb04 	bl	80021f8 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fb00 	bl	80021f8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0b5      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	4a38      	ldr	r2, [pc, #224]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a1 	beq.w	8003d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c32:	4b34      	ldr	r3, [pc, #208]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d05c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d141      	bne.n	8003cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b31      	ldr	r3, [pc, #196]	@ (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fad4 	bl	80021f8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fe fad0 	bl	80021f8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e087      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	4b27      	ldr	r3, [pc, #156]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	491b      	ldr	r1, [pc, #108]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe faa9 	bl	80021f8 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe faa5 	bl	80021f8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e05c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x416>
 8003cc8:	e054      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fa92 	bl	80021f8 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fa8e 	bl	80021f8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e045      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x444>
 8003cf6:	e03d      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e038      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	@ (8003d80 <HAL_RCC_OscConfig+0x4ec>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d028      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d121      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11a      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d40:	4013      	ands	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d111      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cc      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b68      	ldr	r3, [pc, #416]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d90c      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b65      	ldr	r3, [pc, #404]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b63      	ldr	r3, [pc, #396]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b8      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd8:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a58      	ldr	r2, [pc, #352]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df0:	4b53      	ldr	r3, [pc, #332]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a52      	ldr	r2, [pc, #328]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b50      	ldr	r3, [pc, #320]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	494d      	ldr	r1, [pc, #308]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d044      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b47      	ldr	r3, [pc, #284]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d119      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e067      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4934      	ldr	r1, [pc, #208]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fe f9c0 	bl	80021f8 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fe f9bc 	bl	80021f8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b2b      	ldr	r3, [pc, #172]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b25      	ldr	r3, [pc, #148]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d20c      	bcs.n	8003ecc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e032      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4916      	ldr	r1, [pc, #88]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef6:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	490e      	ldr	r1, [pc, #56]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f0a:	f000 f821 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	490a      	ldr	r1, [pc, #40]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	5ccb      	ldrb	r3, [r1, r3]
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	4a09      	ldr	r2, [pc, #36]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f26:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f920 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023c00 	.word	0x40023c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	0800754c 	.word	0x0800754c
 8003f48:	20000010 	.word	0x20000010
 8003f4c:	20000014 	.word	0x20000014

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f54:	b090      	sub	sp, #64	@ 0x40
 8003f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f68:	4b59      	ldr	r3, [pc, #356]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d00d      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x40>
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	f200 80a1 	bhi.w	80040bc <HAL_RCC_GetSysClockFreq+0x16c>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f82:	e09b      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f84:	4b53      	ldr	r3, [pc, #332]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f88:	e09b      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8a:	4b53      	ldr	r3, [pc, #332]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f8e:	e098      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f90:	4b4f      	ldr	r3, [pc, #316]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d028      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	2200      	movs	r2, #0
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fbc:	fb03 f201 	mul.w	r2, r3, r1
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	fb00 f303 	mul.w	r3, r0, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a43      	ldr	r2, [pc, #268]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fca:	fba0 1202 	umull	r1, r2, r0, r2
 8003fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd6:	4413      	add	r3, r2
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fdc:	2200      	movs	r2, #0
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003fea:	f7fc fddd 	bl	8000ba8 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff6:	e053      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff8:	4b35      	ldr	r3, [pc, #212]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	2200      	movs	r2, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	617a      	str	r2, [r7, #20]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800400a:	f04f 0b00 	mov.w	fp, #0
 800400e:	4652      	mov	r2, sl
 8004010:	465b      	mov	r3, fp
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004020:	0150      	lsls	r0, r2, #5
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	ebb2 080a 	subs.w	r8, r2, sl
 800402a:	eb63 090b 	sbc.w	r9, r3, fp
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800403a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800403e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004042:	ebb2 0408 	subs.w	r4, r2, r8
 8004046:	eb63 0509 	sbc.w	r5, r3, r9
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	00eb      	lsls	r3, r5, #3
 8004054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004058:	00e2      	lsls	r2, r4, #3
 800405a:	4614      	mov	r4, r2
 800405c:	461d      	mov	r5, r3
 800405e:	eb14 030a 	adds.w	r3, r4, sl
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	eb45 030b 	adc.w	r3, r5, fp
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004076:	4629      	mov	r1, r5
 8004078:	028b      	lsls	r3, r1, #10
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004080:	4621      	mov	r1, r4
 8004082:	028a      	lsls	r2, r1, #10
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408a:	2200      	movs	r2, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	60fa      	str	r2, [r7, #12]
 8004090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004094:	f7fc fd88 	bl	8000ba8 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80040b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3740      	adds	r7, #64	@ 0x40
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	017d7840 	.word	0x017d7840

080040dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	@ (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000010 	.word	0x20000010

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040f8:	f7ff fff0 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0a9b      	lsrs	r3, r3, #10
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4903      	ldr	r1, [pc, #12]	@ (8004118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	0800755c 	.word	0x0800755c

0800411c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e041      	b.n	80041b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd fe9e 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f000 f95e 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d001      	beq.n	80041d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e046      	b.n	8004262 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a23      	ldr	r2, [pc, #140]	@ (8004270 <HAL_TIM_Base_Start+0xb4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d022      	beq.n	800422c <HAL_TIM_Base_Start+0x70>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ee:	d01d      	beq.n	800422c <HAL_TIM_Base_Start+0x70>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004274 <HAL_TIM_Base_Start+0xb8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <HAL_TIM_Base_Start+0x70>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004278 <HAL_TIM_Base_Start+0xbc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <HAL_TIM_Base_Start+0x70>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1c      	ldr	r2, [pc, #112]	@ (800427c <HAL_TIM_Base_Start+0xc0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_TIM_Base_Start+0x70>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1b      	ldr	r2, [pc, #108]	@ (8004280 <HAL_TIM_Base_Start+0xc4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_TIM_Base_Start+0x70>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a19      	ldr	r2, [pc, #100]	@ (8004284 <HAL_TIM_Base_Start+0xc8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIM_Base_Start+0x70>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <HAL_TIM_Base_Start+0xcc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d111      	bne.n	8004250 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d010      	beq.n	8004260 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	e007      	b.n	8004260 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800
 800427c:	40000c00 	.word	0x40000c00
 8004280:	40010400 	.word	0x40010400
 8004284:	40014000 	.word	0x40014000
 8004288:	40001800 	.word	0x40001800

0800428c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_ConfigClockSource+0x1c>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0b4      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x186>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e0:	d03e      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0xd4>
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e6:	f200 8087 	bhi.w	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ee:	f000 8086 	beq.w	80043fe <HAL_TIM_ConfigClockSource+0x172>
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f6:	d87f      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b70      	cmp	r3, #112	@ 0x70
 80042fa:	d01a      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0xa6>
 80042fc:	2b70      	cmp	r3, #112	@ 0x70
 80042fe:	d87b      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b60      	cmp	r3, #96	@ 0x60
 8004302:	d050      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004304:	2b60      	cmp	r3, #96	@ 0x60
 8004306:	d877      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b50      	cmp	r3, #80	@ 0x50
 800430a:	d03c      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0xfa>
 800430c:	2b50      	cmp	r3, #80	@ 0x50
 800430e:	d873      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b40      	cmp	r3, #64	@ 0x40
 8004312:	d058      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d86f      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b30      	cmp	r3, #48	@ 0x30
 800431a:	d064      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	2b30      	cmp	r3, #48	@ 0x30
 800431e:	d86b      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b20      	cmp	r3, #32
 8004322:	d060      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004324:	2b20      	cmp	r3, #32
 8004326:	d867      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05c      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x15a>
 800432c:	2b10      	cmp	r3, #16
 800432e:	d05a      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004330:	e062      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004342:	f000 f991 	bl	8004668 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	609a      	str	r2, [r3, #8]
      break;
 800435e:	e04f      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004370:	f000 f97a 	bl	8004668 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004382:	609a      	str	r2, [r3, #8]
      break;
 8004384:	e03c      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004392:	461a      	mov	r2, r3
 8004394:	f000 f8ee 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2150      	movs	r1, #80	@ 0x50
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f947 	bl	8004632 <TIM_ITRx_SetConfig>
      break;
 80043a4:	e02c      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 f90d 	bl	80045d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2160      	movs	r1, #96	@ 0x60
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f937 	bl	8004632 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e01c      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 f8ce 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2140      	movs	r1, #64	@ 0x40
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f927 	bl	8004632 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e00c      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f000 f91e 	bl	8004632 <TIM_ITRx_SetConfig>
      break;
 80043f6:	e003      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      break;
 80043fc:	e000      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a46      	ldr	r2, [pc, #280]	@ (8004548 <TIM_Base_SetConfig+0x12c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443a:	d00f      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a43      	ldr	r2, [pc, #268]	@ (800454c <TIM_Base_SetConfig+0x130>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00b      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a42      	ldr	r2, [pc, #264]	@ (8004550 <TIM_Base_SetConfig+0x134>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a41      	ldr	r2, [pc, #260]	@ (8004554 <TIM_Base_SetConfig+0x138>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a40      	ldr	r2, [pc, #256]	@ (8004558 <TIM_Base_SetConfig+0x13c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a35      	ldr	r2, [pc, #212]	@ (8004548 <TIM_Base_SetConfig+0x12c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02b      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800447c:	d027      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a32      	ldr	r2, [pc, #200]	@ (800454c <TIM_Base_SetConfig+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d023      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a31      	ldr	r2, [pc, #196]	@ (8004550 <TIM_Base_SetConfig+0x134>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01f      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a30      	ldr	r2, [pc, #192]	@ (8004554 <TIM_Base_SetConfig+0x138>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01b      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2f      	ldr	r2, [pc, #188]	@ (8004558 <TIM_Base_SetConfig+0x13c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d017      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2e      	ldr	r2, [pc, #184]	@ (800455c <TIM_Base_SetConfig+0x140>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004560 <TIM_Base_SetConfig+0x144>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004564 <TIM_Base_SetConfig+0x148>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004568 <TIM_Base_SetConfig+0x14c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2a      	ldr	r2, [pc, #168]	@ (800456c <TIM_Base_SetConfig+0x150>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a29      	ldr	r2, [pc, #164]	@ (8004570 <TIM_Base_SetConfig+0x154>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a10      	ldr	r2, [pc, #64]	@ (8004548 <TIM_Base_SetConfig+0x12c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_Base_SetConfig+0xf8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a12      	ldr	r2, [pc, #72]	@ (8004558 <TIM_Base_SetConfig+0x13c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d103      	bne.n	800451c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f023 0201 	bic.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	611a      	str	r2, [r3, #16]
  }
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010400 	.word	0x40010400
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800
 8004568:	40001800 	.word	0x40001800
 800456c:	40001c00 	.word	0x40001c00
 8004570:	40002000 	.word	0x40002000

08004574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f023 030a 	bic.w	r3, r3, #10
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b087      	sub	sp, #28
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 0210 	bic.w	r2, r3, #16
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	031b      	lsls	r3, r3, #12
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800460e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	f043 0307 	orr.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	609a      	str	r2, [r3, #8]
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	021a      	lsls	r2, r3, #8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	431a      	orrs	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e05a      	b.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470c:	d01d      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1b      	ldr	r2, [pc, #108]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1a      	ldr	r2, [pc, #104]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a17      	ldr	r2, [pc, #92]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a15      	ldr	r2, [pc, #84]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10c      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4313      	orrs	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40010400 	.word	0x40010400
 8004798:	40014000 	.word	0x40014000
 800479c:	40001800 	.word	0x40001800

080047a0 <__cvt>:
 80047a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	ec57 6b10 	vmov	r6, r7, d0
 80047a8:	2f00      	cmp	r7, #0
 80047aa:	460c      	mov	r4, r1
 80047ac:	4619      	mov	r1, r3
 80047ae:	463b      	mov	r3, r7
 80047b0:	bfbb      	ittet	lt
 80047b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80047b6:	461f      	movlt	r7, r3
 80047b8:	2300      	movge	r3, #0
 80047ba:	232d      	movlt	r3, #45	@ 0x2d
 80047bc:	700b      	strb	r3, [r1, #0]
 80047be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80047c4:	4691      	mov	r9, r2
 80047c6:	f023 0820 	bic.w	r8, r3, #32
 80047ca:	bfbc      	itt	lt
 80047cc:	4632      	movlt	r2, r6
 80047ce:	4616      	movlt	r6, r2
 80047d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047d4:	d005      	beq.n	80047e2 <__cvt+0x42>
 80047d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047da:	d100      	bne.n	80047de <__cvt+0x3e>
 80047dc:	3401      	adds	r4, #1
 80047de:	2102      	movs	r1, #2
 80047e0:	e000      	b.n	80047e4 <__cvt+0x44>
 80047e2:	2103      	movs	r1, #3
 80047e4:	ab03      	add	r3, sp, #12
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	ab02      	add	r3, sp, #8
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	ec47 6b10 	vmov	d0, r6, r7
 80047f0:	4653      	mov	r3, sl
 80047f2:	4622      	mov	r2, r4
 80047f4:	f000 fe5c 	bl	80054b0 <_dtoa_r>
 80047f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047fc:	4605      	mov	r5, r0
 80047fe:	d119      	bne.n	8004834 <__cvt+0x94>
 8004800:	f019 0f01 	tst.w	r9, #1
 8004804:	d00e      	beq.n	8004824 <__cvt+0x84>
 8004806:	eb00 0904 	add.w	r9, r0, r4
 800480a:	2200      	movs	r2, #0
 800480c:	2300      	movs	r3, #0
 800480e:	4630      	mov	r0, r6
 8004810:	4639      	mov	r1, r7
 8004812:	f7fc f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8004816:	b108      	cbz	r0, 800481c <__cvt+0x7c>
 8004818:	f8cd 900c 	str.w	r9, [sp, #12]
 800481c:	2230      	movs	r2, #48	@ 0x30
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	454b      	cmp	r3, r9
 8004822:	d31e      	bcc.n	8004862 <__cvt+0xc2>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004828:	1b5b      	subs	r3, r3, r5
 800482a:	4628      	mov	r0, r5
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	b004      	add	sp, #16
 8004830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004838:	eb00 0904 	add.w	r9, r0, r4
 800483c:	d1e5      	bne.n	800480a <__cvt+0x6a>
 800483e:	7803      	ldrb	r3, [r0, #0]
 8004840:	2b30      	cmp	r3, #48	@ 0x30
 8004842:	d10a      	bne.n	800485a <__cvt+0xba>
 8004844:	2200      	movs	r2, #0
 8004846:	2300      	movs	r3, #0
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	f7fc f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004850:	b918      	cbnz	r0, 800485a <__cvt+0xba>
 8004852:	f1c4 0401 	rsb	r4, r4, #1
 8004856:	f8ca 4000 	str.w	r4, [sl]
 800485a:	f8da 3000 	ldr.w	r3, [sl]
 800485e:	4499      	add	r9, r3
 8004860:	e7d3      	b.n	800480a <__cvt+0x6a>
 8004862:	1c59      	adds	r1, r3, #1
 8004864:	9103      	str	r1, [sp, #12]
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e7d9      	b.n	800481e <__cvt+0x7e>

0800486a <__exponent>:
 800486a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486c:	2900      	cmp	r1, #0
 800486e:	bfba      	itte	lt
 8004870:	4249      	neglt	r1, r1
 8004872:	232d      	movlt	r3, #45	@ 0x2d
 8004874:	232b      	movge	r3, #43	@ 0x2b
 8004876:	2909      	cmp	r1, #9
 8004878:	7002      	strb	r2, [r0, #0]
 800487a:	7043      	strb	r3, [r0, #1]
 800487c:	dd29      	ble.n	80048d2 <__exponent+0x68>
 800487e:	f10d 0307 	add.w	r3, sp, #7
 8004882:	461d      	mov	r5, r3
 8004884:	270a      	movs	r7, #10
 8004886:	461a      	mov	r2, r3
 8004888:	fbb1 f6f7 	udiv	r6, r1, r7
 800488c:	fb07 1416 	mls	r4, r7, r6, r1
 8004890:	3430      	adds	r4, #48	@ 0x30
 8004892:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004896:	460c      	mov	r4, r1
 8004898:	2c63      	cmp	r4, #99	@ 0x63
 800489a:	f103 33ff 	add.w	r3, r3, #4294967295
 800489e:	4631      	mov	r1, r6
 80048a0:	dcf1      	bgt.n	8004886 <__exponent+0x1c>
 80048a2:	3130      	adds	r1, #48	@ 0x30
 80048a4:	1e94      	subs	r4, r2, #2
 80048a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048aa:	1c41      	adds	r1, r0, #1
 80048ac:	4623      	mov	r3, r4
 80048ae:	42ab      	cmp	r3, r5
 80048b0:	d30a      	bcc.n	80048c8 <__exponent+0x5e>
 80048b2:	f10d 0309 	add.w	r3, sp, #9
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	42ac      	cmp	r4, r5
 80048ba:	bf88      	it	hi
 80048bc:	2300      	movhi	r3, #0
 80048be:	3302      	adds	r3, #2
 80048c0:	4403      	add	r3, r0
 80048c2:	1a18      	subs	r0, r3, r0
 80048c4:	b003      	add	sp, #12
 80048c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048d0:	e7ed      	b.n	80048ae <__exponent+0x44>
 80048d2:	2330      	movs	r3, #48	@ 0x30
 80048d4:	3130      	adds	r1, #48	@ 0x30
 80048d6:	7083      	strb	r3, [r0, #2]
 80048d8:	70c1      	strb	r1, [r0, #3]
 80048da:	1d03      	adds	r3, r0, #4
 80048dc:	e7f1      	b.n	80048c2 <__exponent+0x58>
	...

080048e0 <_printf_float>:
 80048e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e4:	b08d      	sub	sp, #52	@ 0x34
 80048e6:	460c      	mov	r4, r1
 80048e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80048ec:	4616      	mov	r6, r2
 80048ee:	461f      	mov	r7, r3
 80048f0:	4605      	mov	r5, r0
 80048f2:	f000 fcdb 	bl	80052ac <_localeconv_r>
 80048f6:	6803      	ldr	r3, [r0, #0]
 80048f8:	9304      	str	r3, [sp, #16]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fb fcb8 	bl	8000270 <strlen>
 8004900:	2300      	movs	r3, #0
 8004902:	930a      	str	r3, [sp, #40]	@ 0x28
 8004904:	f8d8 3000 	ldr.w	r3, [r8]
 8004908:	9005      	str	r0, [sp, #20]
 800490a:	3307      	adds	r3, #7
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	f103 0208 	add.w	r2, r3, #8
 8004914:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004918:	f8d4 b000 	ldr.w	fp, [r4]
 800491c:	f8c8 2000 	str.w	r2, [r8]
 8004920:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004924:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004928:	9307      	str	r3, [sp, #28]
 800492a:	f8cd 8018 	str.w	r8, [sp, #24]
 800492e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004936:	4b9c      	ldr	r3, [pc, #624]	@ (8004ba8 <_printf_float+0x2c8>)
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	f7fc f8f6 	bl	8000b2c <__aeabi_dcmpun>
 8004940:	bb70      	cbnz	r0, 80049a0 <_printf_float+0xc0>
 8004942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004946:	4b98      	ldr	r3, [pc, #608]	@ (8004ba8 <_printf_float+0x2c8>)
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	f7fc f8d0 	bl	8000af0 <__aeabi_dcmple>
 8004950:	bb30      	cbnz	r0, 80049a0 <_printf_float+0xc0>
 8004952:	2200      	movs	r2, #0
 8004954:	2300      	movs	r3, #0
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	f7fc f8bf 	bl	8000adc <__aeabi_dcmplt>
 800495e:	b110      	cbz	r0, 8004966 <_printf_float+0x86>
 8004960:	232d      	movs	r3, #45	@ 0x2d
 8004962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004966:	4a91      	ldr	r2, [pc, #580]	@ (8004bac <_printf_float+0x2cc>)
 8004968:	4b91      	ldr	r3, [pc, #580]	@ (8004bb0 <_printf_float+0x2d0>)
 800496a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800496e:	bf94      	ite	ls
 8004970:	4690      	movls	r8, r2
 8004972:	4698      	movhi	r8, r3
 8004974:	2303      	movs	r3, #3
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	f02b 0304 	bic.w	r3, fp, #4
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	f04f 0900 	mov.w	r9, #0
 8004982:	9700      	str	r7, [sp, #0]
 8004984:	4633      	mov	r3, r6
 8004986:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004988:	4621      	mov	r1, r4
 800498a:	4628      	mov	r0, r5
 800498c:	f000 f9d2 	bl	8004d34 <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	f040 808d 	bne.w	8004ab0 <_printf_float+0x1d0>
 8004996:	f04f 30ff 	mov.w	r0, #4294967295
 800499a:	b00d      	add	sp, #52	@ 0x34
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	4640      	mov	r0, r8
 80049a6:	4649      	mov	r1, r9
 80049a8:	f7fc f8c0 	bl	8000b2c <__aeabi_dcmpun>
 80049ac:	b140      	cbz	r0, 80049c0 <_printf_float+0xe0>
 80049ae:	464b      	mov	r3, r9
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bfbc      	itt	lt
 80049b4:	232d      	movlt	r3, #45	@ 0x2d
 80049b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80049ba:	4a7e      	ldr	r2, [pc, #504]	@ (8004bb4 <_printf_float+0x2d4>)
 80049bc:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb8 <_printf_float+0x2d8>)
 80049be:	e7d4      	b.n	800496a <_printf_float+0x8a>
 80049c0:	6863      	ldr	r3, [r4, #4]
 80049c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80049c6:	9206      	str	r2, [sp, #24]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	d13b      	bne.n	8004a44 <_printf_float+0x164>
 80049cc:	2306      	movs	r3, #6
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80049d4:	2300      	movs	r3, #0
 80049d6:	6022      	str	r2, [r4, #0]
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	ab0a      	add	r3, sp, #40	@ 0x28
 80049dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80049e0:	ab09      	add	r3, sp, #36	@ 0x24
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	6861      	ldr	r1, [r4, #4]
 80049e6:	ec49 8b10 	vmov	d0, r8, r9
 80049ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80049ee:	4628      	mov	r0, r5
 80049f0:	f7ff fed6 	bl	80047a0 <__cvt>
 80049f4:	9b06      	ldr	r3, [sp, #24]
 80049f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049f8:	2b47      	cmp	r3, #71	@ 0x47
 80049fa:	4680      	mov	r8, r0
 80049fc:	d129      	bne.n	8004a52 <_printf_float+0x172>
 80049fe:	1cc8      	adds	r0, r1, #3
 8004a00:	db02      	blt.n	8004a08 <_printf_float+0x128>
 8004a02:	6863      	ldr	r3, [r4, #4]
 8004a04:	4299      	cmp	r1, r3
 8004a06:	dd41      	ble.n	8004a8c <_printf_float+0x1ac>
 8004a08:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a0c:	fa5f fa8a 	uxtb.w	sl, sl
 8004a10:	3901      	subs	r1, #1
 8004a12:	4652      	mov	r2, sl
 8004a14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a18:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a1a:	f7ff ff26 	bl	800486a <__exponent>
 8004a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a20:	1813      	adds	r3, r2, r0
 8004a22:	2a01      	cmp	r2, #1
 8004a24:	4681      	mov	r9, r0
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	dc02      	bgt.n	8004a30 <_printf_float+0x150>
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	07d2      	lsls	r2, r2, #31
 8004a2e:	d501      	bpl.n	8004a34 <_printf_float+0x154>
 8004a30:	3301      	adds	r3, #1
 8004a32:	6123      	str	r3, [r4, #16]
 8004a34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0a2      	beq.n	8004982 <_printf_float+0xa2>
 8004a3c:	232d      	movs	r3, #45	@ 0x2d
 8004a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a42:	e79e      	b.n	8004982 <_printf_float+0xa2>
 8004a44:	9a06      	ldr	r2, [sp, #24]
 8004a46:	2a47      	cmp	r2, #71	@ 0x47
 8004a48:	d1c2      	bne.n	80049d0 <_printf_float+0xf0>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1c0      	bne.n	80049d0 <_printf_float+0xf0>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e7bd      	b.n	80049ce <_printf_float+0xee>
 8004a52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a56:	d9db      	bls.n	8004a10 <_printf_float+0x130>
 8004a58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a5c:	d118      	bne.n	8004a90 <_printf_float+0x1b0>
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	dd0b      	ble.n	8004a7c <_printf_float+0x19c>
 8004a64:	6121      	str	r1, [r4, #16]
 8004a66:	b913      	cbnz	r3, 8004a6e <_printf_float+0x18e>
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	07d0      	lsls	r0, r2, #31
 8004a6c:	d502      	bpl.n	8004a74 <_printf_float+0x194>
 8004a6e:	3301      	adds	r3, #1
 8004a70:	440b      	add	r3, r1
 8004a72:	6123      	str	r3, [r4, #16]
 8004a74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a76:	f04f 0900 	mov.w	r9, #0
 8004a7a:	e7db      	b.n	8004a34 <_printf_float+0x154>
 8004a7c:	b913      	cbnz	r3, 8004a84 <_printf_float+0x1a4>
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	07d2      	lsls	r2, r2, #31
 8004a82:	d501      	bpl.n	8004a88 <_printf_float+0x1a8>
 8004a84:	3302      	adds	r3, #2
 8004a86:	e7f4      	b.n	8004a72 <_printf_float+0x192>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e7f2      	b.n	8004a72 <_printf_float+0x192>
 8004a8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a92:	4299      	cmp	r1, r3
 8004a94:	db05      	blt.n	8004aa2 <_printf_float+0x1c2>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	6121      	str	r1, [r4, #16]
 8004a9a:	07d8      	lsls	r0, r3, #31
 8004a9c:	d5ea      	bpl.n	8004a74 <_printf_float+0x194>
 8004a9e:	1c4b      	adds	r3, r1, #1
 8004aa0:	e7e7      	b.n	8004a72 <_printf_float+0x192>
 8004aa2:	2900      	cmp	r1, #0
 8004aa4:	bfd4      	ite	le
 8004aa6:	f1c1 0202 	rsble	r2, r1, #2
 8004aaa:	2201      	movgt	r2, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	e7e0      	b.n	8004a72 <_printf_float+0x192>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	055a      	lsls	r2, r3, #21
 8004ab4:	d407      	bmi.n	8004ac6 <_printf_float+0x1e6>
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	4642      	mov	r2, r8
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d12b      	bne.n	8004b1c <_printf_float+0x23c>
 8004ac4:	e767      	b.n	8004996 <_printf_float+0xb6>
 8004ac6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004aca:	f240 80dd 	bls.w	8004c88 <_printf_float+0x3a8>
 8004ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f7fb fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d033      	beq.n	8004b46 <_printf_float+0x266>
 8004ade:	4a37      	ldr	r2, [pc, #220]	@ (8004bbc <_printf_float+0x2dc>)
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	47b8      	blx	r7
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f43f af54 	beq.w	8004996 <_printf_float+0xb6>
 8004aee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004af2:	4543      	cmp	r3, r8
 8004af4:	db02      	blt.n	8004afc <_printf_float+0x21c>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	07d8      	lsls	r0, r3, #31
 8004afa:	d50f      	bpl.n	8004b1c <_printf_float+0x23c>
 8004afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f43f af45 	beq.w	8004996 <_printf_float+0xb6>
 8004b0c:	f04f 0900 	mov.w	r9, #0
 8004b10:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b14:	f104 0a1a 	add.w	sl, r4, #26
 8004b18:	45c8      	cmp	r8, r9
 8004b1a:	dc09      	bgt.n	8004b30 <_printf_float+0x250>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	079b      	lsls	r3, r3, #30
 8004b20:	f100 8103 	bmi.w	8004d2a <_printf_float+0x44a>
 8004b24:	68e0      	ldr	r0, [r4, #12]
 8004b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b28:	4298      	cmp	r0, r3
 8004b2a:	bfb8      	it	lt
 8004b2c:	4618      	movlt	r0, r3
 8004b2e:	e734      	b.n	800499a <_printf_float+0xba>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4652      	mov	r2, sl
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f af2b 	beq.w	8004996 <_printf_float+0xb6>
 8004b40:	f109 0901 	add.w	r9, r9, #1
 8004b44:	e7e8      	b.n	8004b18 <_printf_float+0x238>
 8004b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	dc39      	bgt.n	8004bc0 <_printf_float+0x2e0>
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <_printf_float+0x2dc>)
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4631      	mov	r1, r6
 8004b52:	4628      	mov	r0, r5
 8004b54:	47b8      	blx	r7
 8004b56:	3001      	adds	r0, #1
 8004b58:	f43f af1d 	beq.w	8004996 <_printf_float+0xb6>
 8004b5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b60:	ea59 0303 	orrs.w	r3, r9, r3
 8004b64:	d102      	bne.n	8004b6c <_printf_float+0x28c>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	07d9      	lsls	r1, r3, #31
 8004b6a:	d5d7      	bpl.n	8004b1c <_printf_float+0x23c>
 8004b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b70:	4631      	mov	r1, r6
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	f43f af0d 	beq.w	8004996 <_printf_float+0xb6>
 8004b7c:	f04f 0a00 	mov.w	sl, #0
 8004b80:	f104 0b1a 	add.w	fp, r4, #26
 8004b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b86:	425b      	negs	r3, r3
 8004b88:	4553      	cmp	r3, sl
 8004b8a:	dc01      	bgt.n	8004b90 <_printf_float+0x2b0>
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	e793      	b.n	8004ab8 <_printf_float+0x1d8>
 8004b90:	2301      	movs	r3, #1
 8004b92:	465a      	mov	r2, fp
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f aefb 	beq.w	8004996 <_printf_float+0xb6>
 8004ba0:	f10a 0a01 	add.w	sl, sl, #1
 8004ba4:	e7ee      	b.n	8004b84 <_printf_float+0x2a4>
 8004ba6:	bf00      	nop
 8004ba8:	7fefffff 	.word	0x7fefffff
 8004bac:	08007564 	.word	0x08007564
 8004bb0:	08007568 	.word	0x08007568
 8004bb4:	0800756c 	.word	0x0800756c
 8004bb8:	08007570 	.word	0x08007570
 8004bbc:	08007574 	.word	0x08007574
 8004bc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004bc6:	4553      	cmp	r3, sl
 8004bc8:	bfa8      	it	ge
 8004bca:	4653      	movge	r3, sl
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	4699      	mov	r9, r3
 8004bd0:	dc36      	bgt.n	8004c40 <_printf_float+0x360>
 8004bd2:	f04f 0b00 	mov.w	fp, #0
 8004bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bda:	f104 021a 	add.w	r2, r4, #26
 8004bde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004be0:	9306      	str	r3, [sp, #24]
 8004be2:	eba3 0309 	sub.w	r3, r3, r9
 8004be6:	455b      	cmp	r3, fp
 8004be8:	dc31      	bgt.n	8004c4e <_printf_float+0x36e>
 8004bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bec:	459a      	cmp	sl, r3
 8004bee:	dc3a      	bgt.n	8004c66 <_printf_float+0x386>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	07da      	lsls	r2, r3, #31
 8004bf4:	d437      	bmi.n	8004c66 <_printf_float+0x386>
 8004bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf8:	ebaa 0903 	sub.w	r9, sl, r3
 8004bfc:	9b06      	ldr	r3, [sp, #24]
 8004bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8004c02:	4599      	cmp	r9, r3
 8004c04:	bfa8      	it	ge
 8004c06:	4699      	movge	r9, r3
 8004c08:	f1b9 0f00 	cmp.w	r9, #0
 8004c0c:	dc33      	bgt.n	8004c76 <_printf_float+0x396>
 8004c0e:	f04f 0800 	mov.w	r8, #0
 8004c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c16:	f104 0b1a 	add.w	fp, r4, #26
 8004c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8004c20:	eba3 0309 	sub.w	r3, r3, r9
 8004c24:	4543      	cmp	r3, r8
 8004c26:	f77f af79 	ble.w	8004b1c <_printf_float+0x23c>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	465a      	mov	r2, fp
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	f43f aeae 	beq.w	8004996 <_printf_float+0xb6>
 8004c3a:	f108 0801 	add.w	r8, r8, #1
 8004c3e:	e7ec      	b.n	8004c1a <_printf_float+0x33a>
 8004c40:	4642      	mov	r2, r8
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d1c2      	bne.n	8004bd2 <_printf_float+0x2f2>
 8004c4c:	e6a3      	b.n	8004996 <_printf_float+0xb6>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4631      	mov	r1, r6
 8004c52:	4628      	mov	r0, r5
 8004c54:	9206      	str	r2, [sp, #24]
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f ae9c 	beq.w	8004996 <_printf_float+0xb6>
 8004c5e:	9a06      	ldr	r2, [sp, #24]
 8004c60:	f10b 0b01 	add.w	fp, fp, #1
 8004c64:	e7bb      	b.n	8004bde <_printf_float+0x2fe>
 8004c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	47b8      	blx	r7
 8004c70:	3001      	adds	r0, #1
 8004c72:	d1c0      	bne.n	8004bf6 <_printf_float+0x316>
 8004c74:	e68f      	b.n	8004996 <_printf_float+0xb6>
 8004c76:	9a06      	ldr	r2, [sp, #24]
 8004c78:	464b      	mov	r3, r9
 8004c7a:	4442      	add	r2, r8
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	d1c3      	bne.n	8004c0e <_printf_float+0x32e>
 8004c86:	e686      	b.n	8004996 <_printf_float+0xb6>
 8004c88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c8c:	f1ba 0f01 	cmp.w	sl, #1
 8004c90:	dc01      	bgt.n	8004c96 <_printf_float+0x3b6>
 8004c92:	07db      	lsls	r3, r3, #31
 8004c94:	d536      	bpl.n	8004d04 <_printf_float+0x424>
 8004c96:	2301      	movs	r3, #1
 8004c98:	4642      	mov	r2, r8
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae78 	beq.w	8004996 <_printf_float+0xb6>
 8004ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004caa:	4631      	mov	r1, r6
 8004cac:	4628      	mov	r0, r5
 8004cae:	47b8      	blx	r7
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f43f ae70 	beq.w	8004996 <_printf_float+0xb6>
 8004cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cc2:	f7fb ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cc6:	b9c0      	cbnz	r0, 8004cfa <_printf_float+0x41a>
 8004cc8:	4653      	mov	r3, sl
 8004cca:	f108 0201 	add.w	r2, r8, #1
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d10c      	bne.n	8004cf2 <_printf_float+0x412>
 8004cd8:	e65d      	b.n	8004996 <_printf_float+0xb6>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	465a      	mov	r2, fp
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f43f ae56 	beq.w	8004996 <_printf_float+0xb6>
 8004cea:	f108 0801 	add.w	r8, r8, #1
 8004cee:	45d0      	cmp	r8, sl
 8004cf0:	dbf3      	blt.n	8004cda <_printf_float+0x3fa>
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cf8:	e6df      	b.n	8004aba <_printf_float+0x1da>
 8004cfa:	f04f 0800 	mov.w	r8, #0
 8004cfe:	f104 0b1a 	add.w	fp, r4, #26
 8004d02:	e7f4      	b.n	8004cee <_printf_float+0x40e>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4642      	mov	r2, r8
 8004d08:	e7e1      	b.n	8004cce <_printf_float+0x3ee>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	464a      	mov	r2, r9
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	f43f ae3e 	beq.w	8004996 <_printf_float+0xb6>
 8004d1a:	f108 0801 	add.w	r8, r8, #1
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d22:	1a5b      	subs	r3, r3, r1
 8004d24:	4543      	cmp	r3, r8
 8004d26:	dcf0      	bgt.n	8004d0a <_printf_float+0x42a>
 8004d28:	e6fc      	b.n	8004b24 <_printf_float+0x244>
 8004d2a:	f04f 0800 	mov.w	r8, #0
 8004d2e:	f104 0919 	add.w	r9, r4, #25
 8004d32:	e7f4      	b.n	8004d1e <_printf_float+0x43e>

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4698      	mov	r8, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bfb8      	it	lt
 8004d48:	4613      	movlt	r3, r2
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d50:	4607      	mov	r7, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc26      	bgt.n	8004dca <_printf_common+0x96>
 8004d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	3b00      	subs	r3, #0
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d42b      	bmi.n	8004de4 <_printf_common+0xb0>
 8004d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d90:	4641      	mov	r1, r8
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c8      	blx	r9
 8004d96:	3001      	adds	r0, #1
 8004d98:	d01e      	beq.n	8004dd8 <_printf_common+0xa4>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	f003 0306 	and.w	r3, r3, #6
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf02      	ittt	eq
 8004da6:	68e5      	ldreq	r5, [r4, #12]
 8004da8:	6833      	ldreq	r3, [r6, #0]
 8004daa:	1aed      	subeq	r5, r5, r3
 8004dac:	68a3      	ldr	r3, [r4, #8]
 8004dae:	bf0c      	ite	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	2500      	movne	r5, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfc4      	itt	gt
 8004dba:	1a9b      	subgt	r3, r3, r2
 8004dbc:	18ed      	addgt	r5, r5, r3
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	341a      	adds	r4, #26
 8004dc2:	42b5      	cmp	r5, r6
 8004dc4:	d11a      	bne.n	8004dfc <_printf_common+0xc8>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e008      	b.n	8004ddc <_printf_common+0xa8>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4641      	mov	r1, r8
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	47c8      	blx	r9
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_printf_common+0xac>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3501      	adds	r5, #1
 8004de2:	e7c6      	b.n	8004d72 <_printf_common+0x3e>
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	2030      	movs	r0, #48	@ 0x30
 8004dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dee:	4422      	add	r2, r4
 8004df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7c7      	b.n	8004d8c <_printf_common+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4641      	mov	r1, r8
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c8      	blx	r9
 8004e06:	3001      	adds	r0, #1
 8004e08:	d0e6      	beq.n	8004dd8 <_printf_common+0xa4>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7d9      	b.n	8004dc2 <_printf_common+0x8e>
	...

08004e10 <_printf_i>:
 8004e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	7e0f      	ldrb	r7, [r1, #24]
 8004e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e18:	2f78      	cmp	r7, #120	@ 0x78
 8004e1a:	4691      	mov	r9, r2
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	469a      	mov	sl, r3
 8004e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e26:	d807      	bhi.n	8004e38 <_printf_i+0x28>
 8004e28:	2f62      	cmp	r7, #98	@ 0x62
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x32>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f000 80d2 	beq.w	8004fd6 <_printf_i+0x1c6>
 8004e32:	2f58      	cmp	r7, #88	@ 0x58
 8004e34:	f000 80b9 	beq.w	8004faa <_printf_i+0x19a>
 8004e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e40:	e03a      	b.n	8004eb8 <_printf_i+0xa8>
 8004e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e46:	2b15      	cmp	r3, #21
 8004e48:	d8f6      	bhi.n	8004e38 <_printf_i+0x28>
 8004e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e50 <_printf_i+0x40>)
 8004e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ebd 	.word	0x08004ebd
 8004e58:	08004e39 	.word	0x08004e39
 8004e5c:	08004e39 	.word	0x08004e39
 8004e60:	08004e39 	.word	0x08004e39
 8004e64:	08004e39 	.word	0x08004e39
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e39 	.word	0x08004e39
 8004e70:	08004e39 	.word	0x08004e39
 8004e74:	08004e39 	.word	0x08004e39
 8004e78:	08004e39 	.word	0x08004e39
 8004e7c:	08004fbd 	.word	0x08004fbd
 8004e80:	08004ee7 	.word	0x08004ee7
 8004e84:	08004f77 	.word	0x08004f77
 8004e88:	08004e39 	.word	0x08004e39
 8004e8c:	08004e39 	.word	0x08004e39
 8004e90:	08004fdf 	.word	0x08004fdf
 8004e94:	08004e39 	.word	0x08004e39
 8004e98:	08004ee7 	.word	0x08004ee7
 8004e9c:	08004e39 	.word	0x08004e39
 8004ea0:	08004e39 	.word	0x08004e39
 8004ea4:	08004f7f 	.word	0x08004f7f
 8004ea8:	6833      	ldr	r3, [r6, #0]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6032      	str	r2, [r6, #0]
 8004eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e09d      	b.n	8004ff8 <_printf_i+0x1e8>
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	6031      	str	r1, [r6, #0]
 8004ec4:	0606      	lsls	r6, r0, #24
 8004ec6:	d501      	bpl.n	8004ecc <_printf_i+0xbc>
 8004ec8:	681d      	ldr	r5, [r3, #0]
 8004eca:	e003      	b.n	8004ed4 <_printf_i+0xc4>
 8004ecc:	0645      	lsls	r5, r0, #25
 8004ece:	d5fb      	bpl.n	8004ec8 <_printf_i+0xb8>
 8004ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	da03      	bge.n	8004ee0 <_printf_i+0xd0>
 8004ed8:	232d      	movs	r3, #45	@ 0x2d
 8004eda:	426d      	negs	r5, r5
 8004edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ee0:	4859      	ldr	r0, [pc, #356]	@ (8005048 <_printf_i+0x238>)
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	e011      	b.n	8004f0a <_printf_i+0xfa>
 8004ee6:	6821      	ldr	r1, [r4, #0]
 8004ee8:	6833      	ldr	r3, [r6, #0]
 8004eea:	0608      	lsls	r0, r1, #24
 8004eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ef0:	d402      	bmi.n	8004ef8 <_printf_i+0xe8>
 8004ef2:	0649      	lsls	r1, r1, #25
 8004ef4:	bf48      	it	mi
 8004ef6:	b2ad      	uxthmi	r5, r5
 8004ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004efa:	4853      	ldr	r0, [pc, #332]	@ (8005048 <_printf_i+0x238>)
 8004efc:	6033      	str	r3, [r6, #0]
 8004efe:	bf14      	ite	ne
 8004f00:	230a      	movne	r3, #10
 8004f02:	2308      	moveq	r3, #8
 8004f04:	2100      	movs	r1, #0
 8004f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f0a:	6866      	ldr	r6, [r4, #4]
 8004f0c:	60a6      	str	r6, [r4, #8]
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	bfa2      	ittt	ge
 8004f12:	6821      	ldrge	r1, [r4, #0]
 8004f14:	f021 0104 	bicge.w	r1, r1, #4
 8004f18:	6021      	strge	r1, [r4, #0]
 8004f1a:	b90d      	cbnz	r5, 8004f20 <_printf_i+0x110>
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	d04b      	beq.n	8004fb8 <_printf_i+0x1a8>
 8004f20:	4616      	mov	r6, r2
 8004f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f26:	fb03 5711 	mls	r7, r3, r1, r5
 8004f2a:	5dc7      	ldrb	r7, [r0, r7]
 8004f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f30:	462f      	mov	r7, r5
 8004f32:	42bb      	cmp	r3, r7
 8004f34:	460d      	mov	r5, r1
 8004f36:	d9f4      	bls.n	8004f22 <_printf_i+0x112>
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d10b      	bne.n	8004f54 <_printf_i+0x144>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	07df      	lsls	r7, r3, #31
 8004f40:	d508      	bpl.n	8004f54 <_printf_i+0x144>
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	4299      	cmp	r1, r3
 8004f48:	bfde      	ittt	le
 8004f4a:	2330      	movle	r3, #48	@ 0x30
 8004f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f54:	1b92      	subs	r2, r2, r6
 8004f56:	6122      	str	r2, [r4, #16]
 8004f58:	f8cd a000 	str.w	sl, [sp]
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	aa03      	add	r2, sp, #12
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fee6 	bl	8004d34 <_printf_common>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d14a      	bne.n	8005002 <_printf_i+0x1f2>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	b004      	add	sp, #16
 8004f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f043 0320 	orr.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	4833      	ldr	r0, [pc, #204]	@ (800504c <_printf_i+0x23c>)
 8004f80:	2778      	movs	r7, #120	@ 0x78
 8004f82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	6831      	ldr	r1, [r6, #0]
 8004f8a:	061f      	lsls	r7, r3, #24
 8004f8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f90:	d402      	bmi.n	8004f98 <_printf_i+0x188>
 8004f92:	065f      	lsls	r7, r3, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2ad      	uxthmi	r5, r5
 8004f98:	6031      	str	r1, [r6, #0]
 8004f9a:	07d9      	lsls	r1, r3, #31
 8004f9c:	bf44      	itt	mi
 8004f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa2:	6023      	strmi	r3, [r4, #0]
 8004fa4:	b11d      	cbz	r5, 8004fae <_printf_i+0x19e>
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	e7ac      	b.n	8004f04 <_printf_i+0xf4>
 8004faa:	4827      	ldr	r0, [pc, #156]	@ (8005048 <_printf_i+0x238>)
 8004fac:	e7e9      	b.n	8004f82 <_printf_i+0x172>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f023 0320 	bic.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	e7f6      	b.n	8004fa6 <_printf_i+0x196>
 8004fb8:	4616      	mov	r6, r2
 8004fba:	e7bd      	b.n	8004f38 <_printf_i+0x128>
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	6961      	ldr	r1, [r4, #20]
 8004fc2:	1d18      	adds	r0, r3, #4
 8004fc4:	6030      	str	r0, [r6, #0]
 8004fc6:	062e      	lsls	r6, r5, #24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0x1c0>
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0x1c6>
 8004fd0:	0668      	lsls	r0, r5, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0x1bc>
 8004fd4:	8019      	strh	r1, [r3, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	4616      	mov	r6, r2
 8004fdc:	e7bc      	b.n	8004f58 <_printf_i+0x148>
 8004fde:	6833      	ldr	r3, [r6, #0]
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	6032      	str	r2, [r6, #0]
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb f8f0 	bl	80001d0 <memchr>
 8004ff0:	b108      	cbz	r0, 8004ff6 <_printf_i+0x1e6>
 8004ff2:	1b80      	subs	r0, r0, r6
 8004ff4:	6060      	str	r0, [r4, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005000:	e7aa      	b.n	8004f58 <_printf_i+0x148>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	4632      	mov	r2, r6
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	47d0      	blx	sl
 800500c:	3001      	adds	r0, #1
 800500e:	d0ad      	beq.n	8004f6c <_printf_i+0x15c>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	079b      	lsls	r3, r3, #30
 8005014:	d413      	bmi.n	800503e <_printf_i+0x22e>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	4298      	cmp	r0, r3
 800501c:	bfb8      	it	lt
 800501e:	4618      	movlt	r0, r3
 8005020:	e7a6      	b.n	8004f70 <_printf_i+0x160>
 8005022:	2301      	movs	r3, #1
 8005024:	4632      	mov	r2, r6
 8005026:	4649      	mov	r1, r9
 8005028:	4640      	mov	r0, r8
 800502a:	47d0      	blx	sl
 800502c:	3001      	adds	r0, #1
 800502e:	d09d      	beq.n	8004f6c <_printf_i+0x15c>
 8005030:	3501      	adds	r5, #1
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	9903      	ldr	r1, [sp, #12]
 8005036:	1a5b      	subs	r3, r3, r1
 8005038:	42ab      	cmp	r3, r5
 800503a:	dcf2      	bgt.n	8005022 <_printf_i+0x212>
 800503c:	e7eb      	b.n	8005016 <_printf_i+0x206>
 800503e:	2500      	movs	r5, #0
 8005040:	f104 0619 	add.w	r6, r4, #25
 8005044:	e7f5      	b.n	8005032 <_printf_i+0x222>
 8005046:	bf00      	nop
 8005048:	08007576 	.word	0x08007576
 800504c:	08007587 	.word	0x08007587

08005050 <std>:
 8005050:	2300      	movs	r3, #0
 8005052:	b510      	push	{r4, lr}
 8005054:	4604      	mov	r4, r0
 8005056:	e9c0 3300 	strd	r3, r3, [r0]
 800505a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800505e:	6083      	str	r3, [r0, #8]
 8005060:	8181      	strh	r1, [r0, #12]
 8005062:	6643      	str	r3, [r0, #100]	@ 0x64
 8005064:	81c2      	strh	r2, [r0, #14]
 8005066:	6183      	str	r3, [r0, #24]
 8005068:	4619      	mov	r1, r3
 800506a:	2208      	movs	r2, #8
 800506c:	305c      	adds	r0, #92	@ 0x5c
 800506e:	f000 f914 	bl	800529a <memset>
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <std+0x58>)
 8005074:	6263      	str	r3, [r4, #36]	@ 0x24
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <std+0x5c>)
 8005078:	62a3      	str	r3, [r4, #40]	@ 0x28
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <std+0x60>)
 800507c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <std+0x64>)
 8005080:	6323      	str	r3, [r4, #48]	@ 0x30
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <std+0x68>)
 8005084:	6224      	str	r4, [r4, #32]
 8005086:	429c      	cmp	r4, r3
 8005088:	d006      	beq.n	8005098 <std+0x48>
 800508a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800508e:	4294      	cmp	r4, r2
 8005090:	d002      	beq.n	8005098 <std+0x48>
 8005092:	33d0      	adds	r3, #208	@ 0xd0
 8005094:	429c      	cmp	r4, r3
 8005096:	d105      	bne.n	80050a4 <std+0x54>
 8005098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a0:	f000 b978 	b.w	8005394 <__retarget_lock_init_recursive>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	bf00      	nop
 80050a8:	08005215 	.word	0x08005215
 80050ac:	08005237 	.word	0x08005237
 80050b0:	0800526f 	.word	0x0800526f
 80050b4:	08005293 	.word	0x08005293
 80050b8:	20000388 	.word	0x20000388

080050bc <stdio_exit_handler>:
 80050bc:	4a02      	ldr	r2, [pc, #8]	@ (80050c8 <stdio_exit_handler+0xc>)
 80050be:	4903      	ldr	r1, [pc, #12]	@ (80050cc <stdio_exit_handler+0x10>)
 80050c0:	4803      	ldr	r0, [pc, #12]	@ (80050d0 <stdio_exit_handler+0x14>)
 80050c2:	f000 b869 	b.w	8005198 <_fwalk_sglue>
 80050c6:	bf00      	nop
 80050c8:	2000001c 	.word	0x2000001c
 80050cc:	08006cf5 	.word	0x08006cf5
 80050d0:	2000002c 	.word	0x2000002c

080050d4 <cleanup_stdio>:
 80050d4:	6841      	ldr	r1, [r0, #4]
 80050d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <cleanup_stdio+0x34>)
 80050d8:	4299      	cmp	r1, r3
 80050da:	b510      	push	{r4, lr}
 80050dc:	4604      	mov	r4, r0
 80050de:	d001      	beq.n	80050e4 <cleanup_stdio+0x10>
 80050e0:	f001 fe08 	bl	8006cf4 <_fflush_r>
 80050e4:	68a1      	ldr	r1, [r4, #8]
 80050e6:	4b09      	ldr	r3, [pc, #36]	@ (800510c <cleanup_stdio+0x38>)
 80050e8:	4299      	cmp	r1, r3
 80050ea:	d002      	beq.n	80050f2 <cleanup_stdio+0x1e>
 80050ec:	4620      	mov	r0, r4
 80050ee:	f001 fe01 	bl	8006cf4 <_fflush_r>
 80050f2:	68e1      	ldr	r1, [r4, #12]
 80050f4:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <cleanup_stdio+0x3c>)
 80050f6:	4299      	cmp	r1, r3
 80050f8:	d004      	beq.n	8005104 <cleanup_stdio+0x30>
 80050fa:	4620      	mov	r0, r4
 80050fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005100:	f001 bdf8 	b.w	8006cf4 <_fflush_r>
 8005104:	bd10      	pop	{r4, pc}
 8005106:	bf00      	nop
 8005108:	20000388 	.word	0x20000388
 800510c:	200003f0 	.word	0x200003f0
 8005110:	20000458 	.word	0x20000458

08005114 <global_stdio_init.part.0>:
 8005114:	b510      	push	{r4, lr}
 8005116:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <global_stdio_init.part.0+0x30>)
 8005118:	4c0b      	ldr	r4, [pc, #44]	@ (8005148 <global_stdio_init.part.0+0x34>)
 800511a:	4a0c      	ldr	r2, [pc, #48]	@ (800514c <global_stdio_init.part.0+0x38>)
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	4620      	mov	r0, r4
 8005120:	2200      	movs	r2, #0
 8005122:	2104      	movs	r1, #4
 8005124:	f7ff ff94 	bl	8005050 <std>
 8005128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800512c:	2201      	movs	r2, #1
 800512e:	2109      	movs	r1, #9
 8005130:	f7ff ff8e 	bl	8005050 <std>
 8005134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005138:	2202      	movs	r2, #2
 800513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800513e:	2112      	movs	r1, #18
 8005140:	f7ff bf86 	b.w	8005050 <std>
 8005144:	200004c0 	.word	0x200004c0
 8005148:	20000388 	.word	0x20000388
 800514c:	080050bd 	.word	0x080050bd

08005150 <__sfp_lock_acquire>:
 8005150:	4801      	ldr	r0, [pc, #4]	@ (8005158 <__sfp_lock_acquire+0x8>)
 8005152:	f000 b920 	b.w	8005396 <__retarget_lock_acquire_recursive>
 8005156:	bf00      	nop
 8005158:	200004c9 	.word	0x200004c9

0800515c <__sfp_lock_release>:
 800515c:	4801      	ldr	r0, [pc, #4]	@ (8005164 <__sfp_lock_release+0x8>)
 800515e:	f000 b91b 	b.w	8005398 <__retarget_lock_release_recursive>
 8005162:	bf00      	nop
 8005164:	200004c9 	.word	0x200004c9

08005168 <__sinit>:
 8005168:	b510      	push	{r4, lr}
 800516a:	4604      	mov	r4, r0
 800516c:	f7ff fff0 	bl	8005150 <__sfp_lock_acquire>
 8005170:	6a23      	ldr	r3, [r4, #32]
 8005172:	b11b      	cbz	r3, 800517c <__sinit+0x14>
 8005174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005178:	f7ff bff0 	b.w	800515c <__sfp_lock_release>
 800517c:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <__sinit+0x28>)
 800517e:	6223      	str	r3, [r4, #32]
 8005180:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <__sinit+0x2c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f5      	bne.n	8005174 <__sinit+0xc>
 8005188:	f7ff ffc4 	bl	8005114 <global_stdio_init.part.0>
 800518c:	e7f2      	b.n	8005174 <__sinit+0xc>
 800518e:	bf00      	nop
 8005190:	080050d5 	.word	0x080050d5
 8005194:	200004c0 	.word	0x200004c0

08005198 <_fwalk_sglue>:
 8005198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800519c:	4607      	mov	r7, r0
 800519e:	4688      	mov	r8, r1
 80051a0:	4614      	mov	r4, r2
 80051a2:	2600      	movs	r6, #0
 80051a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a8:	f1b9 0901 	subs.w	r9, r9, #1
 80051ac:	d505      	bpl.n	80051ba <_fwalk_sglue+0x22>
 80051ae:	6824      	ldr	r4, [r4, #0]
 80051b0:	2c00      	cmp	r4, #0
 80051b2:	d1f7      	bne.n	80051a4 <_fwalk_sglue+0xc>
 80051b4:	4630      	mov	r0, r6
 80051b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ba:	89ab      	ldrh	r3, [r5, #12]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d907      	bls.n	80051d0 <_fwalk_sglue+0x38>
 80051c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051c4:	3301      	adds	r3, #1
 80051c6:	d003      	beq.n	80051d0 <_fwalk_sglue+0x38>
 80051c8:	4629      	mov	r1, r5
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c0      	blx	r8
 80051ce:	4306      	orrs	r6, r0
 80051d0:	3568      	adds	r5, #104	@ 0x68
 80051d2:	e7e9      	b.n	80051a8 <_fwalk_sglue+0x10>

080051d4 <siprintf>:
 80051d4:	b40e      	push	{r1, r2, r3}
 80051d6:	b500      	push	{lr}
 80051d8:	b09c      	sub	sp, #112	@ 0x70
 80051da:	ab1d      	add	r3, sp, #116	@ 0x74
 80051dc:	9002      	str	r0, [sp, #8]
 80051de:	9006      	str	r0, [sp, #24]
 80051e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051e4:	4809      	ldr	r0, [pc, #36]	@ (800520c <siprintf+0x38>)
 80051e6:	9107      	str	r1, [sp, #28]
 80051e8:	9104      	str	r1, [sp, #16]
 80051ea:	4909      	ldr	r1, [pc, #36]	@ (8005210 <siprintf+0x3c>)
 80051ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f0:	9105      	str	r1, [sp, #20]
 80051f2:	6800      	ldr	r0, [r0, #0]
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	a902      	add	r1, sp, #8
 80051f8:	f001 fbfc 	bl	80069f4 <_svfiprintf_r>
 80051fc:	9b02      	ldr	r3, [sp, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	b01c      	add	sp, #112	@ 0x70
 8005204:	f85d eb04 	ldr.w	lr, [sp], #4
 8005208:	b003      	add	sp, #12
 800520a:	4770      	bx	lr
 800520c:	20000028 	.word	0x20000028
 8005210:	ffff0208 	.word	0xffff0208

08005214 <__sread>:
 8005214:	b510      	push	{r4, lr}
 8005216:	460c      	mov	r4, r1
 8005218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521c:	f000 f86c 	bl	80052f8 <_read_r>
 8005220:	2800      	cmp	r0, #0
 8005222:	bfab      	itete	ge
 8005224:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005226:	89a3      	ldrhlt	r3, [r4, #12]
 8005228:	181b      	addge	r3, r3, r0
 800522a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800522e:	bfac      	ite	ge
 8005230:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005232:	81a3      	strhlt	r3, [r4, #12]
 8005234:	bd10      	pop	{r4, pc}

08005236 <__swrite>:
 8005236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523a:	461f      	mov	r7, r3
 800523c:	898b      	ldrh	r3, [r1, #12]
 800523e:	05db      	lsls	r3, r3, #23
 8005240:	4605      	mov	r5, r0
 8005242:	460c      	mov	r4, r1
 8005244:	4616      	mov	r6, r2
 8005246:	d505      	bpl.n	8005254 <__swrite+0x1e>
 8005248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524c:	2302      	movs	r3, #2
 800524e:	2200      	movs	r2, #0
 8005250:	f000 f840 	bl	80052d4 <_lseek_r>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800525a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	4632      	mov	r2, r6
 8005262:	463b      	mov	r3, r7
 8005264:	4628      	mov	r0, r5
 8005266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800526a:	f000 b857 	b.w	800531c <_write_r>

0800526e <__sseek>:
 800526e:	b510      	push	{r4, lr}
 8005270:	460c      	mov	r4, r1
 8005272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005276:	f000 f82d 	bl	80052d4 <_lseek_r>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	bf15      	itete	ne
 8005280:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005282:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005286:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800528a:	81a3      	strheq	r3, [r4, #12]
 800528c:	bf18      	it	ne
 800528e:	81a3      	strhne	r3, [r4, #12]
 8005290:	bd10      	pop	{r4, pc}

08005292 <__sclose>:
 8005292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005296:	f000 b80d 	b.w	80052b4 <_close_r>

0800529a <memset>:
 800529a:	4402      	add	r2, r0
 800529c:	4603      	mov	r3, r0
 800529e:	4293      	cmp	r3, r2
 80052a0:	d100      	bne.n	80052a4 <memset+0xa>
 80052a2:	4770      	bx	lr
 80052a4:	f803 1b01 	strb.w	r1, [r3], #1
 80052a8:	e7f9      	b.n	800529e <memset+0x4>
	...

080052ac <_localeconv_r>:
 80052ac:	4800      	ldr	r0, [pc, #0]	@ (80052b0 <_localeconv_r+0x4>)
 80052ae:	4770      	bx	lr
 80052b0:	20000168 	.word	0x20000168

080052b4 <_close_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d06      	ldr	r5, [pc, #24]	@ (80052d0 <_close_r+0x1c>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fc fe8d 	bl	8001fde <_close>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_close_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_close_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	200004c4 	.word	0x200004c4

080052d4 <_lseek_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	@ (80052f4 <_lseek_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fc fea2 	bl	800202c <_lseek>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_lseek_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_lseek_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	200004c4 	.word	0x200004c4

080052f8 <_read_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d07      	ldr	r5, [pc, #28]	@ (8005318 <_read_r+0x20>)
 80052fc:	4604      	mov	r4, r0
 80052fe:	4608      	mov	r0, r1
 8005300:	4611      	mov	r1, r2
 8005302:	2200      	movs	r2, #0
 8005304:	602a      	str	r2, [r5, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f7fc fe30 	bl	8001f6c <_read>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_read_r+0x1e>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_read_r+0x1e>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	200004c4 	.word	0x200004c4

0800531c <_write_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d07      	ldr	r5, [pc, #28]	@ (800533c <_write_r+0x20>)
 8005320:	4604      	mov	r4, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	602a      	str	r2, [r5, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fc fe3b 	bl	8001fa6 <_write>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_write_r+0x1e>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_write_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	200004c4 	.word	0x200004c4

08005340 <__errno>:
 8005340:	4b01      	ldr	r3, [pc, #4]	@ (8005348 <__errno+0x8>)
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000028 	.word	0x20000028

0800534c <__libc_init_array>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4d0d      	ldr	r5, [pc, #52]	@ (8005384 <__libc_init_array+0x38>)
 8005350:	4c0d      	ldr	r4, [pc, #52]	@ (8005388 <__libc_init_array+0x3c>)
 8005352:	1b64      	subs	r4, r4, r5
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	2600      	movs	r6, #0
 8005358:	42a6      	cmp	r6, r4
 800535a:	d109      	bne.n	8005370 <__libc_init_array+0x24>
 800535c:	4d0b      	ldr	r5, [pc, #44]	@ (800538c <__libc_init_array+0x40>)
 800535e:	4c0c      	ldr	r4, [pc, #48]	@ (8005390 <__libc_init_array+0x44>)
 8005360:	f002 f866 	bl	8007430 <_init>
 8005364:	1b64      	subs	r4, r4, r5
 8005366:	10a4      	asrs	r4, r4, #2
 8005368:	2600      	movs	r6, #0
 800536a:	42a6      	cmp	r6, r4
 800536c:	d105      	bne.n	800537a <__libc_init_array+0x2e>
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	f855 3b04 	ldr.w	r3, [r5], #4
 8005374:	4798      	blx	r3
 8005376:	3601      	adds	r6, #1
 8005378:	e7ee      	b.n	8005358 <__libc_init_array+0xc>
 800537a:	f855 3b04 	ldr.w	r3, [r5], #4
 800537e:	4798      	blx	r3
 8005380:	3601      	adds	r6, #1
 8005382:	e7f2      	b.n	800536a <__libc_init_array+0x1e>
 8005384:	080078e0 	.word	0x080078e0
 8005388:	080078e0 	.word	0x080078e0
 800538c:	080078e0 	.word	0x080078e0
 8005390:	080078e4 	.word	0x080078e4

08005394 <__retarget_lock_init_recursive>:
 8005394:	4770      	bx	lr

08005396 <__retarget_lock_acquire_recursive>:
 8005396:	4770      	bx	lr

08005398 <__retarget_lock_release_recursive>:
 8005398:	4770      	bx	lr

0800539a <quorem>:
 800539a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539e:	6903      	ldr	r3, [r0, #16]
 80053a0:	690c      	ldr	r4, [r1, #16]
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	4607      	mov	r7, r0
 80053a6:	db7e      	blt.n	80054a6 <quorem+0x10c>
 80053a8:	3c01      	subs	r4, #1
 80053aa:	f101 0814 	add.w	r8, r1, #20
 80053ae:	00a3      	lsls	r3, r4, #2
 80053b0:	f100 0514 	add.w	r5, r0, #20
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053c4:	3301      	adds	r3, #1
 80053c6:	429a      	cmp	r2, r3
 80053c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80053d0:	d32e      	bcc.n	8005430 <quorem+0x96>
 80053d2:	f04f 0a00 	mov.w	sl, #0
 80053d6:	46c4      	mov	ip, r8
 80053d8:	46ae      	mov	lr, r5
 80053da:	46d3      	mov	fp, sl
 80053dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80053e0:	b298      	uxth	r0, r3
 80053e2:	fb06 a000 	mla	r0, r6, r0, sl
 80053e6:	0c02      	lsrs	r2, r0, #16
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	fb06 2303 	mla	r3, r6, r3, r2
 80053ee:	f8de 2000 	ldr.w	r2, [lr]
 80053f2:	b280      	uxth	r0, r0
 80053f4:	b292      	uxth	r2, r2
 80053f6:	1a12      	subs	r2, r2, r0
 80053f8:	445a      	add	r2, fp
 80053fa:	f8de 0000 	ldr.w	r0, [lr]
 80053fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005402:	b29b      	uxth	r3, r3
 8005404:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005408:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800540c:	b292      	uxth	r2, r2
 800540e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005412:	45e1      	cmp	r9, ip
 8005414:	f84e 2b04 	str.w	r2, [lr], #4
 8005418:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800541c:	d2de      	bcs.n	80053dc <quorem+0x42>
 800541e:	9b00      	ldr	r3, [sp, #0]
 8005420:	58eb      	ldr	r3, [r5, r3]
 8005422:	b92b      	cbnz	r3, 8005430 <quorem+0x96>
 8005424:	9b01      	ldr	r3, [sp, #4]
 8005426:	3b04      	subs	r3, #4
 8005428:	429d      	cmp	r5, r3
 800542a:	461a      	mov	r2, r3
 800542c:	d32f      	bcc.n	800548e <quorem+0xf4>
 800542e:	613c      	str	r4, [r7, #16]
 8005430:	4638      	mov	r0, r7
 8005432:	f001 f97b 	bl	800672c <__mcmp>
 8005436:	2800      	cmp	r0, #0
 8005438:	db25      	blt.n	8005486 <quorem+0xec>
 800543a:	4629      	mov	r1, r5
 800543c:	2000      	movs	r0, #0
 800543e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005442:	f8d1 c000 	ldr.w	ip, [r1]
 8005446:	fa1f fe82 	uxth.w	lr, r2
 800544a:	fa1f f38c 	uxth.w	r3, ip
 800544e:	eba3 030e 	sub.w	r3, r3, lr
 8005452:	4403      	add	r3, r0
 8005454:	0c12      	lsrs	r2, r2, #16
 8005456:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800545a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800545e:	b29b      	uxth	r3, r3
 8005460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005464:	45c1      	cmp	r9, r8
 8005466:	f841 3b04 	str.w	r3, [r1], #4
 800546a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800546e:	d2e6      	bcs.n	800543e <quorem+0xa4>
 8005470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005474:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005478:	b922      	cbnz	r2, 8005484 <quorem+0xea>
 800547a:	3b04      	subs	r3, #4
 800547c:	429d      	cmp	r5, r3
 800547e:	461a      	mov	r2, r3
 8005480:	d30b      	bcc.n	800549a <quorem+0x100>
 8005482:	613c      	str	r4, [r7, #16]
 8005484:	3601      	adds	r6, #1
 8005486:	4630      	mov	r0, r6
 8005488:	b003      	add	sp, #12
 800548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	3b04      	subs	r3, #4
 8005492:	2a00      	cmp	r2, #0
 8005494:	d1cb      	bne.n	800542e <quorem+0x94>
 8005496:	3c01      	subs	r4, #1
 8005498:	e7c6      	b.n	8005428 <quorem+0x8e>
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	3b04      	subs	r3, #4
 800549e:	2a00      	cmp	r2, #0
 80054a0:	d1ef      	bne.n	8005482 <quorem+0xe8>
 80054a2:	3c01      	subs	r4, #1
 80054a4:	e7ea      	b.n	800547c <quorem+0xe2>
 80054a6:	2000      	movs	r0, #0
 80054a8:	e7ee      	b.n	8005488 <quorem+0xee>
 80054aa:	0000      	movs	r0, r0
 80054ac:	0000      	movs	r0, r0
	...

080054b0 <_dtoa_r>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	69c7      	ldr	r7, [r0, #28]
 80054b6:	b099      	sub	sp, #100	@ 0x64
 80054b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80054bc:	ec55 4b10 	vmov	r4, r5, d0
 80054c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80054c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80054c4:	4683      	mov	fp, r0
 80054c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80054c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054ca:	b97f      	cbnz	r7, 80054ec <_dtoa_r+0x3c>
 80054cc:	2010      	movs	r0, #16
 80054ce:	f000 fdfd 	bl	80060cc <malloc>
 80054d2:	4602      	mov	r2, r0
 80054d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80054d8:	b920      	cbnz	r0, 80054e4 <_dtoa_r+0x34>
 80054da:	4ba7      	ldr	r3, [pc, #668]	@ (8005778 <_dtoa_r+0x2c8>)
 80054dc:	21ef      	movs	r1, #239	@ 0xef
 80054de:	48a7      	ldr	r0, [pc, #668]	@ (800577c <_dtoa_r+0x2cc>)
 80054e0:	f001 fc68 	bl	8006db4 <__assert_func>
 80054e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80054e8:	6007      	str	r7, [r0, #0]
 80054ea:	60c7      	str	r7, [r0, #12]
 80054ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	b159      	cbz	r1, 800550c <_dtoa_r+0x5c>
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	604a      	str	r2, [r1, #4]
 80054f8:	2301      	movs	r3, #1
 80054fa:	4093      	lsls	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
 80054fe:	4658      	mov	r0, fp
 8005500:	f000 feda 	bl	80062b8 <_Bfree>
 8005504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	1e2b      	subs	r3, r5, #0
 800550e:	bfb9      	ittee	lt
 8005510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005514:	9303      	strlt	r3, [sp, #12]
 8005516:	2300      	movge	r3, #0
 8005518:	6033      	strge	r3, [r6, #0]
 800551a:	9f03      	ldr	r7, [sp, #12]
 800551c:	4b98      	ldr	r3, [pc, #608]	@ (8005780 <_dtoa_r+0x2d0>)
 800551e:	bfbc      	itt	lt
 8005520:	2201      	movlt	r2, #1
 8005522:	6032      	strlt	r2, [r6, #0]
 8005524:	43bb      	bics	r3, r7
 8005526:	d112      	bne.n	800554e <_dtoa_r+0x9e>
 8005528:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800552a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005534:	4323      	orrs	r3, r4
 8005536:	f000 854d 	beq.w	8005fd4 <_dtoa_r+0xb24>
 800553a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800553c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005794 <_dtoa_r+0x2e4>
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 854f 	beq.w	8005fe4 <_dtoa_r+0xb34>
 8005546:	f10a 0303 	add.w	r3, sl, #3
 800554a:	f000 bd49 	b.w	8005fe0 <_dtoa_r+0xb30>
 800554e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	ec51 0b17 	vmov	r0, r1, d7
 8005558:	2300      	movs	r3, #0
 800555a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800555e:	f7fb fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005562:	4680      	mov	r8, r0
 8005564:	b158      	cbz	r0, 800557e <_dtoa_r+0xce>
 8005566:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005568:	2301      	movs	r3, #1
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800556e:	b113      	cbz	r3, 8005576 <_dtoa_r+0xc6>
 8005570:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005572:	4b84      	ldr	r3, [pc, #528]	@ (8005784 <_dtoa_r+0x2d4>)
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005798 <_dtoa_r+0x2e8>
 800557a:	f000 bd33 	b.w	8005fe4 <_dtoa_r+0xb34>
 800557e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005582:	aa16      	add	r2, sp, #88	@ 0x58
 8005584:	a917      	add	r1, sp, #92	@ 0x5c
 8005586:	4658      	mov	r0, fp
 8005588:	f001 f980 	bl	800688c <__d2b>
 800558c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005590:	4681      	mov	r9, r0
 8005592:	2e00      	cmp	r6, #0
 8005594:	d077      	beq.n	8005686 <_dtoa_r+0x1d6>
 8005596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005598:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800559c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80055a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80055ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80055b0:	4619      	mov	r1, r3
 80055b2:	2200      	movs	r2, #0
 80055b4:	4b74      	ldr	r3, [pc, #464]	@ (8005788 <_dtoa_r+0x2d8>)
 80055b6:	f7fa fe67 	bl	8000288 <__aeabi_dsub>
 80055ba:	a369      	add	r3, pc, #420	@ (adr r3, 8005760 <_dtoa_r+0x2b0>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fb f81a 	bl	80005f8 <__aeabi_dmul>
 80055c4:	a368      	add	r3, pc, #416	@ (adr r3, 8005768 <_dtoa_r+0x2b8>)
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f7fa fe5f 	bl	800028c <__adddf3>
 80055ce:	4604      	mov	r4, r0
 80055d0:	4630      	mov	r0, r6
 80055d2:	460d      	mov	r5, r1
 80055d4:	f7fa ffa6 	bl	8000524 <__aeabi_i2d>
 80055d8:	a365      	add	r3, pc, #404	@ (adr r3, 8005770 <_dtoa_r+0x2c0>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fb f80b 	bl	80005f8 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4620      	mov	r0, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7fa fe4f 	bl	800028c <__adddf3>
 80055ee:	4604      	mov	r4, r0
 80055f0:	460d      	mov	r5, r1
 80055f2:	f7fb fab1 	bl	8000b58 <__aeabi_d2iz>
 80055f6:	2200      	movs	r2, #0
 80055f8:	4607      	mov	r7, r0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4620      	mov	r0, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fb fa6c 	bl	8000adc <__aeabi_dcmplt>
 8005604:	b140      	cbz	r0, 8005618 <_dtoa_r+0x168>
 8005606:	4638      	mov	r0, r7
 8005608:	f7fa ff8c 	bl	8000524 <__aeabi_i2d>
 800560c:	4622      	mov	r2, r4
 800560e:	462b      	mov	r3, r5
 8005610:	f7fb fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005614:	b900      	cbnz	r0, 8005618 <_dtoa_r+0x168>
 8005616:	3f01      	subs	r7, #1
 8005618:	2f16      	cmp	r7, #22
 800561a:	d851      	bhi.n	80056c0 <_dtoa_r+0x210>
 800561c:	4b5b      	ldr	r3, [pc, #364]	@ (800578c <_dtoa_r+0x2dc>)
 800561e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800562a:	f7fb fa57 	bl	8000adc <__aeabi_dcmplt>
 800562e:	2800      	cmp	r0, #0
 8005630:	d048      	beq.n	80056c4 <_dtoa_r+0x214>
 8005632:	3f01      	subs	r7, #1
 8005634:	2300      	movs	r3, #0
 8005636:	9312      	str	r3, [sp, #72]	@ 0x48
 8005638:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800563a:	1b9b      	subs	r3, r3, r6
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	bf44      	itt	mi
 8005640:	f1c3 0801 	rsbmi	r8, r3, #1
 8005644:	2300      	movmi	r3, #0
 8005646:	9208      	str	r2, [sp, #32]
 8005648:	bf54      	ite	pl
 800564a:	f04f 0800 	movpl.w	r8, #0
 800564e:	9308      	strmi	r3, [sp, #32]
 8005650:	2f00      	cmp	r7, #0
 8005652:	db39      	blt.n	80056c8 <_dtoa_r+0x218>
 8005654:	9b08      	ldr	r3, [sp, #32]
 8005656:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005658:	443b      	add	r3, r7
 800565a:	9308      	str	r3, [sp, #32]
 800565c:	2300      	movs	r3, #0
 800565e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005662:	2b09      	cmp	r3, #9
 8005664:	d864      	bhi.n	8005730 <_dtoa_r+0x280>
 8005666:	2b05      	cmp	r3, #5
 8005668:	bfc4      	itt	gt
 800566a:	3b04      	subgt	r3, #4
 800566c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800566e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005670:	f1a3 0302 	sub.w	r3, r3, #2
 8005674:	bfcc      	ite	gt
 8005676:	2400      	movgt	r4, #0
 8005678:	2401      	movle	r4, #1
 800567a:	2b03      	cmp	r3, #3
 800567c:	d863      	bhi.n	8005746 <_dtoa_r+0x296>
 800567e:	e8df f003 	tbb	[pc, r3]
 8005682:	372a      	.short	0x372a
 8005684:	5535      	.short	0x5535
 8005686:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800568a:	441e      	add	r6, r3
 800568c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005690:	2b20      	cmp	r3, #32
 8005692:	bfc1      	itttt	gt
 8005694:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005698:	409f      	lslgt	r7, r3
 800569a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800569e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80056a2:	bfd6      	itet	le
 80056a4:	f1c3 0320 	rsble	r3, r3, #32
 80056a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80056ac:	fa04 f003 	lslle.w	r0, r4, r3
 80056b0:	f7fa ff28 	bl	8000504 <__aeabi_ui2d>
 80056b4:	2201      	movs	r2, #1
 80056b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80056ba:	3e01      	subs	r6, #1
 80056bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80056be:	e777      	b.n	80055b0 <_dtoa_r+0x100>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e7b8      	b.n	8005636 <_dtoa_r+0x186>
 80056c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80056c6:	e7b7      	b.n	8005638 <_dtoa_r+0x188>
 80056c8:	427b      	negs	r3, r7
 80056ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80056cc:	2300      	movs	r3, #0
 80056ce:	eba8 0807 	sub.w	r8, r8, r7
 80056d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80056d4:	e7c4      	b.n	8005660 <_dtoa_r+0x1b0>
 80056d6:	2300      	movs	r3, #0
 80056d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dc35      	bgt.n	800574c <_dtoa_r+0x29c>
 80056e0:	2301      	movs	r3, #1
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	9307      	str	r3, [sp, #28]
 80056e6:	461a      	mov	r2, r3
 80056e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80056ea:	e00b      	b.n	8005704 <_dtoa_r+0x254>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e7f3      	b.n	80056d8 <_dtoa_r+0x228>
 80056f0:	2300      	movs	r3, #0
 80056f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	bfb8      	it	lt
 8005702:	2301      	movlt	r3, #1
 8005704:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005708:	2100      	movs	r1, #0
 800570a:	2204      	movs	r2, #4
 800570c:	f102 0514 	add.w	r5, r2, #20
 8005710:	429d      	cmp	r5, r3
 8005712:	d91f      	bls.n	8005754 <_dtoa_r+0x2a4>
 8005714:	6041      	str	r1, [r0, #4]
 8005716:	4658      	mov	r0, fp
 8005718:	f000 fd8e 	bl	8006238 <_Balloc>
 800571c:	4682      	mov	sl, r0
 800571e:	2800      	cmp	r0, #0
 8005720:	d13c      	bne.n	800579c <_dtoa_r+0x2ec>
 8005722:	4b1b      	ldr	r3, [pc, #108]	@ (8005790 <_dtoa_r+0x2e0>)
 8005724:	4602      	mov	r2, r0
 8005726:	f240 11af 	movw	r1, #431	@ 0x1af
 800572a:	e6d8      	b.n	80054de <_dtoa_r+0x2e>
 800572c:	2301      	movs	r3, #1
 800572e:	e7e0      	b.n	80056f2 <_dtoa_r+0x242>
 8005730:	2401      	movs	r4, #1
 8005732:	2300      	movs	r3, #0
 8005734:	9309      	str	r3, [sp, #36]	@ 0x24
 8005736:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	2200      	movs	r2, #0
 8005742:	2312      	movs	r3, #18
 8005744:	e7d0      	b.n	80056e8 <_dtoa_r+0x238>
 8005746:	2301      	movs	r3, #1
 8005748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800574a:	e7f5      	b.n	8005738 <_dtoa_r+0x288>
 800574c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	9307      	str	r3, [sp, #28]
 8005752:	e7d7      	b.n	8005704 <_dtoa_r+0x254>
 8005754:	3101      	adds	r1, #1
 8005756:	0052      	lsls	r2, r2, #1
 8005758:	e7d8      	b.n	800570c <_dtoa_r+0x25c>
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w
 8005760:	636f4361 	.word	0x636f4361
 8005764:	3fd287a7 	.word	0x3fd287a7
 8005768:	8b60c8b3 	.word	0x8b60c8b3
 800576c:	3fc68a28 	.word	0x3fc68a28
 8005770:	509f79fb 	.word	0x509f79fb
 8005774:	3fd34413 	.word	0x3fd34413
 8005778:	080075a5 	.word	0x080075a5
 800577c:	080075bc 	.word	0x080075bc
 8005780:	7ff00000 	.word	0x7ff00000
 8005784:	08007575 	.word	0x08007575
 8005788:	3ff80000 	.word	0x3ff80000
 800578c:	080076b8 	.word	0x080076b8
 8005790:	08007614 	.word	0x08007614
 8005794:	080075a1 	.word	0x080075a1
 8005798:	08007574 	.word	0x08007574
 800579c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057a0:	6018      	str	r0, [r3, #0]
 80057a2:	9b07      	ldr	r3, [sp, #28]
 80057a4:	2b0e      	cmp	r3, #14
 80057a6:	f200 80a4 	bhi.w	80058f2 <_dtoa_r+0x442>
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	f000 80a1 	beq.w	80058f2 <_dtoa_r+0x442>
 80057b0:	2f00      	cmp	r7, #0
 80057b2:	dd33      	ble.n	800581c <_dtoa_r+0x36c>
 80057b4:	4bad      	ldr	r3, [pc, #692]	@ (8005a6c <_dtoa_r+0x5bc>)
 80057b6:	f007 020f 	and.w	r2, r7, #15
 80057ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057be:	ed93 7b00 	vldr	d7, [r3]
 80057c2:	05f8      	lsls	r0, r7, #23
 80057c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80057c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80057cc:	d516      	bpl.n	80057fc <_dtoa_r+0x34c>
 80057ce:	4ba8      	ldr	r3, [pc, #672]	@ (8005a70 <_dtoa_r+0x5c0>)
 80057d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057d8:	f7fb f838 	bl	800084c <__aeabi_ddiv>
 80057dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e0:	f004 040f 	and.w	r4, r4, #15
 80057e4:	2603      	movs	r6, #3
 80057e6:	4da2      	ldr	r5, [pc, #648]	@ (8005a70 <_dtoa_r+0x5c0>)
 80057e8:	b954      	cbnz	r4, 8005800 <_dtoa_r+0x350>
 80057ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f2:	f7fb f82b 	bl	800084c <__aeabi_ddiv>
 80057f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057fa:	e028      	b.n	800584e <_dtoa_r+0x39e>
 80057fc:	2602      	movs	r6, #2
 80057fe:	e7f2      	b.n	80057e6 <_dtoa_r+0x336>
 8005800:	07e1      	lsls	r1, r4, #31
 8005802:	d508      	bpl.n	8005816 <_dtoa_r+0x366>
 8005804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800580c:	f7fa fef4 	bl	80005f8 <__aeabi_dmul>
 8005810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005814:	3601      	adds	r6, #1
 8005816:	1064      	asrs	r4, r4, #1
 8005818:	3508      	adds	r5, #8
 800581a:	e7e5      	b.n	80057e8 <_dtoa_r+0x338>
 800581c:	f000 80d2 	beq.w	80059c4 <_dtoa_r+0x514>
 8005820:	427c      	negs	r4, r7
 8005822:	4b92      	ldr	r3, [pc, #584]	@ (8005a6c <_dtoa_r+0x5bc>)
 8005824:	4d92      	ldr	r5, [pc, #584]	@ (8005a70 <_dtoa_r+0x5c0>)
 8005826:	f004 020f 	and.w	r2, r4, #15
 800582a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005836:	f7fa fedf 	bl	80005f8 <__aeabi_dmul>
 800583a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800583e:	1124      	asrs	r4, r4, #4
 8005840:	2300      	movs	r3, #0
 8005842:	2602      	movs	r6, #2
 8005844:	2c00      	cmp	r4, #0
 8005846:	f040 80b2 	bne.w	80059ae <_dtoa_r+0x4fe>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1d3      	bne.n	80057f6 <_dtoa_r+0x346>
 800584e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005850:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80b7 	beq.w	80059c8 <_dtoa_r+0x518>
 800585a:	4b86      	ldr	r3, [pc, #536]	@ (8005a74 <_dtoa_r+0x5c4>)
 800585c:	2200      	movs	r2, #0
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fb f93b 	bl	8000adc <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	f000 80ae 	beq.w	80059c8 <_dtoa_r+0x518>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80aa 	beq.w	80059c8 <_dtoa_r+0x518>
 8005874:	9b00      	ldr	r3, [sp, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	dd37      	ble.n	80058ea <_dtoa_r+0x43a>
 800587a:	1e7b      	subs	r3, r7, #1
 800587c:	9304      	str	r3, [sp, #16]
 800587e:	4620      	mov	r0, r4
 8005880:	4b7d      	ldr	r3, [pc, #500]	@ (8005a78 <_dtoa_r+0x5c8>)
 8005882:	2200      	movs	r2, #0
 8005884:	4629      	mov	r1, r5
 8005886:	f7fa feb7 	bl	80005f8 <__aeabi_dmul>
 800588a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800588e:	9c00      	ldr	r4, [sp, #0]
 8005890:	3601      	adds	r6, #1
 8005892:	4630      	mov	r0, r6
 8005894:	f7fa fe46 	bl	8000524 <__aeabi_i2d>
 8005898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800589c:	f7fa feac 	bl	80005f8 <__aeabi_dmul>
 80058a0:	4b76      	ldr	r3, [pc, #472]	@ (8005a7c <_dtoa_r+0x5cc>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	f7fa fcf2 	bl	800028c <__adddf3>
 80058a8:	4605      	mov	r5, r0
 80058aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80058ae:	2c00      	cmp	r4, #0
 80058b0:	f040 808d 	bne.w	80059ce <_dtoa_r+0x51e>
 80058b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b8:	4b71      	ldr	r3, [pc, #452]	@ (8005a80 <_dtoa_r+0x5d0>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	f7fa fce4 	bl	8000288 <__aeabi_dsub>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4633      	mov	r3, r6
 80058cc:	f7fb f924 	bl	8000b18 <__aeabi_dcmpgt>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	f040 828b 	bne.w	8005dec <_dtoa_r+0x93c>
 80058d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058da:	462a      	mov	r2, r5
 80058dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80058e0:	f7fb f8fc 	bl	8000adc <__aeabi_dcmplt>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	f040 8128 	bne.w	8005b3a <_dtoa_r+0x68a>
 80058ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80058ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80058f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f2c0 815a 	blt.w	8005bae <_dtoa_r+0x6fe>
 80058fa:	2f0e      	cmp	r7, #14
 80058fc:	f300 8157 	bgt.w	8005bae <_dtoa_r+0x6fe>
 8005900:	4b5a      	ldr	r3, [pc, #360]	@ (8005a6c <_dtoa_r+0x5bc>)
 8005902:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005906:	ed93 7b00 	vldr	d7, [r3]
 800590a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	ed8d 7b00 	vstr	d7, [sp]
 8005912:	da03      	bge.n	800591c <_dtoa_r+0x46c>
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f340 8101 	ble.w	8005b1e <_dtoa_r+0x66e>
 800591c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005920:	4656      	mov	r6, sl
 8005922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	f7fa ff8f 	bl	800084c <__aeabi_ddiv>
 800592e:	f7fb f913 	bl	8000b58 <__aeabi_d2iz>
 8005932:	4680      	mov	r8, r0
 8005934:	f7fa fdf6 	bl	8000524 <__aeabi_i2d>
 8005938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800593c:	f7fa fe5c 	bl	80005f8 <__aeabi_dmul>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4620      	mov	r0, r4
 8005946:	4629      	mov	r1, r5
 8005948:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800594c:	f7fa fc9c 	bl	8000288 <__aeabi_dsub>
 8005950:	f806 4b01 	strb.w	r4, [r6], #1
 8005954:	9d07      	ldr	r5, [sp, #28]
 8005956:	eba6 040a 	sub.w	r4, r6, sl
 800595a:	42a5      	cmp	r5, r4
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	f040 8117 	bne.w	8005b92 <_dtoa_r+0x6e2>
 8005964:	f7fa fc92 	bl	800028c <__adddf3>
 8005968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	f7fb f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8005974:	2800      	cmp	r0, #0
 8005976:	f040 80f9 	bne.w	8005b6c <_dtoa_r+0x6bc>
 800597a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fb f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005986:	b118      	cbz	r0, 8005990 <_dtoa_r+0x4e0>
 8005988:	f018 0f01 	tst.w	r8, #1
 800598c:	f040 80ee 	bne.w	8005b6c <_dtoa_r+0x6bc>
 8005990:	4649      	mov	r1, r9
 8005992:	4658      	mov	r0, fp
 8005994:	f000 fc90 	bl	80062b8 <_Bfree>
 8005998:	2300      	movs	r3, #0
 800599a:	7033      	strb	r3, [r6, #0]
 800599c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800599e:	3701      	adds	r7, #1
 80059a0:	601f      	str	r7, [r3, #0]
 80059a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 831d 	beq.w	8005fe4 <_dtoa_r+0xb34>
 80059aa:	601e      	str	r6, [r3, #0]
 80059ac:	e31a      	b.n	8005fe4 <_dtoa_r+0xb34>
 80059ae:	07e2      	lsls	r2, r4, #31
 80059b0:	d505      	bpl.n	80059be <_dtoa_r+0x50e>
 80059b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059b6:	f7fa fe1f 	bl	80005f8 <__aeabi_dmul>
 80059ba:	3601      	adds	r6, #1
 80059bc:	2301      	movs	r3, #1
 80059be:	1064      	asrs	r4, r4, #1
 80059c0:	3508      	adds	r5, #8
 80059c2:	e73f      	b.n	8005844 <_dtoa_r+0x394>
 80059c4:	2602      	movs	r6, #2
 80059c6:	e742      	b.n	800584e <_dtoa_r+0x39e>
 80059c8:	9c07      	ldr	r4, [sp, #28]
 80059ca:	9704      	str	r7, [sp, #16]
 80059cc:	e761      	b.n	8005892 <_dtoa_r+0x3e2>
 80059ce:	4b27      	ldr	r3, [pc, #156]	@ (8005a6c <_dtoa_r+0x5bc>)
 80059d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059da:	4454      	add	r4, sl
 80059dc:	2900      	cmp	r1, #0
 80059de:	d053      	beq.n	8005a88 <_dtoa_r+0x5d8>
 80059e0:	4928      	ldr	r1, [pc, #160]	@ (8005a84 <_dtoa_r+0x5d4>)
 80059e2:	2000      	movs	r0, #0
 80059e4:	f7fa ff32 	bl	800084c <__aeabi_ddiv>
 80059e8:	4633      	mov	r3, r6
 80059ea:	462a      	mov	r2, r5
 80059ec:	f7fa fc4c 	bl	8000288 <__aeabi_dsub>
 80059f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059f4:	4656      	mov	r6, sl
 80059f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059fa:	f7fb f8ad 	bl	8000b58 <__aeabi_d2iz>
 80059fe:	4605      	mov	r5, r0
 8005a00:	f7fa fd90 	bl	8000524 <__aeabi_i2d>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a0c:	f7fa fc3c 	bl	8000288 <__aeabi_dsub>
 8005a10:	3530      	adds	r5, #48	@ 0x30
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a1a:	f806 5b01 	strb.w	r5, [r6], #1
 8005a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a22:	f7fb f85b 	bl	8000adc <__aeabi_dcmplt>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d171      	bne.n	8005b0e <_dtoa_r+0x65e>
 8005a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a2e:	4911      	ldr	r1, [pc, #68]	@ (8005a74 <_dtoa_r+0x5c4>)
 8005a30:	2000      	movs	r0, #0
 8005a32:	f7fa fc29 	bl	8000288 <__aeabi_dsub>
 8005a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a3a:	f7fb f84f 	bl	8000adc <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f040 8095 	bne.w	8005b6e <_dtoa_r+0x6be>
 8005a44:	42a6      	cmp	r6, r4
 8005a46:	f43f af50 	beq.w	80058ea <_dtoa_r+0x43a>
 8005a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <_dtoa_r+0x5c8>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	f7fa fdd1 	bl	80005f8 <__aeabi_dmul>
 8005a56:	4b08      	ldr	r3, [pc, #32]	@ (8005a78 <_dtoa_r+0x5c8>)
 8005a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a62:	f7fa fdc9 	bl	80005f8 <__aeabi_dmul>
 8005a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a6a:	e7c4      	b.n	80059f6 <_dtoa_r+0x546>
 8005a6c:	080076b8 	.word	0x080076b8
 8005a70:	08007690 	.word	0x08007690
 8005a74:	3ff00000 	.word	0x3ff00000
 8005a78:	40240000 	.word	0x40240000
 8005a7c:	401c0000 	.word	0x401c0000
 8005a80:	40140000 	.word	0x40140000
 8005a84:	3fe00000 	.word	0x3fe00000
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f7fa fdb4 	bl	80005f8 <__aeabi_dmul>
 8005a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a94:	9415      	str	r4, [sp, #84]	@ 0x54
 8005a96:	4656      	mov	r6, sl
 8005a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a9c:	f7fb f85c 	bl	8000b58 <__aeabi_d2iz>
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	f7fa fd3f 	bl	8000524 <__aeabi_i2d>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aae:	f7fa fbeb 	bl	8000288 <__aeabi_dsub>
 8005ab2:	3530      	adds	r5, #48	@ 0x30
 8005ab4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	d124      	bne.n	8005b12 <_dtoa_r+0x662>
 8005ac8:	4bac      	ldr	r3, [pc, #688]	@ (8005d7c <_dtoa_r+0x8cc>)
 8005aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ace:	f7fa fbdd 	bl	800028c <__adddf3>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ada:	f7fb f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d145      	bne.n	8005b6e <_dtoa_r+0x6be>
 8005ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ae6:	49a5      	ldr	r1, [pc, #660]	@ (8005d7c <_dtoa_r+0x8cc>)
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f7fa fbcd 	bl	8000288 <__aeabi_dsub>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af6:	f7fa fff1 	bl	8000adc <__aeabi_dcmplt>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	f43f aef5 	beq.w	80058ea <_dtoa_r+0x43a>
 8005b00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005b02:	1e73      	subs	r3, r6, #1
 8005b04:	9315      	str	r3, [sp, #84]	@ 0x54
 8005b06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d0f8      	beq.n	8005b00 <_dtoa_r+0x650>
 8005b0e:	9f04      	ldr	r7, [sp, #16]
 8005b10:	e73e      	b.n	8005990 <_dtoa_r+0x4e0>
 8005b12:	4b9b      	ldr	r3, [pc, #620]	@ (8005d80 <_dtoa_r+0x8d0>)
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1c:	e7bc      	b.n	8005a98 <_dtoa_r+0x5e8>
 8005b1e:	d10c      	bne.n	8005b3a <_dtoa_r+0x68a>
 8005b20:	4b98      	ldr	r3, [pc, #608]	@ (8005d84 <_dtoa_r+0x8d4>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b28:	f7fa fd66 	bl	80005f8 <__aeabi_dmul>
 8005b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b30:	f7fa ffe8 	bl	8000b04 <__aeabi_dcmpge>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f000 8157 	beq.w	8005de8 <_dtoa_r+0x938>
 8005b3a:	2400      	movs	r4, #0
 8005b3c:	4625      	mov	r5, r4
 8005b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b40:	43db      	mvns	r3, r3
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	4656      	mov	r6, sl
 8005b46:	2700      	movs	r7, #0
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	f000 fbb4 	bl	80062b8 <_Bfree>
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	d0dc      	beq.n	8005b0e <_dtoa_r+0x65e>
 8005b54:	b12f      	cbz	r7, 8005b62 <_dtoa_r+0x6b2>
 8005b56:	42af      	cmp	r7, r5
 8005b58:	d003      	beq.n	8005b62 <_dtoa_r+0x6b2>
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	4658      	mov	r0, fp
 8005b5e:	f000 fbab 	bl	80062b8 <_Bfree>
 8005b62:	4629      	mov	r1, r5
 8005b64:	4658      	mov	r0, fp
 8005b66:	f000 fba7 	bl	80062b8 <_Bfree>
 8005b6a:	e7d0      	b.n	8005b0e <_dtoa_r+0x65e>
 8005b6c:	9704      	str	r7, [sp, #16]
 8005b6e:	4633      	mov	r3, r6
 8005b70:	461e      	mov	r6, r3
 8005b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b76:	2a39      	cmp	r2, #57	@ 0x39
 8005b78:	d107      	bne.n	8005b8a <_dtoa_r+0x6da>
 8005b7a:	459a      	cmp	sl, r3
 8005b7c:	d1f8      	bne.n	8005b70 <_dtoa_r+0x6c0>
 8005b7e:	9a04      	ldr	r2, [sp, #16]
 8005b80:	3201      	adds	r2, #1
 8005b82:	9204      	str	r2, [sp, #16]
 8005b84:	2230      	movs	r2, #48	@ 0x30
 8005b86:	f88a 2000 	strb.w	r2, [sl]
 8005b8a:	781a      	ldrb	r2, [r3, #0]
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	e7bd      	b.n	8005b0e <_dtoa_r+0x65e>
 8005b92:	4b7b      	ldr	r3, [pc, #492]	@ (8005d80 <_dtoa_r+0x8d0>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	f7fa fd2f 	bl	80005f8 <__aeabi_dmul>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	460d      	mov	r5, r1
 8005ba2:	f7fa ff91 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f43f aebb 	beq.w	8005922 <_dtoa_r+0x472>
 8005bac:	e6f0      	b.n	8005990 <_dtoa_r+0x4e0>
 8005bae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	f000 80db 	beq.w	8005d6c <_dtoa_r+0x8bc>
 8005bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bb8:	2a01      	cmp	r2, #1
 8005bba:	f300 80bf 	bgt.w	8005d3c <_dtoa_r+0x88c>
 8005bbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	f000 80b7 	beq.w	8005d34 <_dtoa_r+0x884>
 8005bc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005bca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005bcc:	4646      	mov	r6, r8
 8005bce:	9a08      	ldr	r2, [sp, #32]
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	441a      	add	r2, r3
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	4498      	add	r8, r3
 8005bd8:	9208      	str	r2, [sp, #32]
 8005bda:	f000 fc21 	bl	8006420 <__i2b>
 8005bde:	4605      	mov	r5, r0
 8005be0:	b15e      	cbz	r6, 8005bfa <_dtoa_r+0x74a>
 8005be2:	9b08      	ldr	r3, [sp, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dd08      	ble.n	8005bfa <_dtoa_r+0x74a>
 8005be8:	42b3      	cmp	r3, r6
 8005bea:	9a08      	ldr	r2, [sp, #32]
 8005bec:	bfa8      	it	ge
 8005bee:	4633      	movge	r3, r6
 8005bf0:	eba8 0803 	sub.w	r8, r8, r3
 8005bf4:	1af6      	subs	r6, r6, r3
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bfc:	b1f3      	cbz	r3, 8005c3c <_dtoa_r+0x78c>
 8005bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80b7 	beq.w	8005d74 <_dtoa_r+0x8c4>
 8005c06:	b18c      	cbz	r4, 8005c2c <_dtoa_r+0x77c>
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	4658      	mov	r0, fp
 8005c0e:	f000 fcc7 	bl	80065a0 <__pow5mult>
 8005c12:	464a      	mov	r2, r9
 8005c14:	4601      	mov	r1, r0
 8005c16:	4605      	mov	r5, r0
 8005c18:	4658      	mov	r0, fp
 8005c1a:	f000 fc17 	bl	800644c <__multiply>
 8005c1e:	4649      	mov	r1, r9
 8005c20:	9004      	str	r0, [sp, #16]
 8005c22:	4658      	mov	r0, fp
 8005c24:	f000 fb48 	bl	80062b8 <_Bfree>
 8005c28:	9b04      	ldr	r3, [sp, #16]
 8005c2a:	4699      	mov	r9, r3
 8005c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c2e:	1b1a      	subs	r2, r3, r4
 8005c30:	d004      	beq.n	8005c3c <_dtoa_r+0x78c>
 8005c32:	4649      	mov	r1, r9
 8005c34:	4658      	mov	r0, fp
 8005c36:	f000 fcb3 	bl	80065a0 <__pow5mult>
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4658      	mov	r0, fp
 8005c40:	f000 fbee 	bl	8006420 <__i2b>
 8005c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c46:	4604      	mov	r4, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 81cf 	beq.w	8005fec <_dtoa_r+0xb3c>
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4601      	mov	r1, r0
 8005c52:	4658      	mov	r0, fp
 8005c54:	f000 fca4 	bl	80065a0 <__pow5mult>
 8005c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	f300 8095 	bgt.w	8005d8c <_dtoa_r+0x8dc>
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8087 	bne.w	8005d78 <_dtoa_r+0x8c8>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8089 	bne.w	8005d88 <_dtoa_r+0x8d8>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c7c:	0d1b      	lsrs	r3, r3, #20
 8005c7e:	051b      	lsls	r3, r3, #20
 8005c80:	b12b      	cbz	r3, 8005c8e <_dtoa_r+0x7de>
 8005c82:	9b08      	ldr	r3, [sp, #32]
 8005c84:	3301      	adds	r3, #1
 8005c86:	9308      	str	r3, [sp, #32]
 8005c88:	f108 0801 	add.w	r8, r8, #1
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 81b0 	beq.w	8005ff8 <_dtoa_r+0xb48>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c9e:	6918      	ldr	r0, [r3, #16]
 8005ca0:	f000 fb72 	bl	8006388 <__hi0bits>
 8005ca4:	f1c0 0020 	rsb	r0, r0, #32
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	4418      	add	r0, r3
 8005cac:	f010 001f 	ands.w	r0, r0, #31
 8005cb0:	d077      	beq.n	8005da2 <_dtoa_r+0x8f2>
 8005cb2:	f1c0 0320 	rsb	r3, r0, #32
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	dd6b      	ble.n	8005d92 <_dtoa_r+0x8e2>
 8005cba:	9b08      	ldr	r3, [sp, #32]
 8005cbc:	f1c0 001c 	rsb	r0, r0, #28
 8005cc0:	4403      	add	r3, r0
 8005cc2:	4480      	add	r8, r0
 8005cc4:	4406      	add	r6, r0
 8005cc6:	9308      	str	r3, [sp, #32]
 8005cc8:	f1b8 0f00 	cmp.w	r8, #0
 8005ccc:	dd05      	ble.n	8005cda <_dtoa_r+0x82a>
 8005cce:	4649      	mov	r1, r9
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	4658      	mov	r0, fp
 8005cd4:	f000 fcbe 	bl	8006654 <__lshift>
 8005cd8:	4681      	mov	r9, r0
 8005cda:	9b08      	ldr	r3, [sp, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dd05      	ble.n	8005cec <_dtoa_r+0x83c>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4658      	mov	r0, fp
 8005ce6:	f000 fcb5 	bl	8006654 <__lshift>
 8005cea:	4604      	mov	r4, r0
 8005cec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d059      	beq.n	8005da6 <_dtoa_r+0x8f6>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4648      	mov	r0, r9
 8005cf6:	f000 fd19 	bl	800672c <__mcmp>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	da53      	bge.n	8005da6 <_dtoa_r+0x8f6>
 8005cfe:	1e7b      	subs	r3, r7, #1
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	4649      	mov	r1, r9
 8005d04:	2300      	movs	r3, #0
 8005d06:	220a      	movs	r2, #10
 8005d08:	4658      	mov	r0, fp
 8005d0a:	f000 faf7 	bl	80062fc <__multadd>
 8005d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d10:	4681      	mov	r9, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 8172 	beq.w	8005ffc <_dtoa_r+0xb4c>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	4658      	mov	r0, fp
 8005d20:	f000 faec 	bl	80062fc <__multadd>
 8005d24:	9b00      	ldr	r3, [sp, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	4605      	mov	r5, r0
 8005d2a:	dc67      	bgt.n	8005dfc <_dtoa_r+0x94c>
 8005d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	dc41      	bgt.n	8005db6 <_dtoa_r+0x906>
 8005d32:	e063      	b.n	8005dfc <_dtoa_r+0x94c>
 8005d34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005d3a:	e746      	b.n	8005bca <_dtoa_r+0x71a>
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	1e5c      	subs	r4, r3, #1
 8005d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	bfbf      	itttt	lt
 8005d46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005d48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005d4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005d4c:	1ae3      	sublt	r3, r4, r3
 8005d4e:	bfb4      	ite	lt
 8005d50:	18d2      	addlt	r2, r2, r3
 8005d52:	1b1c      	subge	r4, r3, r4
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	bfbc      	itt	lt
 8005d58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005d5a:	2400      	movlt	r4, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfb5      	itete	lt
 8005d60:	eba8 0603 	sublt.w	r6, r8, r3
 8005d64:	9b07      	ldrge	r3, [sp, #28]
 8005d66:	2300      	movlt	r3, #0
 8005d68:	4646      	movge	r6, r8
 8005d6a:	e730      	b.n	8005bce <_dtoa_r+0x71e>
 8005d6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005d70:	4646      	mov	r6, r8
 8005d72:	e735      	b.n	8005be0 <_dtoa_r+0x730>
 8005d74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d76:	e75c      	b.n	8005c32 <_dtoa_r+0x782>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e788      	b.n	8005c8e <_dtoa_r+0x7de>
 8005d7c:	3fe00000 	.word	0x3fe00000
 8005d80:	40240000 	.word	0x40240000
 8005d84:	40140000 	.word	0x40140000
 8005d88:	9b02      	ldr	r3, [sp, #8]
 8005d8a:	e780      	b.n	8005c8e <_dtoa_r+0x7de>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d90:	e782      	b.n	8005c98 <_dtoa_r+0x7e8>
 8005d92:	d099      	beq.n	8005cc8 <_dtoa_r+0x818>
 8005d94:	9a08      	ldr	r2, [sp, #32]
 8005d96:	331c      	adds	r3, #28
 8005d98:	441a      	add	r2, r3
 8005d9a:	4498      	add	r8, r3
 8005d9c:	441e      	add	r6, r3
 8005d9e:	9208      	str	r2, [sp, #32]
 8005da0:	e792      	b.n	8005cc8 <_dtoa_r+0x818>
 8005da2:	4603      	mov	r3, r0
 8005da4:	e7f6      	b.n	8005d94 <_dtoa_r+0x8e4>
 8005da6:	9b07      	ldr	r3, [sp, #28]
 8005da8:	9704      	str	r7, [sp, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dc20      	bgt.n	8005df0 <_dtoa_r+0x940>
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	dd1e      	ble.n	8005df4 <_dtoa_r+0x944>
 8005db6:	9b00      	ldr	r3, [sp, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f47f aec0 	bne.w	8005b3e <_dtoa_r+0x68e>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	4658      	mov	r0, fp
 8005dc4:	f000 fa9a 	bl	80062fc <__multadd>
 8005dc8:	4601      	mov	r1, r0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4648      	mov	r0, r9
 8005dce:	f000 fcad 	bl	800672c <__mcmp>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	f77f aeb3 	ble.w	8005b3e <_dtoa_r+0x68e>
 8005dd8:	4656      	mov	r6, sl
 8005dda:	2331      	movs	r3, #49	@ 0x31
 8005ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	3301      	adds	r3, #1
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	e6ae      	b.n	8005b46 <_dtoa_r+0x696>
 8005de8:	9c07      	ldr	r4, [sp, #28]
 8005dea:	9704      	str	r7, [sp, #16]
 8005dec:	4625      	mov	r5, r4
 8005dee:	e7f3      	b.n	8005dd8 <_dtoa_r+0x928>
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8104 	beq.w	8006004 <_dtoa_r+0xb54>
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	dd05      	ble.n	8005e0c <_dtoa_r+0x95c>
 8005e00:	4629      	mov	r1, r5
 8005e02:	4632      	mov	r2, r6
 8005e04:	4658      	mov	r0, fp
 8005e06:	f000 fc25 	bl	8006654 <__lshift>
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d05a      	beq.n	8005ec8 <_dtoa_r+0xa18>
 8005e12:	6869      	ldr	r1, [r5, #4]
 8005e14:	4658      	mov	r0, fp
 8005e16:	f000 fa0f 	bl	8006238 <_Balloc>
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	b928      	cbnz	r0, 8005e2a <_dtoa_r+0x97a>
 8005e1e:	4b84      	ldr	r3, [pc, #528]	@ (8006030 <_dtoa_r+0xb80>)
 8005e20:	4602      	mov	r2, r0
 8005e22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e26:	f7ff bb5a 	b.w	80054de <_dtoa_r+0x2e>
 8005e2a:	692a      	ldr	r2, [r5, #16]
 8005e2c:	3202      	adds	r2, #2
 8005e2e:	0092      	lsls	r2, r2, #2
 8005e30:	f105 010c 	add.w	r1, r5, #12
 8005e34:	300c      	adds	r0, #12
 8005e36:	f000 ffaf 	bl	8006d98 <memcpy>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4658      	mov	r0, fp
 8005e40:	f000 fc08 	bl	8006654 <__lshift>
 8005e44:	f10a 0301 	add.w	r3, sl, #1
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	9b00      	ldr	r3, [sp, #0]
 8005e4c:	4453      	add	r3, sl
 8005e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	462f      	mov	r7, r5
 8005e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	9b07      	ldr	r3, [sp, #28]
 8005e5e:	4621      	mov	r1, r4
 8005e60:	3b01      	subs	r3, #1
 8005e62:	4648      	mov	r0, r9
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	f7ff fa98 	bl	800539a <quorem>
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	9002      	str	r0, [sp, #8]
 8005e6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e72:	4648      	mov	r0, r9
 8005e74:	f000 fc5a 	bl	800672c <__mcmp>
 8005e78:	462a      	mov	r2, r5
 8005e7a:	9008      	str	r0, [sp, #32]
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4658      	mov	r0, fp
 8005e80:	f000 fc70 	bl	8006764 <__mdiff>
 8005e84:	68c2      	ldr	r2, [r0, #12]
 8005e86:	4606      	mov	r6, r0
 8005e88:	bb02      	cbnz	r2, 8005ecc <_dtoa_r+0xa1c>
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4648      	mov	r0, r9
 8005e8e:	f000 fc4d 	bl	800672c <__mcmp>
 8005e92:	4602      	mov	r2, r0
 8005e94:	4631      	mov	r1, r6
 8005e96:	4658      	mov	r0, fp
 8005e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e9a:	f000 fa0d 	bl	80062b8 <_Bfree>
 8005e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ea2:	9e07      	ldr	r6, [sp, #28]
 8005ea4:	ea43 0102 	orr.w	r1, r3, r2
 8005ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eaa:	4319      	orrs	r1, r3
 8005eac:	d110      	bne.n	8005ed0 <_dtoa_r+0xa20>
 8005eae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005eb2:	d029      	beq.n	8005f08 <_dtoa_r+0xa58>
 8005eb4:	9b08      	ldr	r3, [sp, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dd02      	ble.n	8005ec0 <_dtoa_r+0xa10>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	f883 8000 	strb.w	r8, [r3]
 8005ec6:	e63f      	b.n	8005b48 <_dtoa_r+0x698>
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e7bb      	b.n	8005e44 <_dtoa_r+0x994>
 8005ecc:	2201      	movs	r2, #1
 8005ece:	e7e1      	b.n	8005e94 <_dtoa_r+0x9e4>
 8005ed0:	9b08      	ldr	r3, [sp, #32]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	db04      	blt.n	8005ee0 <_dtoa_r+0xa30>
 8005ed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005edc:	430b      	orrs	r3, r1
 8005ede:	d120      	bne.n	8005f22 <_dtoa_r+0xa72>
 8005ee0:	2a00      	cmp	r2, #0
 8005ee2:	dded      	ble.n	8005ec0 <_dtoa_r+0xa10>
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	4658      	mov	r0, fp
 8005eea:	f000 fbb3 	bl	8006654 <__lshift>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4681      	mov	r9, r0
 8005ef2:	f000 fc1b 	bl	800672c <__mcmp>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	dc03      	bgt.n	8005f02 <_dtoa_r+0xa52>
 8005efa:	d1e1      	bne.n	8005ec0 <_dtoa_r+0xa10>
 8005efc:	f018 0f01 	tst.w	r8, #1
 8005f00:	d0de      	beq.n	8005ec0 <_dtoa_r+0xa10>
 8005f02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005f06:	d1d8      	bne.n	8005eba <_dtoa_r+0xa0a>
 8005f08:	9a00      	ldr	r2, [sp, #0]
 8005f0a:	2339      	movs	r3, #57	@ 0x39
 8005f0c:	7013      	strb	r3, [r2, #0]
 8005f0e:	4633      	mov	r3, r6
 8005f10:	461e      	mov	r6, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f18:	2a39      	cmp	r2, #57	@ 0x39
 8005f1a:	d052      	beq.n	8005fc2 <_dtoa_r+0xb12>
 8005f1c:	3201      	adds	r2, #1
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e612      	b.n	8005b48 <_dtoa_r+0x698>
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	dd07      	ble.n	8005f36 <_dtoa_r+0xa86>
 8005f26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005f2a:	d0ed      	beq.n	8005f08 <_dtoa_r+0xa58>
 8005f2c:	9a00      	ldr	r2, [sp, #0]
 8005f2e:	f108 0301 	add.w	r3, r8, #1
 8005f32:	7013      	strb	r3, [r2, #0]
 8005f34:	e608      	b.n	8005b48 <_dtoa_r+0x698>
 8005f36:	9b07      	ldr	r3, [sp, #28]
 8005f38:	9a07      	ldr	r2, [sp, #28]
 8005f3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d028      	beq.n	8005f96 <_dtoa_r+0xae6>
 8005f44:	4649      	mov	r1, r9
 8005f46:	2300      	movs	r3, #0
 8005f48:	220a      	movs	r2, #10
 8005f4a:	4658      	mov	r0, fp
 8005f4c:	f000 f9d6 	bl	80062fc <__multadd>
 8005f50:	42af      	cmp	r7, r5
 8005f52:	4681      	mov	r9, r0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	f04f 020a 	mov.w	r2, #10
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	4658      	mov	r0, fp
 8005f60:	d107      	bne.n	8005f72 <_dtoa_r+0xac2>
 8005f62:	f000 f9cb 	bl	80062fc <__multadd>
 8005f66:	4607      	mov	r7, r0
 8005f68:	4605      	mov	r5, r0
 8005f6a:	9b07      	ldr	r3, [sp, #28]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	e774      	b.n	8005e5c <_dtoa_r+0x9ac>
 8005f72:	f000 f9c3 	bl	80062fc <__multadd>
 8005f76:	4629      	mov	r1, r5
 8005f78:	4607      	mov	r7, r0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	220a      	movs	r2, #10
 8005f7e:	4658      	mov	r0, fp
 8005f80:	f000 f9bc 	bl	80062fc <__multadd>
 8005f84:	4605      	mov	r5, r0
 8005f86:	e7f0      	b.n	8005f6a <_dtoa_r+0xaba>
 8005f88:	9b00      	ldr	r3, [sp, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bfcc      	ite	gt
 8005f8e:	461e      	movgt	r6, r3
 8005f90:	2601      	movle	r6, #1
 8005f92:	4456      	add	r6, sl
 8005f94:	2700      	movs	r7, #0
 8005f96:	4649      	mov	r1, r9
 8005f98:	2201      	movs	r2, #1
 8005f9a:	4658      	mov	r0, fp
 8005f9c:	f000 fb5a 	bl	8006654 <__lshift>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4681      	mov	r9, r0
 8005fa4:	f000 fbc2 	bl	800672c <__mcmp>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	dcb0      	bgt.n	8005f0e <_dtoa_r+0xa5e>
 8005fac:	d102      	bne.n	8005fb4 <_dtoa_r+0xb04>
 8005fae:	f018 0f01 	tst.w	r8, #1
 8005fb2:	d1ac      	bne.n	8005f0e <_dtoa_r+0xa5e>
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	461e      	mov	r6, r3
 8005fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fbc:	2a30      	cmp	r2, #48	@ 0x30
 8005fbe:	d0fa      	beq.n	8005fb6 <_dtoa_r+0xb06>
 8005fc0:	e5c2      	b.n	8005b48 <_dtoa_r+0x698>
 8005fc2:	459a      	cmp	sl, r3
 8005fc4:	d1a4      	bne.n	8005f10 <_dtoa_r+0xa60>
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	2331      	movs	r3, #49	@ 0x31
 8005fce:	f88a 3000 	strb.w	r3, [sl]
 8005fd2:	e5b9      	b.n	8005b48 <_dtoa_r+0x698>
 8005fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006034 <_dtoa_r+0xb84>
 8005fda:	b11b      	cbz	r3, 8005fe4 <_dtoa_r+0xb34>
 8005fdc:	f10a 0308 	add.w	r3, sl, #8
 8005fe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	b019      	add	sp, #100	@ 0x64
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f77f ae37 	ble.w	8005c62 <_dtoa_r+0x7b2>
 8005ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	e655      	b.n	8005ca8 <_dtoa_r+0x7f8>
 8005ffc:	9b00      	ldr	r3, [sp, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f77f aed6 	ble.w	8005db0 <_dtoa_r+0x900>
 8006004:	4656      	mov	r6, sl
 8006006:	4621      	mov	r1, r4
 8006008:	4648      	mov	r0, r9
 800600a:	f7ff f9c6 	bl	800539a <quorem>
 800600e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006012:	f806 8b01 	strb.w	r8, [r6], #1
 8006016:	9b00      	ldr	r3, [sp, #0]
 8006018:	eba6 020a 	sub.w	r2, r6, sl
 800601c:	4293      	cmp	r3, r2
 800601e:	ddb3      	ble.n	8005f88 <_dtoa_r+0xad8>
 8006020:	4649      	mov	r1, r9
 8006022:	2300      	movs	r3, #0
 8006024:	220a      	movs	r2, #10
 8006026:	4658      	mov	r0, fp
 8006028:	f000 f968 	bl	80062fc <__multadd>
 800602c:	4681      	mov	r9, r0
 800602e:	e7ea      	b.n	8006006 <_dtoa_r+0xb56>
 8006030:	08007614 	.word	0x08007614
 8006034:	08007598 	.word	0x08007598

08006038 <_free_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4605      	mov	r5, r0
 800603c:	2900      	cmp	r1, #0
 800603e:	d041      	beq.n	80060c4 <_free_r+0x8c>
 8006040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006044:	1f0c      	subs	r4, r1, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	bfb8      	it	lt
 800604a:	18e4      	addlt	r4, r4, r3
 800604c:	f000 f8e8 	bl	8006220 <__malloc_lock>
 8006050:	4a1d      	ldr	r2, [pc, #116]	@ (80060c8 <_free_r+0x90>)
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	b933      	cbnz	r3, 8006064 <_free_r+0x2c>
 8006056:	6063      	str	r3, [r4, #4]
 8006058:	6014      	str	r4, [r2, #0]
 800605a:	4628      	mov	r0, r5
 800605c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006060:	f000 b8e4 	b.w	800622c <__malloc_unlock>
 8006064:	42a3      	cmp	r3, r4
 8006066:	d908      	bls.n	800607a <_free_r+0x42>
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	1821      	adds	r1, r4, r0
 800606c:	428b      	cmp	r3, r1
 800606e:	bf01      	itttt	eq
 8006070:	6819      	ldreq	r1, [r3, #0]
 8006072:	685b      	ldreq	r3, [r3, #4]
 8006074:	1809      	addeq	r1, r1, r0
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	e7ed      	b.n	8006056 <_free_r+0x1e>
 800607a:	461a      	mov	r2, r3
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	b10b      	cbz	r3, 8006084 <_free_r+0x4c>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d9fa      	bls.n	800607a <_free_r+0x42>
 8006084:	6811      	ldr	r1, [r2, #0]
 8006086:	1850      	adds	r0, r2, r1
 8006088:	42a0      	cmp	r0, r4
 800608a:	d10b      	bne.n	80060a4 <_free_r+0x6c>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	4401      	add	r1, r0
 8006090:	1850      	adds	r0, r2, r1
 8006092:	4283      	cmp	r3, r0
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	d1e0      	bne.n	800605a <_free_r+0x22>
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	6053      	str	r3, [r2, #4]
 800609e:	4408      	add	r0, r1
 80060a0:	6010      	str	r0, [r2, #0]
 80060a2:	e7da      	b.n	800605a <_free_r+0x22>
 80060a4:	d902      	bls.n	80060ac <_free_r+0x74>
 80060a6:	230c      	movs	r3, #12
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	e7d6      	b.n	800605a <_free_r+0x22>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	1821      	adds	r1, r4, r0
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf04      	itt	eq
 80060b4:	6819      	ldreq	r1, [r3, #0]
 80060b6:	685b      	ldreq	r3, [r3, #4]
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	bf04      	itt	eq
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	6054      	str	r4, [r2, #4]
 80060c2:	e7ca      	b.n	800605a <_free_r+0x22>
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	bf00      	nop
 80060c8:	200004d0 	.word	0x200004d0

080060cc <malloc>:
 80060cc:	4b02      	ldr	r3, [pc, #8]	@ (80060d8 <malloc+0xc>)
 80060ce:	4601      	mov	r1, r0
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	f000 b825 	b.w	8006120 <_malloc_r>
 80060d6:	bf00      	nop
 80060d8:	20000028 	.word	0x20000028

080060dc <sbrk_aligned>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	4e0f      	ldr	r6, [pc, #60]	@ (800611c <sbrk_aligned+0x40>)
 80060e0:	460c      	mov	r4, r1
 80060e2:	6831      	ldr	r1, [r6, #0]
 80060e4:	4605      	mov	r5, r0
 80060e6:	b911      	cbnz	r1, 80060ee <sbrk_aligned+0x12>
 80060e8:	f000 fe46 	bl	8006d78 <_sbrk_r>
 80060ec:	6030      	str	r0, [r6, #0]
 80060ee:	4621      	mov	r1, r4
 80060f0:	4628      	mov	r0, r5
 80060f2:	f000 fe41 	bl	8006d78 <_sbrk_r>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	d103      	bne.n	8006102 <sbrk_aligned+0x26>
 80060fa:	f04f 34ff 	mov.w	r4, #4294967295
 80060fe:	4620      	mov	r0, r4
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	1cc4      	adds	r4, r0, #3
 8006104:	f024 0403 	bic.w	r4, r4, #3
 8006108:	42a0      	cmp	r0, r4
 800610a:	d0f8      	beq.n	80060fe <sbrk_aligned+0x22>
 800610c:	1a21      	subs	r1, r4, r0
 800610e:	4628      	mov	r0, r5
 8006110:	f000 fe32 	bl	8006d78 <_sbrk_r>
 8006114:	3001      	adds	r0, #1
 8006116:	d1f2      	bne.n	80060fe <sbrk_aligned+0x22>
 8006118:	e7ef      	b.n	80060fa <sbrk_aligned+0x1e>
 800611a:	bf00      	nop
 800611c:	200004cc 	.word	0x200004cc

08006120 <_malloc_r>:
 8006120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006124:	1ccd      	adds	r5, r1, #3
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	2d00      	cmp	r5, #0
 8006134:	4606      	mov	r6, r0
 8006136:	db01      	blt.n	800613c <_malloc_r+0x1c>
 8006138:	42a9      	cmp	r1, r5
 800613a:	d904      	bls.n	8006146 <_malloc_r+0x26>
 800613c:	230c      	movs	r3, #12
 800613e:	6033      	str	r3, [r6, #0]
 8006140:	2000      	movs	r0, #0
 8006142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800621c <_malloc_r+0xfc>
 800614a:	f000 f869 	bl	8006220 <__malloc_lock>
 800614e:	f8d8 3000 	ldr.w	r3, [r8]
 8006152:	461c      	mov	r4, r3
 8006154:	bb44      	cbnz	r4, 80061a8 <_malloc_r+0x88>
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff ffbf 	bl	80060dc <sbrk_aligned>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	4604      	mov	r4, r0
 8006162:	d158      	bne.n	8006216 <_malloc_r+0xf6>
 8006164:	f8d8 4000 	ldr.w	r4, [r8]
 8006168:	4627      	mov	r7, r4
 800616a:	2f00      	cmp	r7, #0
 800616c:	d143      	bne.n	80061f6 <_malloc_r+0xd6>
 800616e:	2c00      	cmp	r4, #0
 8006170:	d04b      	beq.n	800620a <_malloc_r+0xea>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	4639      	mov	r1, r7
 8006176:	4630      	mov	r0, r6
 8006178:	eb04 0903 	add.w	r9, r4, r3
 800617c:	f000 fdfc 	bl	8006d78 <_sbrk_r>
 8006180:	4581      	cmp	r9, r0
 8006182:	d142      	bne.n	800620a <_malloc_r+0xea>
 8006184:	6821      	ldr	r1, [r4, #0]
 8006186:	1a6d      	subs	r5, r5, r1
 8006188:	4629      	mov	r1, r5
 800618a:	4630      	mov	r0, r6
 800618c:	f7ff ffa6 	bl	80060dc <sbrk_aligned>
 8006190:	3001      	adds	r0, #1
 8006192:	d03a      	beq.n	800620a <_malloc_r+0xea>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	442b      	add	r3, r5
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	f8d8 3000 	ldr.w	r3, [r8]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	bb62      	cbnz	r2, 80061fc <_malloc_r+0xdc>
 80061a2:	f8c8 7000 	str.w	r7, [r8]
 80061a6:	e00f      	b.n	80061c8 <_malloc_r+0xa8>
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	1b52      	subs	r2, r2, r5
 80061ac:	d420      	bmi.n	80061f0 <_malloc_r+0xd0>
 80061ae:	2a0b      	cmp	r2, #11
 80061b0:	d917      	bls.n	80061e2 <_malloc_r+0xc2>
 80061b2:	1961      	adds	r1, r4, r5
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	6025      	str	r5, [r4, #0]
 80061b8:	bf18      	it	ne
 80061ba:	6059      	strne	r1, [r3, #4]
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	bf08      	it	eq
 80061c0:	f8c8 1000 	streq.w	r1, [r8]
 80061c4:	5162      	str	r2, [r4, r5]
 80061c6:	604b      	str	r3, [r1, #4]
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f82f 	bl	800622c <__malloc_unlock>
 80061ce:	f104 000b 	add.w	r0, r4, #11
 80061d2:	1d23      	adds	r3, r4, #4
 80061d4:	f020 0007 	bic.w	r0, r0, #7
 80061d8:	1ac2      	subs	r2, r0, r3
 80061da:	bf1c      	itt	ne
 80061dc:	1a1b      	subne	r3, r3, r0
 80061de:	50a3      	strne	r3, [r4, r2]
 80061e0:	e7af      	b.n	8006142 <_malloc_r+0x22>
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	bf0c      	ite	eq
 80061e8:	f8c8 2000 	streq.w	r2, [r8]
 80061ec:	605a      	strne	r2, [r3, #4]
 80061ee:	e7eb      	b.n	80061c8 <_malloc_r+0xa8>
 80061f0:	4623      	mov	r3, r4
 80061f2:	6864      	ldr	r4, [r4, #4]
 80061f4:	e7ae      	b.n	8006154 <_malloc_r+0x34>
 80061f6:	463c      	mov	r4, r7
 80061f8:	687f      	ldr	r7, [r7, #4]
 80061fa:	e7b6      	b.n	800616a <_malloc_r+0x4a>
 80061fc:	461a      	mov	r2, r3
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	42a3      	cmp	r3, r4
 8006202:	d1fb      	bne.n	80061fc <_malloc_r+0xdc>
 8006204:	2300      	movs	r3, #0
 8006206:	6053      	str	r3, [r2, #4]
 8006208:	e7de      	b.n	80061c8 <_malloc_r+0xa8>
 800620a:	230c      	movs	r3, #12
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	4630      	mov	r0, r6
 8006210:	f000 f80c 	bl	800622c <__malloc_unlock>
 8006214:	e794      	b.n	8006140 <_malloc_r+0x20>
 8006216:	6005      	str	r5, [r0, #0]
 8006218:	e7d6      	b.n	80061c8 <_malloc_r+0xa8>
 800621a:	bf00      	nop
 800621c:	200004d0 	.word	0x200004d0

08006220 <__malloc_lock>:
 8006220:	4801      	ldr	r0, [pc, #4]	@ (8006228 <__malloc_lock+0x8>)
 8006222:	f7ff b8b8 	b.w	8005396 <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	200004c8 	.word	0x200004c8

0800622c <__malloc_unlock>:
 800622c:	4801      	ldr	r0, [pc, #4]	@ (8006234 <__malloc_unlock+0x8>)
 800622e:	f7ff b8b3 	b.w	8005398 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	200004c8 	.word	0x200004c8

08006238 <_Balloc>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	69c6      	ldr	r6, [r0, #28]
 800623c:	4604      	mov	r4, r0
 800623e:	460d      	mov	r5, r1
 8006240:	b976      	cbnz	r6, 8006260 <_Balloc+0x28>
 8006242:	2010      	movs	r0, #16
 8006244:	f7ff ff42 	bl	80060cc <malloc>
 8006248:	4602      	mov	r2, r0
 800624a:	61e0      	str	r0, [r4, #28]
 800624c:	b920      	cbnz	r0, 8006258 <_Balloc+0x20>
 800624e:	4b18      	ldr	r3, [pc, #96]	@ (80062b0 <_Balloc+0x78>)
 8006250:	4818      	ldr	r0, [pc, #96]	@ (80062b4 <_Balloc+0x7c>)
 8006252:	216b      	movs	r1, #107	@ 0x6b
 8006254:	f000 fdae 	bl	8006db4 <__assert_func>
 8006258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800625c:	6006      	str	r6, [r0, #0]
 800625e:	60c6      	str	r6, [r0, #12]
 8006260:	69e6      	ldr	r6, [r4, #28]
 8006262:	68f3      	ldr	r3, [r6, #12]
 8006264:	b183      	cbz	r3, 8006288 <_Balloc+0x50>
 8006266:	69e3      	ldr	r3, [r4, #28]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800626e:	b9b8      	cbnz	r0, 80062a0 <_Balloc+0x68>
 8006270:	2101      	movs	r1, #1
 8006272:	fa01 f605 	lsl.w	r6, r1, r5
 8006276:	1d72      	adds	r2, r6, #5
 8006278:	0092      	lsls	r2, r2, #2
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fdb8 	bl	8006df0 <_calloc_r>
 8006280:	b160      	cbz	r0, 800629c <_Balloc+0x64>
 8006282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006286:	e00e      	b.n	80062a6 <_Balloc+0x6e>
 8006288:	2221      	movs	r2, #33	@ 0x21
 800628a:	2104      	movs	r1, #4
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fdaf 	bl	8006df0 <_calloc_r>
 8006292:	69e3      	ldr	r3, [r4, #28]
 8006294:	60f0      	str	r0, [r6, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e4      	bne.n	8006266 <_Balloc+0x2e>
 800629c:	2000      	movs	r0, #0
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	6802      	ldr	r2, [r0, #0]
 80062a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062a6:	2300      	movs	r3, #0
 80062a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062ac:	e7f7      	b.n	800629e <_Balloc+0x66>
 80062ae:	bf00      	nop
 80062b0:	080075a5 	.word	0x080075a5
 80062b4:	08007625 	.word	0x08007625

080062b8 <_Bfree>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	69c6      	ldr	r6, [r0, #28]
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	b976      	cbnz	r6, 80062e0 <_Bfree+0x28>
 80062c2:	2010      	movs	r0, #16
 80062c4:	f7ff ff02 	bl	80060cc <malloc>
 80062c8:	4602      	mov	r2, r0
 80062ca:	61e8      	str	r0, [r5, #28]
 80062cc:	b920      	cbnz	r0, 80062d8 <_Bfree+0x20>
 80062ce:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <_Bfree+0x3c>)
 80062d0:	4809      	ldr	r0, [pc, #36]	@ (80062f8 <_Bfree+0x40>)
 80062d2:	218f      	movs	r1, #143	@ 0x8f
 80062d4:	f000 fd6e 	bl	8006db4 <__assert_func>
 80062d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062dc:	6006      	str	r6, [r0, #0]
 80062de:	60c6      	str	r6, [r0, #12]
 80062e0:	b13c      	cbz	r4, 80062f2 <_Bfree+0x3a>
 80062e2:	69eb      	ldr	r3, [r5, #28]
 80062e4:	6862      	ldr	r2, [r4, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062ec:	6021      	str	r1, [r4, #0]
 80062ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	080075a5 	.word	0x080075a5
 80062f8:	08007625 	.word	0x08007625

080062fc <__multadd>:
 80062fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006300:	690d      	ldr	r5, [r1, #16]
 8006302:	4607      	mov	r7, r0
 8006304:	460c      	mov	r4, r1
 8006306:	461e      	mov	r6, r3
 8006308:	f101 0c14 	add.w	ip, r1, #20
 800630c:	2000      	movs	r0, #0
 800630e:	f8dc 3000 	ldr.w	r3, [ip]
 8006312:	b299      	uxth	r1, r3
 8006314:	fb02 6101 	mla	r1, r2, r1, r6
 8006318:	0c1e      	lsrs	r6, r3, #16
 800631a:	0c0b      	lsrs	r3, r1, #16
 800631c:	fb02 3306 	mla	r3, r2, r6, r3
 8006320:	b289      	uxth	r1, r1
 8006322:	3001      	adds	r0, #1
 8006324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006328:	4285      	cmp	r5, r0
 800632a:	f84c 1b04 	str.w	r1, [ip], #4
 800632e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006332:	dcec      	bgt.n	800630e <__multadd+0x12>
 8006334:	b30e      	cbz	r6, 800637a <__multadd+0x7e>
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc19      	bgt.n	8006370 <__multadd+0x74>
 800633c:	6861      	ldr	r1, [r4, #4]
 800633e:	4638      	mov	r0, r7
 8006340:	3101      	adds	r1, #1
 8006342:	f7ff ff79 	bl	8006238 <_Balloc>
 8006346:	4680      	mov	r8, r0
 8006348:	b928      	cbnz	r0, 8006356 <__multadd+0x5a>
 800634a:	4602      	mov	r2, r0
 800634c:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <__multadd+0x84>)
 800634e:	480d      	ldr	r0, [pc, #52]	@ (8006384 <__multadd+0x88>)
 8006350:	21ba      	movs	r1, #186	@ 0xba
 8006352:	f000 fd2f 	bl	8006db4 <__assert_func>
 8006356:	6922      	ldr	r2, [r4, #16]
 8006358:	3202      	adds	r2, #2
 800635a:	f104 010c 	add.w	r1, r4, #12
 800635e:	0092      	lsls	r2, r2, #2
 8006360:	300c      	adds	r0, #12
 8006362:	f000 fd19 	bl	8006d98 <memcpy>
 8006366:	4621      	mov	r1, r4
 8006368:	4638      	mov	r0, r7
 800636a:	f7ff ffa5 	bl	80062b8 <_Bfree>
 800636e:	4644      	mov	r4, r8
 8006370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006374:	3501      	adds	r5, #1
 8006376:	615e      	str	r6, [r3, #20]
 8006378:	6125      	str	r5, [r4, #16]
 800637a:	4620      	mov	r0, r4
 800637c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006380:	08007614 	.word	0x08007614
 8006384:	08007625 	.word	0x08007625

08006388 <__hi0bits>:
 8006388:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800638c:	4603      	mov	r3, r0
 800638e:	bf36      	itet	cc
 8006390:	0403      	lslcc	r3, r0, #16
 8006392:	2000      	movcs	r0, #0
 8006394:	2010      	movcc	r0, #16
 8006396:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800639a:	bf3c      	itt	cc
 800639c:	021b      	lslcc	r3, r3, #8
 800639e:	3008      	addcc	r0, #8
 80063a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063a4:	bf3c      	itt	cc
 80063a6:	011b      	lslcc	r3, r3, #4
 80063a8:	3004      	addcc	r0, #4
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ae:	bf3c      	itt	cc
 80063b0:	009b      	lslcc	r3, r3, #2
 80063b2:	3002      	addcc	r0, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	db05      	blt.n	80063c4 <__hi0bits+0x3c>
 80063b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063bc:	f100 0001 	add.w	r0, r0, #1
 80063c0:	bf08      	it	eq
 80063c2:	2020      	moveq	r0, #32
 80063c4:	4770      	bx	lr

080063c6 <__lo0bits>:
 80063c6:	6803      	ldr	r3, [r0, #0]
 80063c8:	4602      	mov	r2, r0
 80063ca:	f013 0007 	ands.w	r0, r3, #7
 80063ce:	d00b      	beq.n	80063e8 <__lo0bits+0x22>
 80063d0:	07d9      	lsls	r1, r3, #31
 80063d2:	d421      	bmi.n	8006418 <__lo0bits+0x52>
 80063d4:	0798      	lsls	r0, r3, #30
 80063d6:	bf49      	itett	mi
 80063d8:	085b      	lsrmi	r3, r3, #1
 80063da:	089b      	lsrpl	r3, r3, #2
 80063dc:	2001      	movmi	r0, #1
 80063de:	6013      	strmi	r3, [r2, #0]
 80063e0:	bf5c      	itt	pl
 80063e2:	6013      	strpl	r3, [r2, #0]
 80063e4:	2002      	movpl	r0, #2
 80063e6:	4770      	bx	lr
 80063e8:	b299      	uxth	r1, r3
 80063ea:	b909      	cbnz	r1, 80063f0 <__lo0bits+0x2a>
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	2010      	movs	r0, #16
 80063f0:	b2d9      	uxtb	r1, r3
 80063f2:	b909      	cbnz	r1, 80063f8 <__lo0bits+0x32>
 80063f4:	3008      	adds	r0, #8
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	0719      	lsls	r1, r3, #28
 80063fa:	bf04      	itt	eq
 80063fc:	091b      	lsreq	r3, r3, #4
 80063fe:	3004      	addeq	r0, #4
 8006400:	0799      	lsls	r1, r3, #30
 8006402:	bf04      	itt	eq
 8006404:	089b      	lsreq	r3, r3, #2
 8006406:	3002      	addeq	r0, #2
 8006408:	07d9      	lsls	r1, r3, #31
 800640a:	d403      	bmi.n	8006414 <__lo0bits+0x4e>
 800640c:	085b      	lsrs	r3, r3, #1
 800640e:	f100 0001 	add.w	r0, r0, #1
 8006412:	d003      	beq.n	800641c <__lo0bits+0x56>
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4770      	bx	lr
 8006418:	2000      	movs	r0, #0
 800641a:	4770      	bx	lr
 800641c:	2020      	movs	r0, #32
 800641e:	4770      	bx	lr

08006420 <__i2b>:
 8006420:	b510      	push	{r4, lr}
 8006422:	460c      	mov	r4, r1
 8006424:	2101      	movs	r1, #1
 8006426:	f7ff ff07 	bl	8006238 <_Balloc>
 800642a:	4602      	mov	r2, r0
 800642c:	b928      	cbnz	r0, 800643a <__i2b+0x1a>
 800642e:	4b05      	ldr	r3, [pc, #20]	@ (8006444 <__i2b+0x24>)
 8006430:	4805      	ldr	r0, [pc, #20]	@ (8006448 <__i2b+0x28>)
 8006432:	f240 1145 	movw	r1, #325	@ 0x145
 8006436:	f000 fcbd 	bl	8006db4 <__assert_func>
 800643a:	2301      	movs	r3, #1
 800643c:	6144      	str	r4, [r0, #20]
 800643e:	6103      	str	r3, [r0, #16]
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	08007614 	.word	0x08007614
 8006448:	08007625 	.word	0x08007625

0800644c <__multiply>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	4614      	mov	r4, r2
 8006452:	690a      	ldr	r2, [r1, #16]
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	bfa8      	it	ge
 800645a:	4623      	movge	r3, r4
 800645c:	460f      	mov	r7, r1
 800645e:	bfa4      	itt	ge
 8006460:	460c      	movge	r4, r1
 8006462:	461f      	movge	r7, r3
 8006464:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006468:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800646c:	68a3      	ldr	r3, [r4, #8]
 800646e:	6861      	ldr	r1, [r4, #4]
 8006470:	eb0a 0609 	add.w	r6, sl, r9
 8006474:	42b3      	cmp	r3, r6
 8006476:	b085      	sub	sp, #20
 8006478:	bfb8      	it	lt
 800647a:	3101      	addlt	r1, #1
 800647c:	f7ff fedc 	bl	8006238 <_Balloc>
 8006480:	b930      	cbnz	r0, 8006490 <__multiply+0x44>
 8006482:	4602      	mov	r2, r0
 8006484:	4b44      	ldr	r3, [pc, #272]	@ (8006598 <__multiply+0x14c>)
 8006486:	4845      	ldr	r0, [pc, #276]	@ (800659c <__multiply+0x150>)
 8006488:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800648c:	f000 fc92 	bl	8006db4 <__assert_func>
 8006490:	f100 0514 	add.w	r5, r0, #20
 8006494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006498:	462b      	mov	r3, r5
 800649a:	2200      	movs	r2, #0
 800649c:	4543      	cmp	r3, r8
 800649e:	d321      	bcc.n	80064e4 <__multiply+0x98>
 80064a0:	f107 0114 	add.w	r1, r7, #20
 80064a4:	f104 0214 	add.w	r2, r4, #20
 80064a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80064ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	1b13      	subs	r3, r2, r4
 80064b4:	3b15      	subs	r3, #21
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	3304      	adds	r3, #4
 80064bc:	f104 0715 	add.w	r7, r4, #21
 80064c0:	42ba      	cmp	r2, r7
 80064c2:	bf38      	it	cc
 80064c4:	2304      	movcc	r3, #4
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	9103      	str	r1, [sp, #12]
 80064cc:	428b      	cmp	r3, r1
 80064ce:	d80c      	bhi.n	80064ea <__multiply+0x9e>
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	dd03      	ble.n	80064dc <__multiply+0x90>
 80064d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d05b      	beq.n	8006594 <__multiply+0x148>
 80064dc:	6106      	str	r6, [r0, #16]
 80064de:	b005      	add	sp, #20
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	f843 2b04 	str.w	r2, [r3], #4
 80064e8:	e7d8      	b.n	800649c <__multiply+0x50>
 80064ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80064ee:	f1ba 0f00 	cmp.w	sl, #0
 80064f2:	d024      	beq.n	800653e <__multiply+0xf2>
 80064f4:	f104 0e14 	add.w	lr, r4, #20
 80064f8:	46a9      	mov	r9, r5
 80064fa:	f04f 0c00 	mov.w	ip, #0
 80064fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006502:	f8d9 3000 	ldr.w	r3, [r9]
 8006506:	fa1f fb87 	uxth.w	fp, r7
 800650a:	b29b      	uxth	r3, r3
 800650c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006510:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006514:	f8d9 7000 	ldr.w	r7, [r9]
 8006518:	4463      	add	r3, ip
 800651a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800651e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006522:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800652c:	4572      	cmp	r2, lr
 800652e:	f849 3b04 	str.w	r3, [r9], #4
 8006532:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006536:	d8e2      	bhi.n	80064fe <__multiply+0xb2>
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	f845 c003 	str.w	ip, [r5, r3]
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006544:	3104      	adds	r1, #4
 8006546:	f1b9 0f00 	cmp.w	r9, #0
 800654a:	d021      	beq.n	8006590 <__multiply+0x144>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	f104 0c14 	add.w	ip, r4, #20
 8006552:	46ae      	mov	lr, r5
 8006554:	f04f 0a00 	mov.w	sl, #0
 8006558:	f8bc b000 	ldrh.w	fp, [ip]
 800655c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006560:	fb09 770b 	mla	r7, r9, fp, r7
 8006564:	4457      	add	r7, sl
 8006566:	b29b      	uxth	r3, r3
 8006568:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800656c:	f84e 3b04 	str.w	r3, [lr], #4
 8006570:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006574:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006578:	f8be 3000 	ldrh.w	r3, [lr]
 800657c:	fb09 330a 	mla	r3, r9, sl, r3
 8006580:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006584:	4562      	cmp	r2, ip
 8006586:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800658a:	d8e5      	bhi.n	8006558 <__multiply+0x10c>
 800658c:	9f01      	ldr	r7, [sp, #4]
 800658e:	51eb      	str	r3, [r5, r7]
 8006590:	3504      	adds	r5, #4
 8006592:	e799      	b.n	80064c8 <__multiply+0x7c>
 8006594:	3e01      	subs	r6, #1
 8006596:	e79b      	b.n	80064d0 <__multiply+0x84>
 8006598:	08007614 	.word	0x08007614
 800659c:	08007625 	.word	0x08007625

080065a0 <__pow5mult>:
 80065a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a4:	4615      	mov	r5, r2
 80065a6:	f012 0203 	ands.w	r2, r2, #3
 80065aa:	4607      	mov	r7, r0
 80065ac:	460e      	mov	r6, r1
 80065ae:	d007      	beq.n	80065c0 <__pow5mult+0x20>
 80065b0:	4c25      	ldr	r4, [pc, #148]	@ (8006648 <__pow5mult+0xa8>)
 80065b2:	3a01      	subs	r2, #1
 80065b4:	2300      	movs	r3, #0
 80065b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065ba:	f7ff fe9f 	bl	80062fc <__multadd>
 80065be:	4606      	mov	r6, r0
 80065c0:	10ad      	asrs	r5, r5, #2
 80065c2:	d03d      	beq.n	8006640 <__pow5mult+0xa0>
 80065c4:	69fc      	ldr	r4, [r7, #28]
 80065c6:	b97c      	cbnz	r4, 80065e8 <__pow5mult+0x48>
 80065c8:	2010      	movs	r0, #16
 80065ca:	f7ff fd7f 	bl	80060cc <malloc>
 80065ce:	4602      	mov	r2, r0
 80065d0:	61f8      	str	r0, [r7, #28]
 80065d2:	b928      	cbnz	r0, 80065e0 <__pow5mult+0x40>
 80065d4:	4b1d      	ldr	r3, [pc, #116]	@ (800664c <__pow5mult+0xac>)
 80065d6:	481e      	ldr	r0, [pc, #120]	@ (8006650 <__pow5mult+0xb0>)
 80065d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80065dc:	f000 fbea 	bl	8006db4 <__assert_func>
 80065e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e4:	6004      	str	r4, [r0, #0]
 80065e6:	60c4      	str	r4, [r0, #12]
 80065e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065f0:	b94c      	cbnz	r4, 8006606 <__pow5mult+0x66>
 80065f2:	f240 2171 	movw	r1, #625	@ 0x271
 80065f6:	4638      	mov	r0, r7
 80065f8:	f7ff ff12 	bl	8006420 <__i2b>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006602:	4604      	mov	r4, r0
 8006604:	6003      	str	r3, [r0, #0]
 8006606:	f04f 0900 	mov.w	r9, #0
 800660a:	07eb      	lsls	r3, r5, #31
 800660c:	d50a      	bpl.n	8006624 <__pow5mult+0x84>
 800660e:	4631      	mov	r1, r6
 8006610:	4622      	mov	r2, r4
 8006612:	4638      	mov	r0, r7
 8006614:	f7ff ff1a 	bl	800644c <__multiply>
 8006618:	4631      	mov	r1, r6
 800661a:	4680      	mov	r8, r0
 800661c:	4638      	mov	r0, r7
 800661e:	f7ff fe4b 	bl	80062b8 <_Bfree>
 8006622:	4646      	mov	r6, r8
 8006624:	106d      	asrs	r5, r5, #1
 8006626:	d00b      	beq.n	8006640 <__pow5mult+0xa0>
 8006628:	6820      	ldr	r0, [r4, #0]
 800662a:	b938      	cbnz	r0, 800663c <__pow5mult+0x9c>
 800662c:	4622      	mov	r2, r4
 800662e:	4621      	mov	r1, r4
 8006630:	4638      	mov	r0, r7
 8006632:	f7ff ff0b 	bl	800644c <__multiply>
 8006636:	6020      	str	r0, [r4, #0]
 8006638:	f8c0 9000 	str.w	r9, [r0]
 800663c:	4604      	mov	r4, r0
 800663e:	e7e4      	b.n	800660a <__pow5mult+0x6a>
 8006640:	4630      	mov	r0, r6
 8006642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006646:	bf00      	nop
 8006648:	08007680 	.word	0x08007680
 800664c:	080075a5 	.word	0x080075a5
 8006650:	08007625 	.word	0x08007625

08006654 <__lshift>:
 8006654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	460c      	mov	r4, r1
 800665a:	6849      	ldr	r1, [r1, #4]
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	4607      	mov	r7, r0
 8006666:	4691      	mov	r9, r2
 8006668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800666c:	f108 0601 	add.w	r6, r8, #1
 8006670:	42b3      	cmp	r3, r6
 8006672:	db0b      	blt.n	800668c <__lshift+0x38>
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff fddf 	bl	8006238 <_Balloc>
 800667a:	4605      	mov	r5, r0
 800667c:	b948      	cbnz	r0, 8006692 <__lshift+0x3e>
 800667e:	4602      	mov	r2, r0
 8006680:	4b28      	ldr	r3, [pc, #160]	@ (8006724 <__lshift+0xd0>)
 8006682:	4829      	ldr	r0, [pc, #164]	@ (8006728 <__lshift+0xd4>)
 8006684:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006688:	f000 fb94 	bl	8006db4 <__assert_func>
 800668c:	3101      	adds	r1, #1
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	e7ee      	b.n	8006670 <__lshift+0x1c>
 8006692:	2300      	movs	r3, #0
 8006694:	f100 0114 	add.w	r1, r0, #20
 8006698:	f100 0210 	add.w	r2, r0, #16
 800669c:	4618      	mov	r0, r3
 800669e:	4553      	cmp	r3, sl
 80066a0:	db33      	blt.n	800670a <__lshift+0xb6>
 80066a2:	6920      	ldr	r0, [r4, #16]
 80066a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066a8:	f104 0314 	add.w	r3, r4, #20
 80066ac:	f019 091f 	ands.w	r9, r9, #31
 80066b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066b8:	d02b      	beq.n	8006712 <__lshift+0xbe>
 80066ba:	f1c9 0e20 	rsb	lr, r9, #32
 80066be:	468a      	mov	sl, r1
 80066c0:	2200      	movs	r2, #0
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	fa00 f009 	lsl.w	r0, r0, r9
 80066c8:	4310      	orrs	r0, r2
 80066ca:	f84a 0b04 	str.w	r0, [sl], #4
 80066ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d2:	459c      	cmp	ip, r3
 80066d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80066d8:	d8f3      	bhi.n	80066c2 <__lshift+0x6e>
 80066da:	ebac 0304 	sub.w	r3, ip, r4
 80066de:	3b15      	subs	r3, #21
 80066e0:	f023 0303 	bic.w	r3, r3, #3
 80066e4:	3304      	adds	r3, #4
 80066e6:	f104 0015 	add.w	r0, r4, #21
 80066ea:	4584      	cmp	ip, r0
 80066ec:	bf38      	it	cc
 80066ee:	2304      	movcc	r3, #4
 80066f0:	50ca      	str	r2, [r1, r3]
 80066f2:	b10a      	cbz	r2, 80066f8 <__lshift+0xa4>
 80066f4:	f108 0602 	add.w	r6, r8, #2
 80066f8:	3e01      	subs	r6, #1
 80066fa:	4638      	mov	r0, r7
 80066fc:	612e      	str	r6, [r5, #16]
 80066fe:	4621      	mov	r1, r4
 8006700:	f7ff fdda 	bl	80062b8 <_Bfree>
 8006704:	4628      	mov	r0, r5
 8006706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670a:	f842 0f04 	str.w	r0, [r2, #4]!
 800670e:	3301      	adds	r3, #1
 8006710:	e7c5      	b.n	800669e <__lshift+0x4a>
 8006712:	3904      	subs	r1, #4
 8006714:	f853 2b04 	ldr.w	r2, [r3], #4
 8006718:	f841 2f04 	str.w	r2, [r1, #4]!
 800671c:	459c      	cmp	ip, r3
 800671e:	d8f9      	bhi.n	8006714 <__lshift+0xc0>
 8006720:	e7ea      	b.n	80066f8 <__lshift+0xa4>
 8006722:	bf00      	nop
 8006724:	08007614 	.word	0x08007614
 8006728:	08007625 	.word	0x08007625

0800672c <__mcmp>:
 800672c:	690a      	ldr	r2, [r1, #16]
 800672e:	4603      	mov	r3, r0
 8006730:	6900      	ldr	r0, [r0, #16]
 8006732:	1a80      	subs	r0, r0, r2
 8006734:	b530      	push	{r4, r5, lr}
 8006736:	d10e      	bne.n	8006756 <__mcmp+0x2a>
 8006738:	3314      	adds	r3, #20
 800673a:	3114      	adds	r1, #20
 800673c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006740:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006744:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006748:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800674c:	4295      	cmp	r5, r2
 800674e:	d003      	beq.n	8006758 <__mcmp+0x2c>
 8006750:	d205      	bcs.n	800675e <__mcmp+0x32>
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	bd30      	pop	{r4, r5, pc}
 8006758:	42a3      	cmp	r3, r4
 800675a:	d3f3      	bcc.n	8006744 <__mcmp+0x18>
 800675c:	e7fb      	b.n	8006756 <__mcmp+0x2a>
 800675e:	2001      	movs	r0, #1
 8006760:	e7f9      	b.n	8006756 <__mcmp+0x2a>
	...

08006764 <__mdiff>:
 8006764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	4689      	mov	r9, r1
 800676a:	4606      	mov	r6, r0
 800676c:	4611      	mov	r1, r2
 800676e:	4648      	mov	r0, r9
 8006770:	4614      	mov	r4, r2
 8006772:	f7ff ffdb 	bl	800672c <__mcmp>
 8006776:	1e05      	subs	r5, r0, #0
 8006778:	d112      	bne.n	80067a0 <__mdiff+0x3c>
 800677a:	4629      	mov	r1, r5
 800677c:	4630      	mov	r0, r6
 800677e:	f7ff fd5b 	bl	8006238 <_Balloc>
 8006782:	4602      	mov	r2, r0
 8006784:	b928      	cbnz	r0, 8006792 <__mdiff+0x2e>
 8006786:	4b3f      	ldr	r3, [pc, #252]	@ (8006884 <__mdiff+0x120>)
 8006788:	f240 2137 	movw	r1, #567	@ 0x237
 800678c:	483e      	ldr	r0, [pc, #248]	@ (8006888 <__mdiff+0x124>)
 800678e:	f000 fb11 	bl	8006db4 <__assert_func>
 8006792:	2301      	movs	r3, #1
 8006794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006798:	4610      	mov	r0, r2
 800679a:	b003      	add	sp, #12
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a0:	bfbc      	itt	lt
 80067a2:	464b      	movlt	r3, r9
 80067a4:	46a1      	movlt	r9, r4
 80067a6:	4630      	mov	r0, r6
 80067a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067ac:	bfba      	itte	lt
 80067ae:	461c      	movlt	r4, r3
 80067b0:	2501      	movlt	r5, #1
 80067b2:	2500      	movge	r5, #0
 80067b4:	f7ff fd40 	bl	8006238 <_Balloc>
 80067b8:	4602      	mov	r2, r0
 80067ba:	b918      	cbnz	r0, 80067c4 <__mdiff+0x60>
 80067bc:	4b31      	ldr	r3, [pc, #196]	@ (8006884 <__mdiff+0x120>)
 80067be:	f240 2145 	movw	r1, #581	@ 0x245
 80067c2:	e7e3      	b.n	800678c <__mdiff+0x28>
 80067c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067c8:	6926      	ldr	r6, [r4, #16]
 80067ca:	60c5      	str	r5, [r0, #12]
 80067cc:	f109 0310 	add.w	r3, r9, #16
 80067d0:	f109 0514 	add.w	r5, r9, #20
 80067d4:	f104 0e14 	add.w	lr, r4, #20
 80067d8:	f100 0b14 	add.w	fp, r0, #20
 80067dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80067e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	46d9      	mov	r9, fp
 80067e8:	f04f 0c00 	mov.w	ip, #0
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80067f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	fa1f f38a 	uxth.w	r3, sl
 80067fc:	4619      	mov	r1, r3
 80067fe:	b283      	uxth	r3, r0
 8006800:	1acb      	subs	r3, r1, r3
 8006802:	0c00      	lsrs	r0, r0, #16
 8006804:	4463      	add	r3, ip
 8006806:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800680a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006814:	4576      	cmp	r6, lr
 8006816:	f849 3b04 	str.w	r3, [r9], #4
 800681a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800681e:	d8e5      	bhi.n	80067ec <__mdiff+0x88>
 8006820:	1b33      	subs	r3, r6, r4
 8006822:	3b15      	subs	r3, #21
 8006824:	f023 0303 	bic.w	r3, r3, #3
 8006828:	3415      	adds	r4, #21
 800682a:	3304      	adds	r3, #4
 800682c:	42a6      	cmp	r6, r4
 800682e:	bf38      	it	cc
 8006830:	2304      	movcc	r3, #4
 8006832:	441d      	add	r5, r3
 8006834:	445b      	add	r3, fp
 8006836:	461e      	mov	r6, r3
 8006838:	462c      	mov	r4, r5
 800683a:	4544      	cmp	r4, r8
 800683c:	d30e      	bcc.n	800685c <__mdiff+0xf8>
 800683e:	f108 0103 	add.w	r1, r8, #3
 8006842:	1b49      	subs	r1, r1, r5
 8006844:	f021 0103 	bic.w	r1, r1, #3
 8006848:	3d03      	subs	r5, #3
 800684a:	45a8      	cmp	r8, r5
 800684c:	bf38      	it	cc
 800684e:	2100      	movcc	r1, #0
 8006850:	440b      	add	r3, r1
 8006852:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006856:	b191      	cbz	r1, 800687e <__mdiff+0x11a>
 8006858:	6117      	str	r7, [r2, #16]
 800685a:	e79d      	b.n	8006798 <__mdiff+0x34>
 800685c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006860:	46e6      	mov	lr, ip
 8006862:	0c08      	lsrs	r0, r1, #16
 8006864:	fa1c fc81 	uxtah	ip, ip, r1
 8006868:	4471      	add	r1, lr
 800686a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800686e:	b289      	uxth	r1, r1
 8006870:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006874:	f846 1b04 	str.w	r1, [r6], #4
 8006878:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800687c:	e7dd      	b.n	800683a <__mdiff+0xd6>
 800687e:	3f01      	subs	r7, #1
 8006880:	e7e7      	b.n	8006852 <__mdiff+0xee>
 8006882:	bf00      	nop
 8006884:	08007614 	.word	0x08007614
 8006888:	08007625 	.word	0x08007625

0800688c <__d2b>:
 800688c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006890:	460f      	mov	r7, r1
 8006892:	2101      	movs	r1, #1
 8006894:	ec59 8b10 	vmov	r8, r9, d0
 8006898:	4616      	mov	r6, r2
 800689a:	f7ff fccd 	bl	8006238 <_Balloc>
 800689e:	4604      	mov	r4, r0
 80068a0:	b930      	cbnz	r0, 80068b0 <__d2b+0x24>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4b23      	ldr	r3, [pc, #140]	@ (8006934 <__d2b+0xa8>)
 80068a6:	4824      	ldr	r0, [pc, #144]	@ (8006938 <__d2b+0xac>)
 80068a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80068ac:	f000 fa82 	bl	8006db4 <__assert_func>
 80068b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068b8:	b10d      	cbz	r5, 80068be <__d2b+0x32>
 80068ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	f1b8 0300 	subs.w	r3, r8, #0
 80068c4:	d023      	beq.n	800690e <__d2b+0x82>
 80068c6:	4668      	mov	r0, sp
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	f7ff fd7c 	bl	80063c6 <__lo0bits>
 80068ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068d2:	b1d0      	cbz	r0, 800690a <__d2b+0x7e>
 80068d4:	f1c0 0320 	rsb	r3, r0, #32
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	430b      	orrs	r3, r1
 80068de:	40c2      	lsrs	r2, r0
 80068e0:	6163      	str	r3, [r4, #20]
 80068e2:	9201      	str	r2, [sp, #4]
 80068e4:	9b01      	ldr	r3, [sp, #4]
 80068e6:	61a3      	str	r3, [r4, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bf0c      	ite	eq
 80068ec:	2201      	moveq	r2, #1
 80068ee:	2202      	movne	r2, #2
 80068f0:	6122      	str	r2, [r4, #16]
 80068f2:	b1a5      	cbz	r5, 800691e <__d2b+0x92>
 80068f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068f8:	4405      	add	r5, r0
 80068fa:	603d      	str	r5, [r7, #0]
 80068fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006900:	6030      	str	r0, [r6, #0]
 8006902:	4620      	mov	r0, r4
 8006904:	b003      	add	sp, #12
 8006906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800690a:	6161      	str	r1, [r4, #20]
 800690c:	e7ea      	b.n	80068e4 <__d2b+0x58>
 800690e:	a801      	add	r0, sp, #4
 8006910:	f7ff fd59 	bl	80063c6 <__lo0bits>
 8006914:	9b01      	ldr	r3, [sp, #4]
 8006916:	6163      	str	r3, [r4, #20]
 8006918:	3020      	adds	r0, #32
 800691a:	2201      	movs	r2, #1
 800691c:	e7e8      	b.n	80068f0 <__d2b+0x64>
 800691e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006922:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006926:	6038      	str	r0, [r7, #0]
 8006928:	6918      	ldr	r0, [r3, #16]
 800692a:	f7ff fd2d 	bl	8006388 <__hi0bits>
 800692e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006932:	e7e5      	b.n	8006900 <__d2b+0x74>
 8006934:	08007614 	.word	0x08007614
 8006938:	08007625 	.word	0x08007625

0800693c <__ssputs_r>:
 800693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	688e      	ldr	r6, [r1, #8]
 8006942:	461f      	mov	r7, r3
 8006944:	42be      	cmp	r6, r7
 8006946:	680b      	ldr	r3, [r1, #0]
 8006948:	4682      	mov	sl, r0
 800694a:	460c      	mov	r4, r1
 800694c:	4690      	mov	r8, r2
 800694e:	d82d      	bhi.n	80069ac <__ssputs_r+0x70>
 8006950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006954:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006958:	d026      	beq.n	80069a8 <__ssputs_r+0x6c>
 800695a:	6965      	ldr	r5, [r4, #20]
 800695c:	6909      	ldr	r1, [r1, #16]
 800695e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006962:	eba3 0901 	sub.w	r9, r3, r1
 8006966:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800696a:	1c7b      	adds	r3, r7, #1
 800696c:	444b      	add	r3, r9
 800696e:	106d      	asrs	r5, r5, #1
 8006970:	429d      	cmp	r5, r3
 8006972:	bf38      	it	cc
 8006974:	461d      	movcc	r5, r3
 8006976:	0553      	lsls	r3, r2, #21
 8006978:	d527      	bpl.n	80069ca <__ssputs_r+0x8e>
 800697a:	4629      	mov	r1, r5
 800697c:	f7ff fbd0 	bl	8006120 <_malloc_r>
 8006980:	4606      	mov	r6, r0
 8006982:	b360      	cbz	r0, 80069de <__ssputs_r+0xa2>
 8006984:	6921      	ldr	r1, [r4, #16]
 8006986:	464a      	mov	r2, r9
 8006988:	f000 fa06 	bl	8006d98 <memcpy>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	6126      	str	r6, [r4, #16]
 800699a:	6165      	str	r5, [r4, #20]
 800699c:	444e      	add	r6, r9
 800699e:	eba5 0509 	sub.w	r5, r5, r9
 80069a2:	6026      	str	r6, [r4, #0]
 80069a4:	60a5      	str	r5, [r4, #8]
 80069a6:	463e      	mov	r6, r7
 80069a8:	42be      	cmp	r6, r7
 80069aa:	d900      	bls.n	80069ae <__ssputs_r+0x72>
 80069ac:	463e      	mov	r6, r7
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	4632      	mov	r2, r6
 80069b2:	4641      	mov	r1, r8
 80069b4:	f000 f9c6 	bl	8006d44 <memmove>
 80069b8:	68a3      	ldr	r3, [r4, #8]
 80069ba:	1b9b      	subs	r3, r3, r6
 80069bc:	60a3      	str	r3, [r4, #8]
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	4433      	add	r3, r6
 80069c2:	6023      	str	r3, [r4, #0]
 80069c4:	2000      	movs	r0, #0
 80069c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ca:	462a      	mov	r2, r5
 80069cc:	f000 fa36 	bl	8006e3c <_realloc_r>
 80069d0:	4606      	mov	r6, r0
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d1e0      	bne.n	8006998 <__ssputs_r+0x5c>
 80069d6:	6921      	ldr	r1, [r4, #16]
 80069d8:	4650      	mov	r0, sl
 80069da:	f7ff fb2d 	bl	8006038 <_free_r>
 80069de:	230c      	movs	r3, #12
 80069e0:	f8ca 3000 	str.w	r3, [sl]
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	e7e9      	b.n	80069c6 <__ssputs_r+0x8a>
	...

080069f4 <_svfiprintf_r>:
 80069f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f8:	4698      	mov	r8, r3
 80069fa:	898b      	ldrh	r3, [r1, #12]
 80069fc:	061b      	lsls	r3, r3, #24
 80069fe:	b09d      	sub	sp, #116	@ 0x74
 8006a00:	4607      	mov	r7, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	d510      	bpl.n	8006a2a <_svfiprintf_r+0x36>
 8006a08:	690b      	ldr	r3, [r1, #16]
 8006a0a:	b973      	cbnz	r3, 8006a2a <_svfiprintf_r+0x36>
 8006a0c:	2140      	movs	r1, #64	@ 0x40
 8006a0e:	f7ff fb87 	bl	8006120 <_malloc_r>
 8006a12:	6028      	str	r0, [r5, #0]
 8006a14:	6128      	str	r0, [r5, #16]
 8006a16:	b930      	cbnz	r0, 8006a26 <_svfiprintf_r+0x32>
 8006a18:	230c      	movs	r3, #12
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	b01d      	add	sp, #116	@ 0x74
 8006a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a26:	2340      	movs	r3, #64	@ 0x40
 8006a28:	616b      	str	r3, [r5, #20]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a2e:	2320      	movs	r3, #32
 8006a30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a38:	2330      	movs	r3, #48	@ 0x30
 8006a3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bd8 <_svfiprintf_r+0x1e4>
 8006a3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a42:	f04f 0901 	mov.w	r9, #1
 8006a46:	4623      	mov	r3, r4
 8006a48:	469a      	mov	sl, r3
 8006a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a4e:	b10a      	cbz	r2, 8006a54 <_svfiprintf_r+0x60>
 8006a50:	2a25      	cmp	r2, #37	@ 0x25
 8006a52:	d1f9      	bne.n	8006a48 <_svfiprintf_r+0x54>
 8006a54:	ebba 0b04 	subs.w	fp, sl, r4
 8006a58:	d00b      	beq.n	8006a72 <_svfiprintf_r+0x7e>
 8006a5a:	465b      	mov	r3, fp
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4638      	mov	r0, r7
 8006a62:	f7ff ff6b 	bl	800693c <__ssputs_r>
 8006a66:	3001      	adds	r0, #1
 8006a68:	f000 80a7 	beq.w	8006bba <_svfiprintf_r+0x1c6>
 8006a6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a6e:	445a      	add	r2, fp
 8006a70:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a72:	f89a 3000 	ldrb.w	r3, [sl]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 809f 	beq.w	8006bba <_svfiprintf_r+0x1c6>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a86:	f10a 0a01 	add.w	sl, sl, #1
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	9307      	str	r3, [sp, #28]
 8006a8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a92:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a94:	4654      	mov	r4, sl
 8006a96:	2205      	movs	r2, #5
 8006a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a9c:	484e      	ldr	r0, [pc, #312]	@ (8006bd8 <_svfiprintf_r+0x1e4>)
 8006a9e:	f7f9 fb97 	bl	80001d0 <memchr>
 8006aa2:	9a04      	ldr	r2, [sp, #16]
 8006aa4:	b9d8      	cbnz	r0, 8006ade <_svfiprintf_r+0xea>
 8006aa6:	06d0      	lsls	r0, r2, #27
 8006aa8:	bf44      	itt	mi
 8006aaa:	2320      	movmi	r3, #32
 8006aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ab0:	0711      	lsls	r1, r2, #28
 8006ab2:	bf44      	itt	mi
 8006ab4:	232b      	movmi	r3, #43	@ 0x2b
 8006ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aba:	f89a 3000 	ldrb.w	r3, [sl]
 8006abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ac0:	d015      	beq.n	8006aee <_svfiprintf_r+0xfa>
 8006ac2:	9a07      	ldr	r2, [sp, #28]
 8006ac4:	4654      	mov	r4, sl
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	f04f 0c0a 	mov.w	ip, #10
 8006acc:	4621      	mov	r1, r4
 8006ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ad2:	3b30      	subs	r3, #48	@ 0x30
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d94b      	bls.n	8006b70 <_svfiprintf_r+0x17c>
 8006ad8:	b1b0      	cbz	r0, 8006b08 <_svfiprintf_r+0x114>
 8006ada:	9207      	str	r2, [sp, #28]
 8006adc:	e014      	b.n	8006b08 <_svfiprintf_r+0x114>
 8006ade:	eba0 0308 	sub.w	r3, r0, r8
 8006ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	46a2      	mov	sl, r4
 8006aec:	e7d2      	b.n	8006a94 <_svfiprintf_r+0xa0>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	9103      	str	r1, [sp, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfbb      	ittet	lt
 8006afa:	425b      	neglt	r3, r3
 8006afc:	f042 0202 	orrlt.w	r2, r2, #2
 8006b00:	9307      	strge	r3, [sp, #28]
 8006b02:	9307      	strlt	r3, [sp, #28]
 8006b04:	bfb8      	it	lt
 8006b06:	9204      	strlt	r2, [sp, #16]
 8006b08:	7823      	ldrb	r3, [r4, #0]
 8006b0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b0c:	d10a      	bne.n	8006b24 <_svfiprintf_r+0x130>
 8006b0e:	7863      	ldrb	r3, [r4, #1]
 8006b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b12:	d132      	bne.n	8006b7a <_svfiprintf_r+0x186>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	1d1a      	adds	r2, r3, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	9203      	str	r2, [sp, #12]
 8006b1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b20:	3402      	adds	r4, #2
 8006b22:	9305      	str	r3, [sp, #20]
 8006b24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006be8 <_svfiprintf_r+0x1f4>
 8006b28:	7821      	ldrb	r1, [r4, #0]
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	f7f9 fb4f 	bl	80001d0 <memchr>
 8006b32:	b138      	cbz	r0, 8006b44 <_svfiprintf_r+0x150>
 8006b34:	9b04      	ldr	r3, [sp, #16]
 8006b36:	eba0 000a 	sub.w	r0, r0, sl
 8006b3a:	2240      	movs	r2, #64	@ 0x40
 8006b3c:	4082      	lsls	r2, r0
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	3401      	adds	r4, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	4824      	ldr	r0, [pc, #144]	@ (8006bdc <_svfiprintf_r+0x1e8>)
 8006b4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b4e:	2206      	movs	r2, #6
 8006b50:	f7f9 fb3e 	bl	80001d0 <memchr>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d036      	beq.n	8006bc6 <_svfiprintf_r+0x1d2>
 8006b58:	4b21      	ldr	r3, [pc, #132]	@ (8006be0 <_svfiprintf_r+0x1ec>)
 8006b5a:	bb1b      	cbnz	r3, 8006ba4 <_svfiprintf_r+0x1b0>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	3307      	adds	r3, #7
 8006b60:	f023 0307 	bic.w	r3, r3, #7
 8006b64:	3308      	adds	r3, #8
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b6a:	4433      	add	r3, r6
 8006b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b6e:	e76a      	b.n	8006a46 <_svfiprintf_r+0x52>
 8006b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b74:	460c      	mov	r4, r1
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7a8      	b.n	8006acc <_svfiprintf_r+0xd8>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4620      	mov	r0, r4
 8006b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8c:	3a30      	subs	r2, #48	@ 0x30
 8006b8e:	2a09      	cmp	r2, #9
 8006b90:	d903      	bls.n	8006b9a <_svfiprintf_r+0x1a6>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0c6      	beq.n	8006b24 <_svfiprintf_r+0x130>
 8006b96:	9105      	str	r1, [sp, #20]
 8006b98:	e7c4      	b.n	8006b24 <_svfiprintf_r+0x130>
 8006b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e7f0      	b.n	8006b86 <_svfiprintf_r+0x192>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4b0e      	ldr	r3, [pc, #56]	@ (8006be4 <_svfiprintf_r+0x1f0>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4638      	mov	r0, r7
 8006bb0:	f7fd fe96 	bl	80048e0 <_printf_float>
 8006bb4:	1c42      	adds	r2, r0, #1
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	d1d6      	bne.n	8006b68 <_svfiprintf_r+0x174>
 8006bba:	89ab      	ldrh	r3, [r5, #12]
 8006bbc:	065b      	lsls	r3, r3, #25
 8006bbe:	f53f af2d 	bmi.w	8006a1c <_svfiprintf_r+0x28>
 8006bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bc4:	e72c      	b.n	8006a20 <_svfiprintf_r+0x2c>
 8006bc6:	ab03      	add	r3, sp, #12
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	462a      	mov	r2, r5
 8006bcc:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <_svfiprintf_r+0x1f0>)
 8006bce:	a904      	add	r1, sp, #16
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f7fe f91d 	bl	8004e10 <_printf_i>
 8006bd6:	e7ed      	b.n	8006bb4 <_svfiprintf_r+0x1c0>
 8006bd8:	08007780 	.word	0x08007780
 8006bdc:	0800778a 	.word	0x0800778a
 8006be0:	080048e1 	.word	0x080048e1
 8006be4:	0800693d 	.word	0x0800693d
 8006be8:	08007786 	.word	0x08007786

08006bec <__sflush_r>:
 8006bec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf4:	0716      	lsls	r6, r2, #28
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	d454      	bmi.n	8006ca6 <__sflush_r+0xba>
 8006bfc:	684b      	ldr	r3, [r1, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dc02      	bgt.n	8006c08 <__sflush_r+0x1c>
 8006c02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd48      	ble.n	8006c9a <__sflush_r+0xae>
 8006c08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	d045      	beq.n	8006c9a <__sflush_r+0xae>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c14:	682f      	ldr	r7, [r5, #0]
 8006c16:	6a21      	ldr	r1, [r4, #32]
 8006c18:	602b      	str	r3, [r5, #0]
 8006c1a:	d030      	beq.n	8006c7e <__sflush_r+0x92>
 8006c1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	0759      	lsls	r1, r3, #29
 8006c22:	d505      	bpl.n	8006c30 <__sflush_r+0x44>
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	1ad2      	subs	r2, r2, r3
 8006c28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c2a:	b10b      	cbz	r3, 8006c30 <__sflush_r+0x44>
 8006c2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c2e:	1ad2      	subs	r2, r2, r3
 8006c30:	2300      	movs	r3, #0
 8006c32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c34:	6a21      	ldr	r1, [r4, #32]
 8006c36:	4628      	mov	r0, r5
 8006c38:	47b0      	blx	r6
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	d106      	bne.n	8006c4e <__sflush_r+0x62>
 8006c40:	6829      	ldr	r1, [r5, #0]
 8006c42:	291d      	cmp	r1, #29
 8006c44:	d82b      	bhi.n	8006c9e <__sflush_r+0xb2>
 8006c46:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf0 <__sflush_r+0x104>)
 8006c48:	410a      	asrs	r2, r1
 8006c4a:	07d6      	lsls	r6, r2, #31
 8006c4c:	d427      	bmi.n	8006c9e <__sflush_r+0xb2>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	6062      	str	r2, [r4, #4]
 8006c52:	04d9      	lsls	r1, r3, #19
 8006c54:	6922      	ldr	r2, [r4, #16]
 8006c56:	6022      	str	r2, [r4, #0]
 8006c58:	d504      	bpl.n	8006c64 <__sflush_r+0x78>
 8006c5a:	1c42      	adds	r2, r0, #1
 8006c5c:	d101      	bne.n	8006c62 <__sflush_r+0x76>
 8006c5e:	682b      	ldr	r3, [r5, #0]
 8006c60:	b903      	cbnz	r3, 8006c64 <__sflush_r+0x78>
 8006c62:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c66:	602f      	str	r7, [r5, #0]
 8006c68:	b1b9      	cbz	r1, 8006c9a <__sflush_r+0xae>
 8006c6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c6e:	4299      	cmp	r1, r3
 8006c70:	d002      	beq.n	8006c78 <__sflush_r+0x8c>
 8006c72:	4628      	mov	r0, r5
 8006c74:	f7ff f9e0 	bl	8006038 <_free_r>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c7c:	e00d      	b.n	8006c9a <__sflush_r+0xae>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b0      	blx	r6
 8006c84:	4602      	mov	r2, r0
 8006c86:	1c50      	adds	r0, r2, #1
 8006c88:	d1c9      	bne.n	8006c1e <__sflush_r+0x32>
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0c6      	beq.n	8006c1e <__sflush_r+0x32>
 8006c90:	2b1d      	cmp	r3, #29
 8006c92:	d001      	beq.n	8006c98 <__sflush_r+0xac>
 8006c94:	2b16      	cmp	r3, #22
 8006c96:	d11e      	bne.n	8006cd6 <__sflush_r+0xea>
 8006c98:	602f      	str	r7, [r5, #0]
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	e022      	b.n	8006ce4 <__sflush_r+0xf8>
 8006c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ca2:	b21b      	sxth	r3, r3
 8006ca4:	e01b      	b.n	8006cde <__sflush_r+0xf2>
 8006ca6:	690f      	ldr	r7, [r1, #16]
 8006ca8:	2f00      	cmp	r7, #0
 8006caa:	d0f6      	beq.n	8006c9a <__sflush_r+0xae>
 8006cac:	0793      	lsls	r3, r2, #30
 8006cae:	680e      	ldr	r6, [r1, #0]
 8006cb0:	bf08      	it	eq
 8006cb2:	694b      	ldreq	r3, [r1, #20]
 8006cb4:	600f      	str	r7, [r1, #0]
 8006cb6:	bf18      	it	ne
 8006cb8:	2300      	movne	r3, #0
 8006cba:	eba6 0807 	sub.w	r8, r6, r7
 8006cbe:	608b      	str	r3, [r1, #8]
 8006cc0:	f1b8 0f00 	cmp.w	r8, #0
 8006cc4:	dde9      	ble.n	8006c9a <__sflush_r+0xae>
 8006cc6:	6a21      	ldr	r1, [r4, #32]
 8006cc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cca:	4643      	mov	r3, r8
 8006ccc:	463a      	mov	r2, r7
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b0      	blx	r6
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	dc08      	bgt.n	8006ce8 <__sflush_r+0xfc>
 8006cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce8:	4407      	add	r7, r0
 8006cea:	eba8 0800 	sub.w	r8, r8, r0
 8006cee:	e7e7      	b.n	8006cc0 <__sflush_r+0xd4>
 8006cf0:	dfbffffe 	.word	0xdfbffffe

08006cf4 <_fflush_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	690b      	ldr	r3, [r1, #16]
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	b913      	cbnz	r3, 8006d04 <_fflush_r+0x10>
 8006cfe:	2500      	movs	r5, #0
 8006d00:	4628      	mov	r0, r5
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	b118      	cbz	r0, 8006d0e <_fflush_r+0x1a>
 8006d06:	6a03      	ldr	r3, [r0, #32]
 8006d08:	b90b      	cbnz	r3, 8006d0e <_fflush_r+0x1a>
 8006d0a:	f7fe fa2d 	bl	8005168 <__sinit>
 8006d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f3      	beq.n	8006cfe <_fflush_r+0xa>
 8006d16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d18:	07d0      	lsls	r0, r2, #31
 8006d1a:	d404      	bmi.n	8006d26 <_fflush_r+0x32>
 8006d1c:	0599      	lsls	r1, r3, #22
 8006d1e:	d402      	bmi.n	8006d26 <_fflush_r+0x32>
 8006d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d22:	f7fe fb38 	bl	8005396 <__retarget_lock_acquire_recursive>
 8006d26:	4628      	mov	r0, r5
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f7ff ff5f 	bl	8006bec <__sflush_r>
 8006d2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d30:	07da      	lsls	r2, r3, #31
 8006d32:	4605      	mov	r5, r0
 8006d34:	d4e4      	bmi.n	8006d00 <_fflush_r+0xc>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	059b      	lsls	r3, r3, #22
 8006d3a:	d4e1      	bmi.n	8006d00 <_fflush_r+0xc>
 8006d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d3e:	f7fe fb2b 	bl	8005398 <__retarget_lock_release_recursive>
 8006d42:	e7dd      	b.n	8006d00 <_fflush_r+0xc>

08006d44 <memmove>:
 8006d44:	4288      	cmp	r0, r1
 8006d46:	b510      	push	{r4, lr}
 8006d48:	eb01 0402 	add.w	r4, r1, r2
 8006d4c:	d902      	bls.n	8006d54 <memmove+0x10>
 8006d4e:	4284      	cmp	r4, r0
 8006d50:	4623      	mov	r3, r4
 8006d52:	d807      	bhi.n	8006d64 <memmove+0x20>
 8006d54:	1e43      	subs	r3, r0, #1
 8006d56:	42a1      	cmp	r1, r4
 8006d58:	d008      	beq.n	8006d6c <memmove+0x28>
 8006d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d62:	e7f8      	b.n	8006d56 <memmove+0x12>
 8006d64:	4402      	add	r2, r0
 8006d66:	4601      	mov	r1, r0
 8006d68:	428a      	cmp	r2, r1
 8006d6a:	d100      	bne.n	8006d6e <memmove+0x2a>
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d76:	e7f7      	b.n	8006d68 <memmove+0x24>

08006d78 <_sbrk_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	@ (8006d94 <_sbrk_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fb f960 	bl	8002048 <_sbrk>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_sbrk_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_sbrk_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200004c4 	.word	0x200004c4

08006d98 <memcpy>:
 8006d98:	440a      	add	r2, r1
 8006d9a:	4291      	cmp	r1, r2
 8006d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da0:	d100      	bne.n	8006da4 <memcpy+0xc>
 8006da2:	4770      	bx	lr
 8006da4:	b510      	push	{r4, lr}
 8006da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dae:	4291      	cmp	r1, r2
 8006db0:	d1f9      	bne.n	8006da6 <memcpy+0xe>
 8006db2:	bd10      	pop	{r4, pc}

08006db4 <__assert_func>:
 8006db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006db6:	4614      	mov	r4, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b09      	ldr	r3, [pc, #36]	@ (8006de0 <__assert_func+0x2c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	68d8      	ldr	r0, [r3, #12]
 8006dc2:	b954      	cbnz	r4, 8006dda <__assert_func+0x26>
 8006dc4:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <__assert_func+0x30>)
 8006dc6:	461c      	mov	r4, r3
 8006dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dcc:	9100      	str	r1, [sp, #0]
 8006dce:	462b      	mov	r3, r5
 8006dd0:	4905      	ldr	r1, [pc, #20]	@ (8006de8 <__assert_func+0x34>)
 8006dd2:	f000 f86f 	bl	8006eb4 <fiprintf>
 8006dd6:	f000 f87f 	bl	8006ed8 <abort>
 8006dda:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__assert_func+0x38>)
 8006ddc:	e7f4      	b.n	8006dc8 <__assert_func+0x14>
 8006dde:	bf00      	nop
 8006de0:	20000028 	.word	0x20000028
 8006de4:	080077d6 	.word	0x080077d6
 8006de8:	080077a8 	.word	0x080077a8
 8006dec:	0800779b 	.word	0x0800779b

08006df0 <_calloc_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	fba1 5402 	umull	r5, r4, r1, r2
 8006df6:	b93c      	cbnz	r4, 8006e08 <_calloc_r+0x18>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7ff f991 	bl	8006120 <_malloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	b928      	cbnz	r0, 8006e0e <_calloc_r+0x1e>
 8006e02:	2600      	movs	r6, #0
 8006e04:	4630      	mov	r0, r6
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	220c      	movs	r2, #12
 8006e0a:	6002      	str	r2, [r0, #0]
 8006e0c:	e7f9      	b.n	8006e02 <_calloc_r+0x12>
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7fe fa42 	bl	800529a <memset>
 8006e16:	e7f5      	b.n	8006e04 <_calloc_r+0x14>

08006e18 <__ascii_mbtowc>:
 8006e18:	b082      	sub	sp, #8
 8006e1a:	b901      	cbnz	r1, 8006e1e <__ascii_mbtowc+0x6>
 8006e1c:	a901      	add	r1, sp, #4
 8006e1e:	b142      	cbz	r2, 8006e32 <__ascii_mbtowc+0x1a>
 8006e20:	b14b      	cbz	r3, 8006e36 <__ascii_mbtowc+0x1e>
 8006e22:	7813      	ldrb	r3, [r2, #0]
 8006e24:	600b      	str	r3, [r1, #0]
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	1e10      	subs	r0, r2, #0
 8006e2a:	bf18      	it	ne
 8006e2c:	2001      	movne	r0, #1
 8006e2e:	b002      	add	sp, #8
 8006e30:	4770      	bx	lr
 8006e32:	4610      	mov	r0, r2
 8006e34:	e7fb      	b.n	8006e2e <__ascii_mbtowc+0x16>
 8006e36:	f06f 0001 	mvn.w	r0, #1
 8006e3a:	e7f8      	b.n	8006e2e <__ascii_mbtowc+0x16>

08006e3c <_realloc_r>:
 8006e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e40:	4680      	mov	r8, r0
 8006e42:	4615      	mov	r5, r2
 8006e44:	460c      	mov	r4, r1
 8006e46:	b921      	cbnz	r1, 8006e52 <_realloc_r+0x16>
 8006e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	f7ff b967 	b.w	8006120 <_malloc_r>
 8006e52:	b92a      	cbnz	r2, 8006e60 <_realloc_r+0x24>
 8006e54:	f7ff f8f0 	bl	8006038 <_free_r>
 8006e58:	2400      	movs	r4, #0
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e60:	f000 f841 	bl	8006ee6 <_malloc_usable_size_r>
 8006e64:	4285      	cmp	r5, r0
 8006e66:	4606      	mov	r6, r0
 8006e68:	d802      	bhi.n	8006e70 <_realloc_r+0x34>
 8006e6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e6e:	d8f4      	bhi.n	8006e5a <_realloc_r+0x1e>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4640      	mov	r0, r8
 8006e74:	f7ff f954 	bl	8006120 <_malloc_r>
 8006e78:	4607      	mov	r7, r0
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0ec      	beq.n	8006e58 <_realloc_r+0x1c>
 8006e7e:	42b5      	cmp	r5, r6
 8006e80:	462a      	mov	r2, r5
 8006e82:	4621      	mov	r1, r4
 8006e84:	bf28      	it	cs
 8006e86:	4632      	movcs	r2, r6
 8006e88:	f7ff ff86 	bl	8006d98 <memcpy>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4640      	mov	r0, r8
 8006e90:	f7ff f8d2 	bl	8006038 <_free_r>
 8006e94:	463c      	mov	r4, r7
 8006e96:	e7e0      	b.n	8006e5a <_realloc_r+0x1e>

08006e98 <__ascii_wctomb>:
 8006e98:	4603      	mov	r3, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	b141      	cbz	r1, 8006eb0 <__ascii_wctomb+0x18>
 8006e9e:	2aff      	cmp	r2, #255	@ 0xff
 8006ea0:	d904      	bls.n	8006eac <__ascii_wctomb+0x14>
 8006ea2:	228a      	movs	r2, #138	@ 0x8a
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	4770      	bx	lr
 8006eac:	700a      	strb	r2, [r1, #0]
 8006eae:	2001      	movs	r0, #1
 8006eb0:	4770      	bx	lr
	...

08006eb4 <fiprintf>:
 8006eb4:	b40e      	push	{r1, r2, r3}
 8006eb6:	b503      	push	{r0, r1, lr}
 8006eb8:	4601      	mov	r1, r0
 8006eba:	ab03      	add	r3, sp, #12
 8006ebc:	4805      	ldr	r0, [pc, #20]	@ (8006ed4 <fiprintf+0x20>)
 8006ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	f000 f83f 	bl	8006f48 <_vfiprintf_r>
 8006eca:	b002      	add	sp, #8
 8006ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed0:	b003      	add	sp, #12
 8006ed2:	4770      	bx	lr
 8006ed4:	20000028 	.word	0x20000028

08006ed8 <abort>:
 8006ed8:	b508      	push	{r3, lr}
 8006eda:	2006      	movs	r0, #6
 8006edc:	f000 fa08 	bl	80072f0 <raise>
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7fb f838 	bl	8001f56 <_exit>

08006ee6 <_malloc_usable_size_r>:
 8006ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eea:	1f18      	subs	r0, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfbc      	itt	lt
 8006ef0:	580b      	ldrlt	r3, [r1, r0]
 8006ef2:	18c0      	addlt	r0, r0, r3
 8006ef4:	4770      	bx	lr

08006ef6 <__sfputc_r>:
 8006ef6:	6893      	ldr	r3, [r2, #8]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	b410      	push	{r4}
 8006efe:	6093      	str	r3, [r2, #8]
 8006f00:	da08      	bge.n	8006f14 <__sfputc_r+0x1e>
 8006f02:	6994      	ldr	r4, [r2, #24]
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	db01      	blt.n	8006f0c <__sfputc_r+0x16>
 8006f08:	290a      	cmp	r1, #10
 8006f0a:	d103      	bne.n	8006f14 <__sfputc_r+0x1e>
 8006f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f10:	f000 b932 	b.w	8007178 <__swbuf_r>
 8006f14:	6813      	ldr	r3, [r2, #0]
 8006f16:	1c58      	adds	r0, r3, #1
 8006f18:	6010      	str	r0, [r2, #0]
 8006f1a:	7019      	strb	r1, [r3, #0]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <__sfputs_r>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	4606      	mov	r6, r0
 8006f28:	460f      	mov	r7, r1
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	18d5      	adds	r5, r2, r3
 8006f2e:	42ac      	cmp	r4, r5
 8006f30:	d101      	bne.n	8006f36 <__sfputs_r+0x12>
 8006f32:	2000      	movs	r0, #0
 8006f34:	e007      	b.n	8006f46 <__sfputs_r+0x22>
 8006f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff ffda 	bl	8006ef6 <__sfputc_r>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d1f3      	bne.n	8006f2e <__sfputs_r+0xa>
 8006f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f48 <_vfiprintf_r>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	b09d      	sub	sp, #116	@ 0x74
 8006f50:	4614      	mov	r4, r2
 8006f52:	4698      	mov	r8, r3
 8006f54:	4606      	mov	r6, r0
 8006f56:	b118      	cbz	r0, 8006f60 <_vfiprintf_r+0x18>
 8006f58:	6a03      	ldr	r3, [r0, #32]
 8006f5a:	b90b      	cbnz	r3, 8006f60 <_vfiprintf_r+0x18>
 8006f5c:	f7fe f904 	bl	8005168 <__sinit>
 8006f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f62:	07d9      	lsls	r1, r3, #31
 8006f64:	d405      	bmi.n	8006f72 <_vfiprintf_r+0x2a>
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	059a      	lsls	r2, r3, #22
 8006f6a:	d402      	bmi.n	8006f72 <_vfiprintf_r+0x2a>
 8006f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f6e:	f7fe fa12 	bl	8005396 <__retarget_lock_acquire_recursive>
 8006f72:	89ab      	ldrh	r3, [r5, #12]
 8006f74:	071b      	lsls	r3, r3, #28
 8006f76:	d501      	bpl.n	8006f7c <_vfiprintf_r+0x34>
 8006f78:	692b      	ldr	r3, [r5, #16]
 8006f7a:	b99b      	cbnz	r3, 8006fa4 <_vfiprintf_r+0x5c>
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f000 f938 	bl	80071f4 <__swsetup_r>
 8006f84:	b170      	cbz	r0, 8006fa4 <_vfiprintf_r+0x5c>
 8006f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f88:	07dc      	lsls	r4, r3, #31
 8006f8a:	d504      	bpl.n	8006f96 <_vfiprintf_r+0x4e>
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	b01d      	add	sp, #116	@ 0x74
 8006f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	0598      	lsls	r0, r3, #22
 8006f9a:	d4f7      	bmi.n	8006f8c <_vfiprintf_r+0x44>
 8006f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f9e:	f7fe f9fb 	bl	8005398 <__retarget_lock_release_recursive>
 8006fa2:	e7f3      	b.n	8006f8c <_vfiprintf_r+0x44>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa8:	2320      	movs	r3, #32
 8006faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb2:	2330      	movs	r3, #48	@ 0x30
 8006fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007164 <_vfiprintf_r+0x21c>
 8006fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fbc:	f04f 0901 	mov.w	r9, #1
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	469a      	mov	sl, r3
 8006fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc8:	b10a      	cbz	r2, 8006fce <_vfiprintf_r+0x86>
 8006fca:	2a25      	cmp	r2, #37	@ 0x25
 8006fcc:	d1f9      	bne.n	8006fc2 <_vfiprintf_r+0x7a>
 8006fce:	ebba 0b04 	subs.w	fp, sl, r4
 8006fd2:	d00b      	beq.n	8006fec <_vfiprintf_r+0xa4>
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff ffa2 	bl	8006f24 <__sfputs_r>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f000 80a7 	beq.w	8007134 <_vfiprintf_r+0x1ec>
 8006fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe8:	445a      	add	r2, fp
 8006fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fec:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 809f 	beq.w	8007134 <_vfiprintf_r+0x1ec>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007000:	f10a 0a01 	add.w	sl, sl, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800700c:	931a      	str	r3, [sp, #104]	@ 0x68
 800700e:	4654      	mov	r4, sl
 8007010:	2205      	movs	r2, #5
 8007012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007016:	4853      	ldr	r0, [pc, #332]	@ (8007164 <_vfiprintf_r+0x21c>)
 8007018:	f7f9 f8da 	bl	80001d0 <memchr>
 800701c:	9a04      	ldr	r2, [sp, #16]
 800701e:	b9d8      	cbnz	r0, 8007058 <_vfiprintf_r+0x110>
 8007020:	06d1      	lsls	r1, r2, #27
 8007022:	bf44      	itt	mi
 8007024:	2320      	movmi	r3, #32
 8007026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800702a:	0713      	lsls	r3, r2, #28
 800702c:	bf44      	itt	mi
 800702e:	232b      	movmi	r3, #43	@ 0x2b
 8007030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007034:	f89a 3000 	ldrb.w	r3, [sl]
 8007038:	2b2a      	cmp	r3, #42	@ 0x2a
 800703a:	d015      	beq.n	8007068 <_vfiprintf_r+0x120>
 800703c:	9a07      	ldr	r2, [sp, #28]
 800703e:	4654      	mov	r4, sl
 8007040:	2000      	movs	r0, #0
 8007042:	f04f 0c0a 	mov.w	ip, #10
 8007046:	4621      	mov	r1, r4
 8007048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800704c:	3b30      	subs	r3, #48	@ 0x30
 800704e:	2b09      	cmp	r3, #9
 8007050:	d94b      	bls.n	80070ea <_vfiprintf_r+0x1a2>
 8007052:	b1b0      	cbz	r0, 8007082 <_vfiprintf_r+0x13a>
 8007054:	9207      	str	r2, [sp, #28]
 8007056:	e014      	b.n	8007082 <_vfiprintf_r+0x13a>
 8007058:	eba0 0308 	sub.w	r3, r0, r8
 800705c:	fa09 f303 	lsl.w	r3, r9, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	46a2      	mov	sl, r4
 8007066:	e7d2      	b.n	800700e <_vfiprintf_r+0xc6>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	1d19      	adds	r1, r3, #4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	9103      	str	r1, [sp, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bfbb      	ittet	lt
 8007074:	425b      	neglt	r3, r3
 8007076:	f042 0202 	orrlt.w	r2, r2, #2
 800707a:	9307      	strge	r3, [sp, #28]
 800707c:	9307      	strlt	r3, [sp, #28]
 800707e:	bfb8      	it	lt
 8007080:	9204      	strlt	r2, [sp, #16]
 8007082:	7823      	ldrb	r3, [r4, #0]
 8007084:	2b2e      	cmp	r3, #46	@ 0x2e
 8007086:	d10a      	bne.n	800709e <_vfiprintf_r+0x156>
 8007088:	7863      	ldrb	r3, [r4, #1]
 800708a:	2b2a      	cmp	r3, #42	@ 0x2a
 800708c:	d132      	bne.n	80070f4 <_vfiprintf_r+0x1ac>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	9203      	str	r2, [sp, #12]
 8007096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800709a:	3402      	adds	r4, #2
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007174 <_vfiprintf_r+0x22c>
 80070a2:	7821      	ldrb	r1, [r4, #0]
 80070a4:	2203      	movs	r2, #3
 80070a6:	4650      	mov	r0, sl
 80070a8:	f7f9 f892 	bl	80001d0 <memchr>
 80070ac:	b138      	cbz	r0, 80070be <_vfiprintf_r+0x176>
 80070ae:	9b04      	ldr	r3, [sp, #16]
 80070b0:	eba0 000a 	sub.w	r0, r0, sl
 80070b4:	2240      	movs	r2, #64	@ 0x40
 80070b6:	4082      	lsls	r2, r0
 80070b8:	4313      	orrs	r3, r2
 80070ba:	3401      	adds	r4, #1
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c2:	4829      	ldr	r0, [pc, #164]	@ (8007168 <_vfiprintf_r+0x220>)
 80070c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070c8:	2206      	movs	r2, #6
 80070ca:	f7f9 f881 	bl	80001d0 <memchr>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d03f      	beq.n	8007152 <_vfiprintf_r+0x20a>
 80070d2:	4b26      	ldr	r3, [pc, #152]	@ (800716c <_vfiprintf_r+0x224>)
 80070d4:	bb1b      	cbnz	r3, 800711e <_vfiprintf_r+0x1d6>
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	3307      	adds	r3, #7
 80070da:	f023 0307 	bic.w	r3, r3, #7
 80070de:	3308      	adds	r3, #8
 80070e0:	9303      	str	r3, [sp, #12]
 80070e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e4:	443b      	add	r3, r7
 80070e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e8:	e76a      	b.n	8006fc0 <_vfiprintf_r+0x78>
 80070ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ee:	460c      	mov	r4, r1
 80070f0:	2001      	movs	r0, #1
 80070f2:	e7a8      	b.n	8007046 <_vfiprintf_r+0xfe>
 80070f4:	2300      	movs	r3, #0
 80070f6:	3401      	adds	r4, #1
 80070f8:	9305      	str	r3, [sp, #20]
 80070fa:	4619      	mov	r1, r3
 80070fc:	f04f 0c0a 	mov.w	ip, #10
 8007100:	4620      	mov	r0, r4
 8007102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007106:	3a30      	subs	r2, #48	@ 0x30
 8007108:	2a09      	cmp	r2, #9
 800710a:	d903      	bls.n	8007114 <_vfiprintf_r+0x1cc>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0c6      	beq.n	800709e <_vfiprintf_r+0x156>
 8007110:	9105      	str	r1, [sp, #20]
 8007112:	e7c4      	b.n	800709e <_vfiprintf_r+0x156>
 8007114:	fb0c 2101 	mla	r1, ip, r1, r2
 8007118:	4604      	mov	r4, r0
 800711a:	2301      	movs	r3, #1
 800711c:	e7f0      	b.n	8007100 <_vfiprintf_r+0x1b8>
 800711e:	ab03      	add	r3, sp, #12
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	462a      	mov	r2, r5
 8007124:	4b12      	ldr	r3, [pc, #72]	@ (8007170 <_vfiprintf_r+0x228>)
 8007126:	a904      	add	r1, sp, #16
 8007128:	4630      	mov	r0, r6
 800712a:	f7fd fbd9 	bl	80048e0 <_printf_float>
 800712e:	4607      	mov	r7, r0
 8007130:	1c78      	adds	r0, r7, #1
 8007132:	d1d6      	bne.n	80070e2 <_vfiprintf_r+0x19a>
 8007134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007136:	07d9      	lsls	r1, r3, #31
 8007138:	d405      	bmi.n	8007146 <_vfiprintf_r+0x1fe>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	059a      	lsls	r2, r3, #22
 800713e:	d402      	bmi.n	8007146 <_vfiprintf_r+0x1fe>
 8007140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007142:	f7fe f929 	bl	8005398 <__retarget_lock_release_recursive>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	065b      	lsls	r3, r3, #25
 800714a:	f53f af1f 	bmi.w	8006f8c <_vfiprintf_r+0x44>
 800714e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007150:	e71e      	b.n	8006f90 <_vfiprintf_r+0x48>
 8007152:	ab03      	add	r3, sp, #12
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	462a      	mov	r2, r5
 8007158:	4b05      	ldr	r3, [pc, #20]	@ (8007170 <_vfiprintf_r+0x228>)
 800715a:	a904      	add	r1, sp, #16
 800715c:	4630      	mov	r0, r6
 800715e:	f7fd fe57 	bl	8004e10 <_printf_i>
 8007162:	e7e4      	b.n	800712e <_vfiprintf_r+0x1e6>
 8007164:	08007780 	.word	0x08007780
 8007168:	0800778a 	.word	0x0800778a
 800716c:	080048e1 	.word	0x080048e1
 8007170:	08006f25 	.word	0x08006f25
 8007174:	08007786 	.word	0x08007786

08007178 <__swbuf_r>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	460e      	mov	r6, r1
 800717c:	4614      	mov	r4, r2
 800717e:	4605      	mov	r5, r0
 8007180:	b118      	cbz	r0, 800718a <__swbuf_r+0x12>
 8007182:	6a03      	ldr	r3, [r0, #32]
 8007184:	b90b      	cbnz	r3, 800718a <__swbuf_r+0x12>
 8007186:	f7fd ffef 	bl	8005168 <__sinit>
 800718a:	69a3      	ldr	r3, [r4, #24]
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	071a      	lsls	r2, r3, #28
 8007192:	d501      	bpl.n	8007198 <__swbuf_r+0x20>
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	b943      	cbnz	r3, 80071aa <__swbuf_r+0x32>
 8007198:	4621      	mov	r1, r4
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f82a 	bl	80071f4 <__swsetup_r>
 80071a0:	b118      	cbz	r0, 80071aa <__swbuf_r+0x32>
 80071a2:	f04f 37ff 	mov.w	r7, #4294967295
 80071a6:	4638      	mov	r0, r7
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	6922      	ldr	r2, [r4, #16]
 80071ae:	1a98      	subs	r0, r3, r2
 80071b0:	6963      	ldr	r3, [r4, #20]
 80071b2:	b2f6      	uxtb	r6, r6
 80071b4:	4283      	cmp	r3, r0
 80071b6:	4637      	mov	r7, r6
 80071b8:	dc05      	bgt.n	80071c6 <__swbuf_r+0x4e>
 80071ba:	4621      	mov	r1, r4
 80071bc:	4628      	mov	r0, r5
 80071be:	f7ff fd99 	bl	8006cf4 <_fflush_r>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d1ed      	bne.n	80071a2 <__swbuf_r+0x2a>
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	60a3      	str	r3, [r4, #8]
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	6022      	str	r2, [r4, #0]
 80071d2:	701e      	strb	r6, [r3, #0]
 80071d4:	6962      	ldr	r2, [r4, #20]
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	429a      	cmp	r2, r3
 80071da:	d004      	beq.n	80071e6 <__swbuf_r+0x6e>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	07db      	lsls	r3, r3, #31
 80071e0:	d5e1      	bpl.n	80071a6 <__swbuf_r+0x2e>
 80071e2:	2e0a      	cmp	r6, #10
 80071e4:	d1df      	bne.n	80071a6 <__swbuf_r+0x2e>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4628      	mov	r0, r5
 80071ea:	f7ff fd83 	bl	8006cf4 <_fflush_r>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d0d9      	beq.n	80071a6 <__swbuf_r+0x2e>
 80071f2:	e7d6      	b.n	80071a2 <__swbuf_r+0x2a>

080071f4 <__swsetup_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4b29      	ldr	r3, [pc, #164]	@ (800729c <__swsetup_r+0xa8>)
 80071f8:	4605      	mov	r5, r0
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	460c      	mov	r4, r1
 80071fe:	b118      	cbz	r0, 8007208 <__swsetup_r+0x14>
 8007200:	6a03      	ldr	r3, [r0, #32]
 8007202:	b90b      	cbnz	r3, 8007208 <__swsetup_r+0x14>
 8007204:	f7fd ffb0 	bl	8005168 <__sinit>
 8007208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720c:	0719      	lsls	r1, r3, #28
 800720e:	d422      	bmi.n	8007256 <__swsetup_r+0x62>
 8007210:	06da      	lsls	r2, r3, #27
 8007212:	d407      	bmi.n	8007224 <__swsetup_r+0x30>
 8007214:	2209      	movs	r2, #9
 8007216:	602a      	str	r2, [r5, #0]
 8007218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	f04f 30ff 	mov.w	r0, #4294967295
 8007222:	e033      	b.n	800728c <__swsetup_r+0x98>
 8007224:	0758      	lsls	r0, r3, #29
 8007226:	d512      	bpl.n	800724e <__swsetup_r+0x5a>
 8007228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800722a:	b141      	cbz	r1, 800723e <__swsetup_r+0x4a>
 800722c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007230:	4299      	cmp	r1, r3
 8007232:	d002      	beq.n	800723a <__swsetup_r+0x46>
 8007234:	4628      	mov	r0, r5
 8007236:	f7fe feff 	bl	8006038 <_free_r>
 800723a:	2300      	movs	r3, #0
 800723c:	6363      	str	r3, [r4, #52]	@ 0x34
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	2300      	movs	r3, #0
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f043 0308 	orr.w	r3, r3, #8
 8007254:	81a3      	strh	r3, [r4, #12]
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	b94b      	cbnz	r3, 800726e <__swsetup_r+0x7a>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007264:	d003      	beq.n	800726e <__swsetup_r+0x7a>
 8007266:	4621      	mov	r1, r4
 8007268:	4628      	mov	r0, r5
 800726a:	f000 f883 	bl	8007374 <__smakebuf_r>
 800726e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007272:	f013 0201 	ands.w	r2, r3, #1
 8007276:	d00a      	beq.n	800728e <__swsetup_r+0x9a>
 8007278:	2200      	movs	r2, #0
 800727a:	60a2      	str	r2, [r4, #8]
 800727c:	6962      	ldr	r2, [r4, #20]
 800727e:	4252      	negs	r2, r2
 8007280:	61a2      	str	r2, [r4, #24]
 8007282:	6922      	ldr	r2, [r4, #16]
 8007284:	b942      	cbnz	r2, 8007298 <__swsetup_r+0xa4>
 8007286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800728a:	d1c5      	bne.n	8007218 <__swsetup_r+0x24>
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	0799      	lsls	r1, r3, #30
 8007290:	bf58      	it	pl
 8007292:	6962      	ldrpl	r2, [r4, #20]
 8007294:	60a2      	str	r2, [r4, #8]
 8007296:	e7f4      	b.n	8007282 <__swsetup_r+0x8e>
 8007298:	2000      	movs	r0, #0
 800729a:	e7f7      	b.n	800728c <__swsetup_r+0x98>
 800729c:	20000028 	.word	0x20000028

080072a0 <_raise_r>:
 80072a0:	291f      	cmp	r1, #31
 80072a2:	b538      	push	{r3, r4, r5, lr}
 80072a4:	4605      	mov	r5, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	d904      	bls.n	80072b4 <_raise_r+0x14>
 80072aa:	2316      	movs	r3, #22
 80072ac:	6003      	str	r3, [r0, #0]
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80072b6:	b112      	cbz	r2, 80072be <_raise_r+0x1e>
 80072b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072bc:	b94b      	cbnz	r3, 80072d2 <_raise_r+0x32>
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f830 	bl	8007324 <_getpid_r>
 80072c4:	4622      	mov	r2, r4
 80072c6:	4601      	mov	r1, r0
 80072c8:	4628      	mov	r0, r5
 80072ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ce:	f000 b817 	b.w	8007300 <_kill_r>
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d00a      	beq.n	80072ec <_raise_r+0x4c>
 80072d6:	1c59      	adds	r1, r3, #1
 80072d8:	d103      	bne.n	80072e2 <_raise_r+0x42>
 80072da:	2316      	movs	r3, #22
 80072dc:	6003      	str	r3, [r0, #0]
 80072de:	2001      	movs	r0, #1
 80072e0:	e7e7      	b.n	80072b2 <_raise_r+0x12>
 80072e2:	2100      	movs	r1, #0
 80072e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072e8:	4620      	mov	r0, r4
 80072ea:	4798      	blx	r3
 80072ec:	2000      	movs	r0, #0
 80072ee:	e7e0      	b.n	80072b2 <_raise_r+0x12>

080072f0 <raise>:
 80072f0:	4b02      	ldr	r3, [pc, #8]	@ (80072fc <raise+0xc>)
 80072f2:	4601      	mov	r1, r0
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	f7ff bfd3 	b.w	80072a0 <_raise_r>
 80072fa:	bf00      	nop
 80072fc:	20000028 	.word	0x20000028

08007300 <_kill_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4d07      	ldr	r5, [pc, #28]	@ (8007320 <_kill_r+0x20>)
 8007304:	2300      	movs	r3, #0
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	4611      	mov	r1, r2
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	f7fa fe12 	bl	8001f36 <_kill>
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	d102      	bne.n	800731c <_kill_r+0x1c>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	b103      	cbz	r3, 800731c <_kill_r+0x1c>
 800731a:	6023      	str	r3, [r4, #0]
 800731c:	bd38      	pop	{r3, r4, r5, pc}
 800731e:	bf00      	nop
 8007320:	200004c4 	.word	0x200004c4

08007324 <_getpid_r>:
 8007324:	f7fa bdff 	b.w	8001f26 <_getpid>

08007328 <__swhatbuf_r>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	460c      	mov	r4, r1
 800732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007330:	2900      	cmp	r1, #0
 8007332:	b096      	sub	sp, #88	@ 0x58
 8007334:	4615      	mov	r5, r2
 8007336:	461e      	mov	r6, r3
 8007338:	da0d      	bge.n	8007356 <__swhatbuf_r+0x2e>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007340:	f04f 0100 	mov.w	r1, #0
 8007344:	bf14      	ite	ne
 8007346:	2340      	movne	r3, #64	@ 0x40
 8007348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800734c:	2000      	movs	r0, #0
 800734e:	6031      	str	r1, [r6, #0]
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	b016      	add	sp, #88	@ 0x58
 8007354:	bd70      	pop	{r4, r5, r6, pc}
 8007356:	466a      	mov	r2, sp
 8007358:	f000 f848 	bl	80073ec <_fstat_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	dbec      	blt.n	800733a <__swhatbuf_r+0x12>
 8007360:	9901      	ldr	r1, [sp, #4]
 8007362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800736a:	4259      	negs	r1, r3
 800736c:	4159      	adcs	r1, r3
 800736e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007372:	e7eb      	b.n	800734c <__swhatbuf_r+0x24>

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b003      	add	sp, #12
 800738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007390:	ab01      	add	r3, sp, #4
 8007392:	466a      	mov	r2, sp
 8007394:	f7ff ffc8 	bl	8007328 <__swhatbuf_r>
 8007398:	9f00      	ldr	r7, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4639      	mov	r1, r7
 800739e:	4630      	mov	r0, r6
 80073a0:	f7fe febe 	bl	8006120 <_malloc_r>
 80073a4:	b948      	cbnz	r0, 80073ba <__smakebuf_r+0x46>
 80073a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073aa:	059a      	lsls	r2, r3, #22
 80073ac:	d4ee      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	f043 0302 	orr.w	r3, r3, #2
 80073b6:	81a3      	strh	r3, [r4, #12]
 80073b8:	e7e2      	b.n	8007380 <__smakebuf_r+0xc>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	6020      	str	r0, [r4, #0]
 80073be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073ca:	b15b      	cbz	r3, 80073e4 <__smakebuf_r+0x70>
 80073cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 f81d 	bl	8007410 <_isatty_r>
 80073d6:	b128      	cbz	r0, 80073e4 <__smakebuf_r+0x70>
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	431d      	orrs	r5, r3
 80073e8:	81a5      	strh	r5, [r4, #12]
 80073ea:	e7cf      	b.n	800738c <__smakebuf_r+0x18>

080073ec <_fstat_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d07      	ldr	r5, [pc, #28]	@ (800740c <_fstat_r+0x20>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	f7fa fdfc 	bl	8001ff6 <_fstat>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d102      	bne.n	8007408 <_fstat_r+0x1c>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	b103      	cbz	r3, 8007408 <_fstat_r+0x1c>
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	bd38      	pop	{r3, r4, r5, pc}
 800740a:	bf00      	nop
 800740c:	200004c4 	.word	0x200004c4

08007410 <_isatty_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d06      	ldr	r5, [pc, #24]	@ (800742c <_isatty_r+0x1c>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fa fdfb 	bl	8002016 <_isatty>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_isatty_r+0x1a>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_isatty_r+0x1a>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	200004c4 	.word	0x200004c4

08007430 <_init>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	bf00      	nop
 8007434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007436:	bc08      	pop	{r3}
 8007438:	469e      	mov	lr, r3
 800743a:	4770      	bx	lr

0800743c <_fini>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr
